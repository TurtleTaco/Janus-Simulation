

================================================================
== Vivado HLS Report for 'janus_step'
================================================================
* Date:           Tue Nov  7 14:40:44 2017

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        astroSim
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu19eg-ffve1924-3-e-es2


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.50|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  216|  216|  216|  216|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 9
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
* FSM state operations: 

 <State 1>: 1.21ns
ST_1: p_int_8_vz_read_3 (145)  [1/1] 0.00ns
:0  %p_int_8_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_vz_read)

ST_1: p_int_7_vz_read_3 (146)  [1/1] 0.00ns
:1  %p_int_7_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_vz_read)

ST_1: p_int_6_vz_read52 (147)  [1/1] 0.00ns
:2  %p_int_6_vz_read52 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_vz_read)

ST_1: p_int_5_vz_read51 (148)  [1/1] 0.00ns
:3  %p_int_5_vz_read51 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_vz_read)

ST_1: p_int_4_vz_read_3 (149)  [1/1] 0.00ns
:4  %p_int_4_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_vz_read)

ST_1: p_int_3_vz_read_3 (150)  [1/1] 0.00ns
:5  %p_int_3_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_vz_read)

ST_1: p_int_2_vz_read_2 (151)  [1/1] 0.00ns
:6  %p_int_2_vz_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_vz_read)

ST_1: p_int_1_vz_read_3 (152)  [1/1] 0.00ns
:7  %p_int_1_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_vz_read)

ST_1: p_int_0_vz_read_3 (153)  [1/1] 0.00ns
:8  %p_int_0_vz_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_vz_read)

ST_1: p_int_8_vy_read_3 (154)  [1/1] 0.00ns
:9  %p_int_8_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_vy_read)

ST_1: p_int_7_vy_read_3 (155)  [1/1] 0.00ns
:10  %p_int_7_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_vy_read)

ST_1: p_int_6_vy_read_3 (156)  [1/1] 0.00ns
:11  %p_int_6_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_vy_read)

ST_1: p_int_5_vy_read42 (157)  [1/1] 0.00ns
:12  %p_int_5_vy_read42 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_vy_read)

ST_1: p_int_4_vy_read41 (158)  [1/1] 0.00ns
:13  %p_int_4_vy_read41 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_vy_read)

ST_1: p_int_3_vy_read_3 (159)  [1/1] 0.00ns
:14  %p_int_3_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_vy_read)

ST_1: p_int_2_vy_read_3 (160)  [1/1] 0.00ns
:15  %p_int_2_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_vy_read)

ST_1: p_int_1_vy_read_2 (161)  [1/1] 0.00ns
:16  %p_int_1_vy_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_vy_read)

ST_1: p_int_0_vy_read_3 (162)  [1/1] 0.00ns
:17  %p_int_0_vy_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_vy_read)

ST_1: p_int_8_vx_read_3 (163)  [1/1] 0.00ns
:18  %p_int_8_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_vx_read)

ST_1: p_int_7_vx_read_3 (164)  [1/1] 0.00ns
:19  %p_int_7_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_vx_read)

ST_1: p_int_6_vx_read_3 (165)  [1/1] 0.00ns
:20  %p_int_6_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_vx_read)

ST_1: p_int_5_vx_read_3 (166)  [1/1] 0.00ns
:21  %p_int_5_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_vx_read)

ST_1: p_int_4_vx_read32 (167)  [1/1] 0.00ns
:22  %p_int_4_vx_read32 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_vx_read)

ST_1: p_int_3_vx_read31 (168)  [1/1] 0.00ns
:23  %p_int_3_vx_read31 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_vx_read)

ST_1: p_int_2_vx_read_3 (169)  [1/1] 0.00ns
:24  %p_int_2_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_vx_read)

ST_1: p_int_1_vx_read_3 (170)  [1/1] 0.00ns
:25  %p_int_1_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_vx_read)

ST_1: p_int_0_vx_read_3 (171)  [1/1] 0.00ns
:26  %p_int_0_vx_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_vx_read)

ST_1: p_int_8_z_read_2 (172)  [1/1] 0.00ns
:27  %p_int_8_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_z_read)

ST_1: p_int_7_z_read_2 (173)  [1/1] 0.00ns
:28  %p_int_7_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_z_read)

ST_1: p_int_6_z_read_2 (174)  [1/1] 0.00ns
:29  %p_int_6_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_z_read)

ST_1: p_int_5_z_read_2 (175)  [1/1] 0.00ns
:30  %p_int_5_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_z_read)

ST_1: p_int_4_z_read_2 (176)  [1/1] 0.00ns
:31  %p_int_4_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_z_read)

ST_1: p_int_3_z_read_2 (177)  [1/1] 0.00ns
:32  %p_int_3_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_z_read)

ST_1: p_int_2_z_read21 (178)  [1/1] 0.00ns
:33  %p_int_2_z_read21 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_z_read)

ST_1: p_int_1_z_read_2 (179)  [1/1] 0.00ns
:34  %p_int_1_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_z_read)

ST_1: p_int_0_z_read_2 (180)  [1/1] 0.00ns
:35  %p_int_0_z_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_z_read)

ST_1: p_int_8_y_read_2 (181)  [1/1] 0.00ns
:36  %p_int_8_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_y_read)

ST_1: p_int_7_y_read_2 (182)  [1/1] 0.00ns
:37  %p_int_7_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_y_read)

ST_1: p_int_6_y_read_2 (183)  [1/1] 0.00ns
:38  %p_int_6_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_y_read)

ST_1: p_int_5_y_read_2 (184)  [1/1] 0.00ns
:39  %p_int_5_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_y_read)

ST_1: p_int_4_y_read_2 (185)  [1/1] 0.00ns
:40  %p_int_4_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_y_read)

ST_1: p_int_3_y_read_2 (186)  [1/1] 0.00ns
:41  %p_int_3_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_y_read)

ST_1: p_int_2_y_read_2 (187)  [1/1] 0.00ns
:42  %p_int_2_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_y_read)

ST_1: p_int_1_y_read11 (188)  [1/1] 0.00ns
:43  %p_int_1_y_read11 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_y_read)

ST_1: p_int_0_y_read_2 (189)  [1/1] 0.00ns
:44  %p_int_0_y_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_y_read)

ST_1: p_int_8_x_read_2 (190)  [1/1] 0.00ns
:45  %p_int_8_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_8_x_read)

ST_1: p_int_7_x_read_2 (191)  [1/1] 0.00ns
:46  %p_int_7_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_7_x_read)

ST_1: p_int_6_x_read_2 (192)  [1/1] 0.00ns
:47  %p_int_6_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_6_x_read)

ST_1: p_int_5_x_read_2 (193)  [1/1] 0.00ns
:48  %p_int_5_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_5_x_read)

ST_1: p_int_4_x_read_2 (194)  [1/1] 0.00ns
:49  %p_int_4_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_4_x_read)

ST_1: p_int_3_x_read_2 (195)  [1/1] 0.00ns
:50  %p_int_3_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_3_x_read)

ST_1: p_int_2_x_read_2 (196)  [1/1] 0.00ns
:51  %p_int_2_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_2_x_read)

ST_1: p_int_1_x_read_2 (197)  [1/1] 0.00ns
:52  %p_int_1_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_1_x_read)

ST_1: p_int_0_x_read_2 (198)  [1/1] 0.00ns
:53  %p_int_0_x_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_int_0_x_read)

ST_1: drift_ret (199)  [2/2] 1.21ns  loc: astro.c:129
:54  %drift_ret = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @drift(i64 %p_int_0_x_read_2, i64 %p_int_1_x_read_2, i64 %p_int_2_x_read_2, i64 %p_int_3_x_read_2, i64 %p_int_4_x_read_2, i64 %p_int_5_x_read_2, i64 %p_int_6_x_read_2, i64 %p_int_7_x_read_2, i64 %p_int_8_x_read_2, i64 %p_int_0_y_read_2, i64 %p_int_1_y_read11, i64 %p_int_2_y_read_2, i64 %p_int_3_y_read_2, i64 %p_int_4_y_read_2, i64 %p_int_5_y_read_2, i64 %p_int_6_y_read_2, i64 %p_int_7_y_read_2, i64 %p_int_8_y_read_2, i64 %p_int_0_z_read_2, i64 %p_int_1_z_read_2, i64 %p_int_2_z_read21, i64 %p_int_3_z_read_2, i64 %p_int_4_z_read_2, i64 %p_int_5_z_read_2, i64 %p_int_6_z_read_2, i64 %p_int_7_z_read_2, i64 %p_int_8_z_read_2, i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)


 <State 2>: 0.60ns
ST_2: drift_ret (199)  [1/2] 0.00ns  loc: astro.c:129
:54  %drift_ret = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @drift(i64 %p_int_0_x_read_2, i64 %p_int_1_x_read_2, i64 %p_int_2_x_read_2, i64 %p_int_3_x_read_2, i64 %p_int_4_x_read_2, i64 %p_int_5_x_read_2, i64 %p_int_6_x_read_2, i64 %p_int_7_x_read_2, i64 %p_int_8_x_read_2, i64 %p_int_0_y_read_2, i64 %p_int_1_y_read11, i64 %p_int_2_y_read_2, i64 %p_int_3_y_read_2, i64 %p_int_4_y_read_2, i64 %p_int_5_y_read_2, i64 %p_int_6_y_read_2, i64 %p_int_7_y_read_2, i64 %p_int_8_y_read_2, i64 %p_int_0_z_read_2, i64 %p_int_1_z_read_2, i64 %p_int_2_z_read21, i64 %p_int_3_z_read_2, i64 %p_int_4_z_read_2, i64 %p_int_5_z_read_2, i64 %p_int_6_z_read_2, i64 %p_int_7_z_read_2, i64 %p_int_8_z_read_2, i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)

ST_2: p_int_x_assign_3 (200)  [1/1] 0.00ns  loc: astro.c:129
:55  %p_int_x_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 0

ST_2: p_int_x12_assign_3 (201)  [1/1] 0.00ns  loc: astro.c:129
:56  %p_int_x12_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 1

ST_2: p_int_x2_assign_3 (202)  [1/1] 0.00ns  loc: astro.c:129
:57  %p_int_x2_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 2

ST_2: p_int_x3_assign_3 (203)  [1/1] 0.00ns  loc: astro.c:129
:58  %p_int_x3_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 3

ST_2: p_int_x4_assign_3 (204)  [1/1] 0.00ns  loc: astro.c:129
:59  %p_int_x4_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 4

ST_2: p_int_x5_assign_3 (205)  [1/1] 0.00ns  loc: astro.c:129
:60  %p_int_x5_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 5

ST_2: p_int_x6_assign_3 (206)  [1/1] 0.00ns  loc: astro.c:129
:61  %p_int_x6_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 6

ST_2: p_int_x7_assign_3 (207)  [1/1] 0.00ns  loc: astro.c:129
:62  %p_int_x7_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 7

ST_2: p_int_x8_assign_3 (208)  [1/1] 0.00ns  loc: astro.c:129
:63  %p_int_x8_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 8

ST_2: p_int_y_assign_3 (209)  [1/1] 0.00ns  loc: astro.c:129
:64  %p_int_y_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 9

ST_2: p_int_y9_assign_3 (210)  [1/1] 0.00ns  loc: astro.c:129
:65  %p_int_y9_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 10

ST_2: p_int_y10_assign_3 (211)  [1/1] 0.00ns  loc: astro.c:129
:66  %p_int_y10_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 11

ST_2: p_int_y1114_assign_3 (212)  [1/1] 0.00ns  loc: astro.c:129
:67  %p_int_y1114_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 12

ST_2: p_int_y12_assign_3 (213)  [1/1] 0.00ns  loc: astro.c:129
:68  %p_int_y12_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 13

ST_2: p_int_y13_assign_3 (214)  [1/1] 0.00ns  loc: astro.c:129
:69  %p_int_y13_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 14

ST_2: p_int_y14_assign_3 (215)  [1/1] 0.00ns  loc: astro.c:129
:70  %p_int_y14_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 15

ST_2: p_int_y15_assign_3 (216)  [1/1] 0.00ns  loc: astro.c:129
:71  %p_int_y15_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 16

ST_2: p_int_y16_assign_3 (217)  [1/1] 0.00ns  loc: astro.c:129
:72  %p_int_y16_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 17

ST_2: p_int_z_assign_3 (218)  [1/1] 0.00ns  loc: astro.c:129
:73  %p_int_z_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 18

ST_2: p_int_z17_assign_3 (219)  [1/1] 0.00ns  loc: astro.c:129
:74  %p_int_z17_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 19

ST_2: p_int_z18_assign_3 (220)  [1/1] 0.00ns  loc: astro.c:129
:75  %p_int_z18_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 20

ST_2: p_int_z19_assign_3 (221)  [1/1] 0.00ns  loc: astro.c:129
:76  %p_int_z19_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 21

ST_2: p_int_z20_assign_3 (222)  [1/1] 0.00ns  loc: astro.c:129
:77  %p_int_z20_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 22

ST_2: p_int_z2126_assign_3 (223)  [1/1] 0.00ns  loc: astro.c:129
:78  %p_int_z2126_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 23

ST_2: p_int_z22_assign_3 (224)  [1/1] 0.00ns  loc: astro.c:129
:79  %p_int_z22_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 24

ST_2: p_int_z23_assign_3 (225)  [1/1] 0.00ns  loc: astro.c:129
:80  %p_int_z23_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 25

ST_2: p_int_z24_assign_3 (226)  [1/1] 0.00ns  loc: astro.c:129
:81  %p_int_z24_assign_3 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret, 26

ST_2: StgValue_93 (227)  [2/2] 0.60ns  loc: astro.c:131
:82  call fastcc void @to_double(i64 %p_int_x_assign_3, i64 %p_int_x12_assign_3, i64 %p_int_x2_assign_3, i64 %p_int_x3_assign_3, i64 %p_int_x4_assign_3, i64 %p_int_x5_assign_3, i64 %p_int_x6_assign_3, i64 %p_int_x7_assign_3, i64 %p_int_x8_assign_3, i64 %p_int_y_assign_3, i64 %p_int_y9_assign_3, i64 %p_int_y10_assign_3, i64 %p_int_y1114_assign_3, i64 %p_int_y12_assign_3, i64 %p_int_y13_assign_3, i64 %p_int_y14_assign_3, i64 %p_int_y15_assign_3, i64 %p_int_y16_assign_3, i64 %p_int_z_assign_3, i64 %p_int_z17_assign_3, i64 %p_int_z18_assign_3, i64 %p_int_z19_assign_3, i64 %p_int_z20_assign_3, i64 %p_int_z2126_assign_3, i64 %p_int_z22_assign_3, i64 %p_int_z23_assign_3, i64 %p_int_z24_assign_3, i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)


 <State 3>: 0.00ns
ST_3: StgValue_94 (227)  [1/2] 0.00ns  loc: astro.c:131
:82  call fastcc void @to_double(i64 %p_int_x_assign_3, i64 %p_int_x12_assign_3, i64 %p_int_x2_assign_3, i64 %p_int_x3_assign_3, i64 %p_int_x4_assign_3, i64 %p_int_x5_assign_3, i64 %p_int_x6_assign_3, i64 %p_int_x7_assign_3, i64 %p_int_x8_assign_3, i64 %p_int_y_assign_3, i64 %p_int_y9_assign_3, i64 %p_int_y10_assign_3, i64 %p_int_y1114_assign_3, i64 %p_int_y12_assign_3, i64 %p_int_y13_assign_3, i64 %p_int_y14_assign_3, i64 %p_int_y15_assign_3, i64 %p_int_y16_assign_3, i64 %p_int_z_assign_3, i64 %p_int_z17_assign_3, i64 %p_int_z18_assign_3, i64 %p_int_z19_assign_3, i64 %p_int_z20_assign_3, i64 %p_int_z2126_assign_3, i64 %p_int_z22_assign_3, i64 %p_int_z23_assign_3, i64 %p_int_z24_assign_3, i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)


 <State 4>: 0.00ns
ST_4: StgValue_95 (228)  [2/2] 0.00ns  loc: astro.c:132
:83  call fastcc void @gravity()


 <State 5>: 0.00ns
ST_5: StgValue_96 (228)  [1/2] 0.00ns  loc: astro.c:132
:83  call fastcc void @gravity()


 <State 6>: 0.60ns
ST_6: kick_ret (229)  [2/2] 0.60ns  loc: astro.c:133
:84  %kick_ret = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @kick(i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)


 <State 7>: 1.21ns
ST_7: kick_ret (229)  [1/2] 0.00ns  loc: astro.c:133
:84  %kick_ret = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @kick(i64 %p_int_0_vx_read_3, i64 %p_int_1_vx_read_3, i64 %p_int_2_vx_read_3, i64 %p_int_3_vx_read31, i64 %p_int_4_vx_read32, i64 %p_int_5_vx_read_3, i64 %p_int_6_vx_read_3, i64 %p_int_7_vx_read_3, i64 %p_int_8_vx_read_3, i64 %p_int_0_vy_read_3, i64 %p_int_1_vy_read_2, i64 %p_int_2_vy_read_3, i64 %p_int_3_vy_read_3, i64 %p_int_4_vy_read41, i64 %p_int_5_vy_read42, i64 %p_int_6_vy_read_3, i64 %p_int_7_vy_read_3, i64 %p_int_8_vy_read_3, i64 %p_int_0_vz_read_3, i64 %p_int_1_vz_read_3, i64 %p_int_2_vz_read_2, i64 %p_int_3_vz_read_3, i64 %p_int_4_vz_read_3, i64 %p_int_5_vz_read51, i64 %p_int_6_vz_read52, i64 %p_int_7_vz_read_3, i64 %p_int_8_vz_read_3)

ST_7: p_int_vx_assign_4 (230)  [1/1] 0.00ns  loc: astro.c:133
:85  %p_int_vx_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 0

ST_7: p_int_vx25_assign_4 (231)  [1/1] 0.00ns  loc: astro.c:133
:86  %p_int_vx25_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 1

ST_7: p_int_vx26_assign_4 (232)  [1/1] 0.00ns  loc: astro.c:133
:87  %p_int_vx26_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 2

ST_7: p_int_vx27_assign_4 (233)  [1/1] 0.00ns  loc: astro.c:133
:88  %p_int_vx27_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 3

ST_7: p_int_vx28_assign_4 (234)  [1/1] 0.00ns  loc: astro.c:133
:89  %p_int_vx28_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 4

ST_7: p_int_vx29_assign_4 (235)  [1/1] 0.00ns  loc: astro.c:133
:90  %p_int_vx29_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 5

ST_7: p_int_vx30_assign_4 (236)  [1/1] 0.00ns  loc: astro.c:133
:91  %p_int_vx30_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 6

ST_7: p_int_vx3138_assign_4 (237)  [1/1] 0.00ns  loc: astro.c:133
:92  %p_int_vx3138_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 7

ST_7: p_int_vx32_assign_4 (238)  [1/1] 0.00ns  loc: astro.c:133
:93  %p_int_vx32_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 8

ST_7: p_int_vy_assign_4 (239)  [1/1] 0.00ns  loc: astro.c:133
:94  %p_int_vy_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 9

ST_7: p_int_vy33_assign_4 (240)  [1/1] 0.00ns  loc: astro.c:133
:95  %p_int_vy33_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 10

ST_7: p_int_vy34_assign_4 (241)  [1/1] 0.00ns  loc: astro.c:133
:96  %p_int_vy34_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 11

ST_7: p_int_vy35_assign_4 (242)  [1/1] 0.00ns  loc: astro.c:133
:97  %p_int_vy35_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 12

ST_7: p_int_vy36_assign_4 (243)  [1/1] 0.00ns  loc: astro.c:133
:98  %p_int_vy36_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 13

ST_7: p_int_vy37_assign_4 (244)  [1/1] 0.00ns  loc: astro.c:133
:99  %p_int_vy37_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 14

ST_7: p_int_vy38_assign_4 (245)  [1/1] 0.00ns  loc: astro.c:133
:100  %p_int_vy38_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 15

ST_7: p_int_vy39_assign_4 (246)  [1/1] 0.00ns  loc: astro.c:133
:101  %p_int_vy39_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 16

ST_7: p_int_vy40_assign_4 (247)  [1/1] 0.00ns  loc: astro.c:133
:102  %p_int_vy40_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 17

ST_7: p_int_vz_assign_4 (248)  [1/1] 0.00ns  loc: astro.c:133
:103  %p_int_vz_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 18

ST_7: p_int_vz41_assign_4 (249)  [1/1] 0.00ns  loc: astro.c:133
:104  %p_int_vz41_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 19

ST_7: p_int_vz42_assign_4 (250)  [1/1] 0.00ns  loc: astro.c:133
:105  %p_int_vz42_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 20

ST_7: p_int_vz43_assign_4 (251)  [1/1] 0.00ns  loc: astro.c:133
:106  %p_int_vz43_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 21

ST_7: p_int_vz44_assign_4 (252)  [1/1] 0.00ns  loc: astro.c:133
:107  %p_int_vz44_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 22

ST_7: p_int_vz45_assign_4 (253)  [1/1] 0.00ns  loc: astro.c:133
:108  %p_int_vz45_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 23

ST_7: p_int_vz46_assign_4 (254)  [1/1] 0.00ns  loc: astro.c:133
:109  %p_int_vz46_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 24

ST_7: p_int_vz47_assign_4 (255)  [1/1] 0.00ns  loc: astro.c:133
:110  %p_int_vz47_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 25

ST_7: p_int_vz48_assign_4 (256)  [1/1] 0.00ns  loc: astro.c:133
:111  %p_int_vz48_assign_4 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %kick_ret, 26

ST_7: drift_ret1 (257)  [2/2] 1.21ns  loc: astro.c:135
:112  %drift_ret1 = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @drift(i64 %p_int_x_assign_3, i64 %p_int_x12_assign_3, i64 %p_int_x2_assign_3, i64 %p_int_x3_assign_3, i64 %p_int_x4_assign_3, i64 %p_int_x5_assign_3, i64 %p_int_x6_assign_3, i64 %p_int_x7_assign_3, i64 %p_int_x8_assign_3, i64 %p_int_y_assign_3, i64 %p_int_y9_assign_3, i64 %p_int_y10_assign_3, i64 %p_int_y1114_assign_3, i64 %p_int_y12_assign_3, i64 %p_int_y13_assign_3, i64 %p_int_y14_assign_3, i64 %p_int_y15_assign_3, i64 %p_int_y16_assign_3, i64 %p_int_z_assign_3, i64 %p_int_z17_assign_3, i64 %p_int_z18_assign_3, i64 %p_int_z19_assign_3, i64 %p_int_z20_assign_3, i64 %p_int_z2126_assign_3, i64 %p_int_z22_assign_3, i64 %p_int_z23_assign_3, i64 %p_int_z24_assign_3, i64 %p_int_vx_assign_4, i64 %p_int_vx25_assign_4, i64 %p_int_vx26_assign_4, i64 %p_int_vx27_assign_4, i64 %p_int_vx28_assign_4, i64 %p_int_vx29_assign_4, i64 %p_int_vx30_assign_4, i64 %p_int_vx3138_assign_4, i64 %p_int_vx32_assign_4, i64 %p_int_vy_assign_4, i64 %p_int_vy33_assign_4, i64 %p_int_vy34_assign_4, i64 %p_int_vy35_assign_4, i64 %p_int_vy36_assign_4, i64 %p_int_vy37_assign_4, i64 %p_int_vy38_assign_4, i64 %p_int_vy39_assign_4, i64 %p_int_vy40_assign_4, i64 %p_int_vz_assign_4, i64 %p_int_vz41_assign_4, i64 %p_int_vz42_assign_4, i64 %p_int_vz43_assign_4, i64 %p_int_vz44_assign_4, i64 %p_int_vz45_assign_4, i64 %p_int_vz46_assign_4, i64 %p_int_vz47_assign_4, i64 %p_int_vz48_assign_4)


 <State 8>: 0.60ns
ST_8: drift_ret1 (257)  [1/2] 0.00ns  loc: astro.c:135
:112  %drift_ret1 = call fastcc { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } @drift(i64 %p_int_x_assign_3, i64 %p_int_x12_assign_3, i64 %p_int_x2_assign_3, i64 %p_int_x3_assign_3, i64 %p_int_x4_assign_3, i64 %p_int_x5_assign_3, i64 %p_int_x6_assign_3, i64 %p_int_x7_assign_3, i64 %p_int_x8_assign_3, i64 %p_int_y_assign_3, i64 %p_int_y9_assign_3, i64 %p_int_y10_assign_3, i64 %p_int_y1114_assign_3, i64 %p_int_y12_assign_3, i64 %p_int_y13_assign_3, i64 %p_int_y14_assign_3, i64 %p_int_y15_assign_3, i64 %p_int_y16_assign_3, i64 %p_int_z_assign_3, i64 %p_int_z17_assign_3, i64 %p_int_z18_assign_3, i64 %p_int_z19_assign_3, i64 %p_int_z20_assign_3, i64 %p_int_z2126_assign_3, i64 %p_int_z22_assign_3, i64 %p_int_z23_assign_3, i64 %p_int_z24_assign_3, i64 %p_int_vx_assign_4, i64 %p_int_vx25_assign_4, i64 %p_int_vx26_assign_4, i64 %p_int_vx27_assign_4, i64 %p_int_vx28_assign_4, i64 %p_int_vx29_assign_4, i64 %p_int_vx30_assign_4, i64 %p_int_vx3138_assign_4, i64 %p_int_vx32_assign_4, i64 %p_int_vy_assign_4, i64 %p_int_vy33_assign_4, i64 %p_int_vy34_assign_4, i64 %p_int_vy35_assign_4, i64 %p_int_vy36_assign_4, i64 %p_int_vy37_assign_4, i64 %p_int_vy38_assign_4, i64 %p_int_vy39_assign_4, i64 %p_int_vy40_assign_4, i64 %p_int_vz_assign_4, i64 %p_int_vz41_assign_4, i64 %p_int_vz42_assign_4, i64 %p_int_vz43_assign_4, i64 %p_int_vz44_assign_4, i64 %p_int_vz45_assign_4, i64 %p_int_vz46_assign_4, i64 %p_int_vz47_assign_4, i64 %p_int_vz48_assign_4)

ST_8: p_int_x_assign_2 (258)  [1/1] 0.00ns  loc: astro.c:135
:113  %p_int_x_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 0

ST_8: p_int_x12_assign_2 (259)  [1/1] 0.00ns  loc: astro.c:135
:114  %p_int_x12_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 1

ST_8: p_int_x2_assign_2 (260)  [1/1] 0.00ns  loc: astro.c:135
:115  %p_int_x2_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 2

ST_8: p_int_x3_assign_2 (261)  [1/1] 0.00ns  loc: astro.c:135
:116  %p_int_x3_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 3

ST_8: p_int_x4_assign_2 (262)  [1/1] 0.00ns  loc: astro.c:135
:117  %p_int_x4_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 4

ST_8: p_int_x5_assign_2 (263)  [1/1] 0.00ns  loc: astro.c:135
:118  %p_int_x5_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 5

ST_8: p_int_x6_assign_2 (264)  [1/1] 0.00ns  loc: astro.c:135
:119  %p_int_x6_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 6

ST_8: p_int_x7_assign_2 (265)  [1/1] 0.00ns  loc: astro.c:135
:120  %p_int_x7_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 7

ST_8: p_int_x8_assign_2 (266)  [1/1] 0.00ns  loc: astro.c:135
:121  %p_int_x8_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 8

ST_8: p_int_y_assign_2 (267)  [1/1] 0.00ns  loc: astro.c:135
:122  %p_int_y_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 9

ST_8: p_int_y9_assign_2 (268)  [1/1] 0.00ns  loc: astro.c:135
:123  %p_int_y9_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 10

ST_8: p_int_y10_assign_2 (269)  [1/1] 0.00ns  loc: astro.c:135
:124  %p_int_y10_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 11

ST_8: p_int_y1114_assign_2 (270)  [1/1] 0.00ns  loc: astro.c:135
:125  %p_int_y1114_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 12

ST_8: p_int_y12_assign_2 (271)  [1/1] 0.00ns  loc: astro.c:135
:126  %p_int_y12_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 13

ST_8: p_int_y13_assign_2 (272)  [1/1] 0.00ns  loc: astro.c:135
:127  %p_int_y13_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 14

ST_8: p_int_y14_assign_2 (273)  [1/1] 0.00ns  loc: astro.c:135
:128  %p_int_y14_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 15

ST_8: p_int_y15_assign_2 (274)  [1/1] 0.00ns  loc: astro.c:135
:129  %p_int_y15_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 16

ST_8: p_int_y16_assign_2 (275)  [1/1] 0.00ns  loc: astro.c:135
:130  %p_int_y16_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 17

ST_8: p_int_z_assign_2 (276)  [1/1] 0.00ns  loc: astro.c:135
:131  %p_int_z_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 18

ST_8: p_int_z17_assign_2 (277)  [1/1] 0.00ns  loc: astro.c:135
:132  %p_int_z17_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 19

ST_8: p_int_z18_assign_2 (278)  [1/1] 0.00ns  loc: astro.c:135
:133  %p_int_z18_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 20

ST_8: p_int_z19_assign_2 (279)  [1/1] 0.00ns  loc: astro.c:135
:134  %p_int_z19_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 21

ST_8: p_int_z20_assign_2 (280)  [1/1] 0.00ns  loc: astro.c:135
:135  %p_int_z20_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 22

ST_8: p_int_z2126_assign_2 (281)  [1/1] 0.00ns  loc: astro.c:135
:136  %p_int_z2126_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 23

ST_8: p_int_z22_assign_2 (282)  [1/1] 0.00ns  loc: astro.c:135
:137  %p_int_z22_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 24

ST_8: p_int_z23_assign_2 (283)  [1/1] 0.00ns  loc: astro.c:135
:138  %p_int_z23_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 25

ST_8: p_int_z24_assign_2 (284)  [1/1] 0.00ns  loc: astro.c:135
:139  %p_int_z24_assign_2 = extractvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %drift_ret1, 26

ST_8: StgValue_155 (285)  [2/2] 0.60ns  loc: astro.c:138
:140  call fastcc void @to_double(i64 %p_int_x_assign_2, i64 %p_int_x12_assign_2, i64 %p_int_x2_assign_2, i64 %p_int_x3_assign_2, i64 %p_int_x4_assign_2, i64 %p_int_x5_assign_2, i64 %p_int_x6_assign_2, i64 %p_int_x7_assign_2, i64 %p_int_x8_assign_2, i64 %p_int_y_assign_2, i64 %p_int_y9_assign_2, i64 %p_int_y10_assign_2, i64 %p_int_y1114_assign_2, i64 %p_int_y12_assign_2, i64 %p_int_y13_assign_2, i64 %p_int_y14_assign_2, i64 %p_int_y15_assign_2, i64 %p_int_y16_assign_2, i64 %p_int_z_assign_2, i64 %p_int_z17_assign_2, i64 %p_int_z18_assign_2, i64 %p_int_z19_assign_2, i64 %p_int_z20_assign_2, i64 %p_int_z2126_assign_2, i64 %p_int_z22_assign_2, i64 %p_int_z23_assign_2, i64 %p_int_z24_assign_2, i64 %p_int_vx_assign_4, i64 %p_int_vx25_assign_4, i64 %p_int_vx26_assign_4, i64 %p_int_vx27_assign_4, i64 %p_int_vx28_assign_4, i64 %p_int_vx29_assign_4, i64 %p_int_vx30_assign_4, i64 %p_int_vx3138_assign_4, i64 %p_int_vx32_assign_4, i64 %p_int_vy_assign_4, i64 %p_int_vy33_assign_4, i64 %p_int_vy34_assign_4, i64 %p_int_vy35_assign_4, i64 %p_int_vy36_assign_4, i64 %p_int_vy37_assign_4, i64 %p_int_vy38_assign_4, i64 %p_int_vy39_assign_4, i64 %p_int_vy40_assign_4, i64 %p_int_vz_assign_4, i64 %p_int_vz41_assign_4, i64 %p_int_vz42_assign_4, i64 %p_int_vz43_assign_4, i64 %p_int_vz44_assign_4, i64 %p_int_vz45_assign_4, i64 %p_int_vz46_assign_4, i64 %p_int_vz47_assign_4, i64 %p_int_vz48_assign_4)


 <State 9>: 0.00ns
ST_9: StgValue_156 (285)  [1/2] 0.00ns  loc: astro.c:138
:140  call fastcc void @to_double(i64 %p_int_x_assign_2, i64 %p_int_x12_assign_2, i64 %p_int_x2_assign_2, i64 %p_int_x3_assign_2, i64 %p_int_x4_assign_2, i64 %p_int_x5_assign_2, i64 %p_int_x6_assign_2, i64 %p_int_x7_assign_2, i64 %p_int_x8_assign_2, i64 %p_int_y_assign_2, i64 %p_int_y9_assign_2, i64 %p_int_y10_assign_2, i64 %p_int_y1114_assign_2, i64 %p_int_y12_assign_2, i64 %p_int_y13_assign_2, i64 %p_int_y14_assign_2, i64 %p_int_y15_assign_2, i64 %p_int_y16_assign_2, i64 %p_int_z_assign_2, i64 %p_int_z17_assign_2, i64 %p_int_z18_assign_2, i64 %p_int_z19_assign_2, i64 %p_int_z20_assign_2, i64 %p_int_z2126_assign_2, i64 %p_int_z22_assign_2, i64 %p_int_z23_assign_2, i64 %p_int_z24_assign_2, i64 %p_int_vx_assign_4, i64 %p_int_vx25_assign_4, i64 %p_int_vx26_assign_4, i64 %p_int_vx27_assign_4, i64 %p_int_vx28_assign_4, i64 %p_int_vx29_assign_4, i64 %p_int_vx30_assign_4, i64 %p_int_vx3138_assign_4, i64 %p_int_vx32_assign_4, i64 %p_int_vy_assign_4, i64 %p_int_vy33_assign_4, i64 %p_int_vy34_assign_4, i64 %p_int_vy35_assign_4, i64 %p_int_vy36_assign_4, i64 %p_int_vy37_assign_4, i64 %p_int_vy38_assign_4, i64 %p_int_vy39_assign_4, i64 %p_int_vy40_assign_4, i64 %p_int_vz_assign_4, i64 %p_int_vz41_assign_4, i64 %p_int_vz42_assign_4, i64 %p_int_vz43_assign_4, i64 %p_int_vz44_assign_4, i64 %p_int_vz45_assign_4, i64 %p_int_vz46_assign_4, i64 %p_int_vz47_assign_4, i64 %p_int_vz48_assign_4)

ST_9: mrv (286)  [1/1] 0.00ns  loc: astro.c:139
:141  %mrv = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } undef, i64 %p_int_x_assign_2, 0

ST_9: mrv_1 (287)  [1/1] 0.00ns  loc: astro.c:139
:142  %mrv_1 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv, i64 %p_int_x12_assign_2, 1

ST_9: mrv_2 (288)  [1/1] 0.00ns  loc: astro.c:139
:143  %mrv_2 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_1, i64 %p_int_x2_assign_2, 2

ST_9: mrv_3 (289)  [1/1] 0.00ns  loc: astro.c:139
:144  %mrv_3 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_2, i64 %p_int_x3_assign_2, 3

ST_9: mrv_4 (290)  [1/1] 0.00ns  loc: astro.c:139
:145  %mrv_4 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_3, i64 %p_int_x4_assign_2, 4

ST_9: mrv_5 (291)  [1/1] 0.00ns  loc: astro.c:139
:146  %mrv_5 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_4, i64 %p_int_x5_assign_2, 5

ST_9: mrv_6 (292)  [1/1] 0.00ns  loc: astro.c:139
:147  %mrv_6 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_5, i64 %p_int_x6_assign_2, 6

ST_9: mrv_7 (293)  [1/1] 0.00ns  loc: astro.c:139
:148  %mrv_7 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_6, i64 %p_int_x7_assign_2, 7

ST_9: mrv_8 (294)  [1/1] 0.00ns  loc: astro.c:139
:149  %mrv_8 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_7, i64 %p_int_x8_assign_2, 8

ST_9: mrv_9 (295)  [1/1] 0.00ns  loc: astro.c:139
:150  %mrv_9 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_8, i64 %p_int_y_assign_2, 9

ST_9: mrv_10 (296)  [1/1] 0.00ns  loc: astro.c:139
:151  %mrv_10 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_9, i64 %p_int_y9_assign_2, 10

ST_9: mrv_11 (297)  [1/1] 0.00ns  loc: astro.c:139
:152  %mrv_11 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_10, i64 %p_int_y10_assign_2, 11

ST_9: mrv_12 (298)  [1/1] 0.00ns  loc: astro.c:139
:153  %mrv_12 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_11, i64 %p_int_y1114_assign_2, 12

ST_9: mrv_13 (299)  [1/1] 0.00ns  loc: astro.c:139
:154  %mrv_13 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_12, i64 %p_int_y12_assign_2, 13

ST_9: mrv_14 (300)  [1/1] 0.00ns  loc: astro.c:139
:155  %mrv_14 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_13, i64 %p_int_y13_assign_2, 14

ST_9: mrv_15 (301)  [1/1] 0.00ns  loc: astro.c:139
:156  %mrv_15 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_14, i64 %p_int_y14_assign_2, 15

ST_9: mrv_16 (302)  [1/1] 0.00ns  loc: astro.c:139
:157  %mrv_16 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_15, i64 %p_int_y15_assign_2, 16

ST_9: mrv_17 (303)  [1/1] 0.00ns  loc: astro.c:139
:158  %mrv_17 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_16, i64 %p_int_y16_assign_2, 17

ST_9: mrv_18 (304)  [1/1] 0.00ns  loc: astro.c:139
:159  %mrv_18 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_17, i64 %p_int_z_assign_2, 18

ST_9: mrv_19 (305)  [1/1] 0.00ns  loc: astro.c:139
:160  %mrv_19 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_18, i64 %p_int_z17_assign_2, 19

ST_9: mrv_20 (306)  [1/1] 0.00ns  loc: astro.c:139
:161  %mrv_20 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_19, i64 %p_int_z18_assign_2, 20

ST_9: mrv_21 (307)  [1/1] 0.00ns  loc: astro.c:139
:162  %mrv_21 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_20, i64 %p_int_z19_assign_2, 21

ST_9: mrv_22 (308)  [1/1] 0.00ns  loc: astro.c:139
:163  %mrv_22 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_21, i64 %p_int_z20_assign_2, 22

ST_9: mrv_23 (309)  [1/1] 0.00ns  loc: astro.c:139
:164  %mrv_23 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_22, i64 %p_int_z2126_assign_2, 23

ST_9: mrv_24 (310)  [1/1] 0.00ns  loc: astro.c:139
:165  %mrv_24 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_23, i64 %p_int_z22_assign_2, 24

ST_9: mrv_25 (311)  [1/1] 0.00ns  loc: astro.c:139
:166  %mrv_25 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_24, i64 %p_int_z23_assign_2, 25

ST_9: mrv_26 (312)  [1/1] 0.00ns  loc: astro.c:139
:167  %mrv_26 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_25, i64 %p_int_z24_assign_2, 26

ST_9: mrv_27 (313)  [1/1] 0.00ns  loc: astro.c:139
:168  %mrv_27 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_26, i64 %p_int_vx_assign_4, 27

ST_9: mrv_28 (314)  [1/1] 0.00ns  loc: astro.c:139
:169  %mrv_28 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_27, i64 %p_int_vx25_assign_4, 28

ST_9: mrv_29 (315)  [1/1] 0.00ns  loc: astro.c:139
:170  %mrv_29 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_28, i64 %p_int_vx26_assign_4, 29

ST_9: mrv_30 (316)  [1/1] 0.00ns  loc: astro.c:139
:171  %mrv_30 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_29, i64 %p_int_vx27_assign_4, 30

ST_9: mrv_31 (317)  [1/1] 0.00ns  loc: astro.c:139
:172  %mrv_31 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_30, i64 %p_int_vx28_assign_4, 31

ST_9: mrv_32 (318)  [1/1] 0.00ns  loc: astro.c:139
:173  %mrv_32 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_31, i64 %p_int_vx29_assign_4, 32

ST_9: mrv_33 (319)  [1/1] 0.00ns  loc: astro.c:139
:174  %mrv_33 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_32, i64 %p_int_vx30_assign_4, 33

ST_9: mrv_34 (320)  [1/1] 0.00ns  loc: astro.c:139
:175  %mrv_34 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_33, i64 %p_int_vx3138_assign_4, 34

ST_9: mrv_35 (321)  [1/1] 0.00ns  loc: astro.c:139
:176  %mrv_35 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_34, i64 %p_int_vx32_assign_4, 35

ST_9: mrv_36 (322)  [1/1] 0.00ns  loc: astro.c:139
:177  %mrv_36 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_35, i64 %p_int_vy_assign_4, 36

ST_9: mrv_37 (323)  [1/1] 0.00ns  loc: astro.c:139
:178  %mrv_37 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_36, i64 %p_int_vy33_assign_4, 37

ST_9: mrv_38 (324)  [1/1] 0.00ns  loc: astro.c:139
:179  %mrv_38 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_37, i64 %p_int_vy34_assign_4, 38

ST_9: mrv_39 (325)  [1/1] 0.00ns  loc: astro.c:139
:180  %mrv_39 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_38, i64 %p_int_vy35_assign_4, 39

ST_9: mrv_40 (326)  [1/1] 0.00ns  loc: astro.c:139
:181  %mrv_40 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_39, i64 %p_int_vy36_assign_4, 40

ST_9: mrv_41 (327)  [1/1] 0.00ns  loc: astro.c:139
:182  %mrv_41 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_40, i64 %p_int_vy37_assign_4, 41

ST_9: mrv_42 (328)  [1/1] 0.00ns  loc: astro.c:139
:183  %mrv_42 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_41, i64 %p_int_vy38_assign_4, 42

ST_9: mrv_43 (329)  [1/1] 0.00ns  loc: astro.c:139
:184  %mrv_43 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_42, i64 %p_int_vy39_assign_4, 43

ST_9: mrv_44 (330)  [1/1] 0.00ns  loc: astro.c:139
:185  %mrv_44 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_43, i64 %p_int_vy40_assign_4, 44

ST_9: mrv_45 (331)  [1/1] 0.00ns  loc: astro.c:139
:186  %mrv_45 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_44, i64 %p_int_vz_assign_4, 45

ST_9: mrv_46 (332)  [1/1] 0.00ns  loc: astro.c:139
:187  %mrv_46 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_45, i64 %p_int_vz41_assign_4, 46

ST_9: mrv_47 (333)  [1/1] 0.00ns  loc: astro.c:139
:188  %mrv_47 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_46, i64 %p_int_vz42_assign_4, 47

ST_9: mrv_48 (334)  [1/1] 0.00ns  loc: astro.c:139
:189  %mrv_48 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_47, i64 %p_int_vz43_assign_4, 48

ST_9: mrv_49 (335)  [1/1] 0.00ns  loc: astro.c:139
:190  %mrv_49 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_48, i64 %p_int_vz44_assign_4, 49

ST_9: mrv_50 (336)  [1/1] 0.00ns  loc: astro.c:139
:191  %mrv_50 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_49, i64 %p_int_vz45_assign_4, 50

ST_9: mrv_51 (337)  [1/1] 0.00ns  loc: astro.c:139
:192  %mrv_51 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_50, i64 %p_int_vz46_assign_4, 51

ST_9: mrv_52 (338)  [1/1] 0.00ns  loc: astro.c:139
:193  %mrv_52 = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_51, i64 %p_int_vz47_assign_4, 52

ST_9: mrv_s (339)  [1/1] 0.00ns  loc: astro.c:139
:194  %mrv_s = insertvalue { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_52, i64 %p_int_vz48_assign_4, 53

ST_9: StgValue_211 (340)  [1/1] 0.00ns  loc: astro.c:139
:195  ret { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 } %mrv_s



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.21ns
The critical path consists of the following:
	wire read on port 'p_int_8_vz_read' [145]  (0 ns)
	'call' operation ('drift_ret', astro.c:129) to 'drift' [199]  (1.21 ns)

 <State 2>: 0.605ns
The critical path consists of the following:
	'call' operation ('drift_ret', astro.c:129) to 'drift' [199]  (0 ns)
	'call' operation (astro.c:131) to 'to_double' [227]  (0.605 ns)

 <State 3>: 0ns
The critical path consists of the following:

 <State 4>: 0ns
The critical path consists of the following:

 <State 5>: 0ns
The critical path consists of the following:

 <State 6>: 0.605ns
The critical path consists of the following:
	'call' operation ('kick_ret', astro.c:133) to 'kick' [229]  (0.605 ns)

 <State 7>: 1.21ns
The critical path consists of the following:
	'call' operation ('kick_ret', astro.c:133) to 'kick' [229]  (0 ns)
	'call' operation ('drift_ret1', astro.c:135) to 'drift' [257]  (1.21 ns)

 <State 8>: 0.605ns
The critical path consists of the following:
	'call' operation ('drift_ret1', astro.c:135) to 'drift' [257]  (0 ns)
	'call' operation (astro.c:138) to 'to_double' [285]  (0.605 ns)

 <State 9>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
