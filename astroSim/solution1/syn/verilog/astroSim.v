// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="astroSim,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffve1924-3-e-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.500660,HLS_SYN_LAT=1369116,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=1102,HLS_SYN_FF=269058,HLS_SYN_LUT=320624}" *)

module astroSim (
        ap_clk,
        ap_rst_n,
        m_axi_result_x_AWVALID,
        m_axi_result_x_AWREADY,
        m_axi_result_x_AWADDR,
        m_axi_result_x_AWID,
        m_axi_result_x_AWLEN,
        m_axi_result_x_AWSIZE,
        m_axi_result_x_AWBURST,
        m_axi_result_x_AWLOCK,
        m_axi_result_x_AWCACHE,
        m_axi_result_x_AWPROT,
        m_axi_result_x_AWQOS,
        m_axi_result_x_AWREGION,
        m_axi_result_x_AWUSER,
        m_axi_result_x_WVALID,
        m_axi_result_x_WREADY,
        m_axi_result_x_WDATA,
        m_axi_result_x_WSTRB,
        m_axi_result_x_WLAST,
        m_axi_result_x_WID,
        m_axi_result_x_WUSER,
        m_axi_result_x_ARVALID,
        m_axi_result_x_ARREADY,
        m_axi_result_x_ARADDR,
        m_axi_result_x_ARID,
        m_axi_result_x_ARLEN,
        m_axi_result_x_ARSIZE,
        m_axi_result_x_ARBURST,
        m_axi_result_x_ARLOCK,
        m_axi_result_x_ARCACHE,
        m_axi_result_x_ARPROT,
        m_axi_result_x_ARQOS,
        m_axi_result_x_ARREGION,
        m_axi_result_x_ARUSER,
        m_axi_result_x_RVALID,
        m_axi_result_x_RREADY,
        m_axi_result_x_RDATA,
        m_axi_result_x_RLAST,
        m_axi_result_x_RID,
        m_axi_result_x_RUSER,
        m_axi_result_x_RRESP,
        m_axi_result_x_BVALID,
        m_axi_result_x_BREADY,
        m_axi_result_x_BRESP,
        m_axi_result_x_BID,
        m_axi_result_x_BUSER,
        m_axi_result_y_AWVALID,
        m_axi_result_y_AWREADY,
        m_axi_result_y_AWADDR,
        m_axi_result_y_AWID,
        m_axi_result_y_AWLEN,
        m_axi_result_y_AWSIZE,
        m_axi_result_y_AWBURST,
        m_axi_result_y_AWLOCK,
        m_axi_result_y_AWCACHE,
        m_axi_result_y_AWPROT,
        m_axi_result_y_AWQOS,
        m_axi_result_y_AWREGION,
        m_axi_result_y_AWUSER,
        m_axi_result_y_WVALID,
        m_axi_result_y_WREADY,
        m_axi_result_y_WDATA,
        m_axi_result_y_WSTRB,
        m_axi_result_y_WLAST,
        m_axi_result_y_WID,
        m_axi_result_y_WUSER,
        m_axi_result_y_ARVALID,
        m_axi_result_y_ARREADY,
        m_axi_result_y_ARADDR,
        m_axi_result_y_ARID,
        m_axi_result_y_ARLEN,
        m_axi_result_y_ARSIZE,
        m_axi_result_y_ARBURST,
        m_axi_result_y_ARLOCK,
        m_axi_result_y_ARCACHE,
        m_axi_result_y_ARPROT,
        m_axi_result_y_ARQOS,
        m_axi_result_y_ARREGION,
        m_axi_result_y_ARUSER,
        m_axi_result_y_RVALID,
        m_axi_result_y_RREADY,
        m_axi_result_y_RDATA,
        m_axi_result_y_RLAST,
        m_axi_result_y_RID,
        m_axi_result_y_RUSER,
        m_axi_result_y_RRESP,
        m_axi_result_y_BVALID,
        m_axi_result_y_BREADY,
        m_axi_result_y_BRESP,
        m_axi_result_y_BID,
        m_axi_result_y_BUSER,
        m_axi_result_z_AWVALID,
        m_axi_result_z_AWREADY,
        m_axi_result_z_AWADDR,
        m_axi_result_z_AWID,
        m_axi_result_z_AWLEN,
        m_axi_result_z_AWSIZE,
        m_axi_result_z_AWBURST,
        m_axi_result_z_AWLOCK,
        m_axi_result_z_AWCACHE,
        m_axi_result_z_AWPROT,
        m_axi_result_z_AWQOS,
        m_axi_result_z_AWREGION,
        m_axi_result_z_AWUSER,
        m_axi_result_z_WVALID,
        m_axi_result_z_WREADY,
        m_axi_result_z_WDATA,
        m_axi_result_z_WSTRB,
        m_axi_result_z_WLAST,
        m_axi_result_z_WID,
        m_axi_result_z_WUSER,
        m_axi_result_z_ARVALID,
        m_axi_result_z_ARREADY,
        m_axi_result_z_ARADDR,
        m_axi_result_z_ARID,
        m_axi_result_z_ARLEN,
        m_axi_result_z_ARSIZE,
        m_axi_result_z_ARBURST,
        m_axi_result_z_ARLOCK,
        m_axi_result_z_ARCACHE,
        m_axi_result_z_ARPROT,
        m_axi_result_z_ARQOS,
        m_axi_result_z_ARREGION,
        m_axi_result_z_ARUSER,
        m_axi_result_z_RVALID,
        m_axi_result_z_RREADY,
        m_axi_result_z_RDATA,
        m_axi_result_z_RLAST,
        m_axi_result_z_RID,
        m_axi_result_z_RUSER,
        m_axi_result_z_RRESP,
        m_axi_result_z_BVALID,
        m_axi_result_z_BREADY,
        m_axi_result_z_BRESP,
        m_axi_result_z_BID,
        m_axi_result_z_BUSER,
        m_axi_result_vx_AWVALID,
        m_axi_result_vx_AWREADY,
        m_axi_result_vx_AWADDR,
        m_axi_result_vx_AWID,
        m_axi_result_vx_AWLEN,
        m_axi_result_vx_AWSIZE,
        m_axi_result_vx_AWBURST,
        m_axi_result_vx_AWLOCK,
        m_axi_result_vx_AWCACHE,
        m_axi_result_vx_AWPROT,
        m_axi_result_vx_AWQOS,
        m_axi_result_vx_AWREGION,
        m_axi_result_vx_AWUSER,
        m_axi_result_vx_WVALID,
        m_axi_result_vx_WREADY,
        m_axi_result_vx_WDATA,
        m_axi_result_vx_WSTRB,
        m_axi_result_vx_WLAST,
        m_axi_result_vx_WID,
        m_axi_result_vx_WUSER,
        m_axi_result_vx_ARVALID,
        m_axi_result_vx_ARREADY,
        m_axi_result_vx_ARADDR,
        m_axi_result_vx_ARID,
        m_axi_result_vx_ARLEN,
        m_axi_result_vx_ARSIZE,
        m_axi_result_vx_ARBURST,
        m_axi_result_vx_ARLOCK,
        m_axi_result_vx_ARCACHE,
        m_axi_result_vx_ARPROT,
        m_axi_result_vx_ARQOS,
        m_axi_result_vx_ARREGION,
        m_axi_result_vx_ARUSER,
        m_axi_result_vx_RVALID,
        m_axi_result_vx_RREADY,
        m_axi_result_vx_RDATA,
        m_axi_result_vx_RLAST,
        m_axi_result_vx_RID,
        m_axi_result_vx_RUSER,
        m_axi_result_vx_RRESP,
        m_axi_result_vx_BVALID,
        m_axi_result_vx_BREADY,
        m_axi_result_vx_BRESP,
        m_axi_result_vx_BID,
        m_axi_result_vx_BUSER,
        m_axi_result_vy_AWVALID,
        m_axi_result_vy_AWREADY,
        m_axi_result_vy_AWADDR,
        m_axi_result_vy_AWID,
        m_axi_result_vy_AWLEN,
        m_axi_result_vy_AWSIZE,
        m_axi_result_vy_AWBURST,
        m_axi_result_vy_AWLOCK,
        m_axi_result_vy_AWCACHE,
        m_axi_result_vy_AWPROT,
        m_axi_result_vy_AWQOS,
        m_axi_result_vy_AWREGION,
        m_axi_result_vy_AWUSER,
        m_axi_result_vy_WVALID,
        m_axi_result_vy_WREADY,
        m_axi_result_vy_WDATA,
        m_axi_result_vy_WSTRB,
        m_axi_result_vy_WLAST,
        m_axi_result_vy_WID,
        m_axi_result_vy_WUSER,
        m_axi_result_vy_ARVALID,
        m_axi_result_vy_ARREADY,
        m_axi_result_vy_ARADDR,
        m_axi_result_vy_ARID,
        m_axi_result_vy_ARLEN,
        m_axi_result_vy_ARSIZE,
        m_axi_result_vy_ARBURST,
        m_axi_result_vy_ARLOCK,
        m_axi_result_vy_ARCACHE,
        m_axi_result_vy_ARPROT,
        m_axi_result_vy_ARQOS,
        m_axi_result_vy_ARREGION,
        m_axi_result_vy_ARUSER,
        m_axi_result_vy_RVALID,
        m_axi_result_vy_RREADY,
        m_axi_result_vy_RDATA,
        m_axi_result_vy_RLAST,
        m_axi_result_vy_RID,
        m_axi_result_vy_RUSER,
        m_axi_result_vy_RRESP,
        m_axi_result_vy_BVALID,
        m_axi_result_vy_BREADY,
        m_axi_result_vy_BRESP,
        m_axi_result_vy_BID,
        m_axi_result_vy_BUSER,
        m_axi_result_vz_AWVALID,
        m_axi_result_vz_AWREADY,
        m_axi_result_vz_AWADDR,
        m_axi_result_vz_AWID,
        m_axi_result_vz_AWLEN,
        m_axi_result_vz_AWSIZE,
        m_axi_result_vz_AWBURST,
        m_axi_result_vz_AWLOCK,
        m_axi_result_vz_AWCACHE,
        m_axi_result_vz_AWPROT,
        m_axi_result_vz_AWQOS,
        m_axi_result_vz_AWREGION,
        m_axi_result_vz_AWUSER,
        m_axi_result_vz_WVALID,
        m_axi_result_vz_WREADY,
        m_axi_result_vz_WDATA,
        m_axi_result_vz_WSTRB,
        m_axi_result_vz_WLAST,
        m_axi_result_vz_WID,
        m_axi_result_vz_WUSER,
        m_axi_result_vz_ARVALID,
        m_axi_result_vz_ARREADY,
        m_axi_result_vz_ARADDR,
        m_axi_result_vz_ARID,
        m_axi_result_vz_ARLEN,
        m_axi_result_vz_ARSIZE,
        m_axi_result_vz_ARBURST,
        m_axi_result_vz_ARLOCK,
        m_axi_result_vz_ARCACHE,
        m_axi_result_vz_ARPROT,
        m_axi_result_vz_ARQOS,
        m_axi_result_vz_ARREGION,
        m_axi_result_vz_ARUSER,
        m_axi_result_vz_RVALID,
        m_axi_result_vz_RREADY,
        m_axi_result_vz_RDATA,
        m_axi_result_vz_RLAST,
        m_axi_result_vz_RID,
        m_axi_result_vz_RUSER,
        m_axi_result_vz_RRESP,
        m_axi_result_vz_BVALID,
        m_axi_result_vz_BREADY,
        m_axi_result_vz_BRESP,
        m_axi_result_vz_BID,
        m_axi_result_vz_BUSER,
        m_axi_result_ax_AWVALID,
        m_axi_result_ax_AWREADY,
        m_axi_result_ax_AWADDR,
        m_axi_result_ax_AWID,
        m_axi_result_ax_AWLEN,
        m_axi_result_ax_AWSIZE,
        m_axi_result_ax_AWBURST,
        m_axi_result_ax_AWLOCK,
        m_axi_result_ax_AWCACHE,
        m_axi_result_ax_AWPROT,
        m_axi_result_ax_AWQOS,
        m_axi_result_ax_AWREGION,
        m_axi_result_ax_AWUSER,
        m_axi_result_ax_WVALID,
        m_axi_result_ax_WREADY,
        m_axi_result_ax_WDATA,
        m_axi_result_ax_WSTRB,
        m_axi_result_ax_WLAST,
        m_axi_result_ax_WID,
        m_axi_result_ax_WUSER,
        m_axi_result_ax_ARVALID,
        m_axi_result_ax_ARREADY,
        m_axi_result_ax_ARADDR,
        m_axi_result_ax_ARID,
        m_axi_result_ax_ARLEN,
        m_axi_result_ax_ARSIZE,
        m_axi_result_ax_ARBURST,
        m_axi_result_ax_ARLOCK,
        m_axi_result_ax_ARCACHE,
        m_axi_result_ax_ARPROT,
        m_axi_result_ax_ARQOS,
        m_axi_result_ax_ARREGION,
        m_axi_result_ax_ARUSER,
        m_axi_result_ax_RVALID,
        m_axi_result_ax_RREADY,
        m_axi_result_ax_RDATA,
        m_axi_result_ax_RLAST,
        m_axi_result_ax_RID,
        m_axi_result_ax_RUSER,
        m_axi_result_ax_RRESP,
        m_axi_result_ax_BVALID,
        m_axi_result_ax_BREADY,
        m_axi_result_ax_BRESP,
        m_axi_result_ax_BID,
        m_axi_result_ax_BUSER,
        m_axi_result_ay_AWVALID,
        m_axi_result_ay_AWREADY,
        m_axi_result_ay_AWADDR,
        m_axi_result_ay_AWID,
        m_axi_result_ay_AWLEN,
        m_axi_result_ay_AWSIZE,
        m_axi_result_ay_AWBURST,
        m_axi_result_ay_AWLOCK,
        m_axi_result_ay_AWCACHE,
        m_axi_result_ay_AWPROT,
        m_axi_result_ay_AWQOS,
        m_axi_result_ay_AWREGION,
        m_axi_result_ay_AWUSER,
        m_axi_result_ay_WVALID,
        m_axi_result_ay_WREADY,
        m_axi_result_ay_WDATA,
        m_axi_result_ay_WSTRB,
        m_axi_result_ay_WLAST,
        m_axi_result_ay_WID,
        m_axi_result_ay_WUSER,
        m_axi_result_ay_ARVALID,
        m_axi_result_ay_ARREADY,
        m_axi_result_ay_ARADDR,
        m_axi_result_ay_ARID,
        m_axi_result_ay_ARLEN,
        m_axi_result_ay_ARSIZE,
        m_axi_result_ay_ARBURST,
        m_axi_result_ay_ARLOCK,
        m_axi_result_ay_ARCACHE,
        m_axi_result_ay_ARPROT,
        m_axi_result_ay_ARQOS,
        m_axi_result_ay_ARREGION,
        m_axi_result_ay_ARUSER,
        m_axi_result_ay_RVALID,
        m_axi_result_ay_RREADY,
        m_axi_result_ay_RDATA,
        m_axi_result_ay_RLAST,
        m_axi_result_ay_RID,
        m_axi_result_ay_RUSER,
        m_axi_result_ay_RRESP,
        m_axi_result_ay_BVALID,
        m_axi_result_ay_BREADY,
        m_axi_result_ay_BRESP,
        m_axi_result_ay_BID,
        m_axi_result_ay_BUSER,
        m_axi_result_az_AWVALID,
        m_axi_result_az_AWREADY,
        m_axi_result_az_AWADDR,
        m_axi_result_az_AWID,
        m_axi_result_az_AWLEN,
        m_axi_result_az_AWSIZE,
        m_axi_result_az_AWBURST,
        m_axi_result_az_AWLOCK,
        m_axi_result_az_AWCACHE,
        m_axi_result_az_AWPROT,
        m_axi_result_az_AWQOS,
        m_axi_result_az_AWREGION,
        m_axi_result_az_AWUSER,
        m_axi_result_az_WVALID,
        m_axi_result_az_WREADY,
        m_axi_result_az_WDATA,
        m_axi_result_az_WSTRB,
        m_axi_result_az_WLAST,
        m_axi_result_az_WID,
        m_axi_result_az_WUSER,
        m_axi_result_az_ARVALID,
        m_axi_result_az_ARREADY,
        m_axi_result_az_ARADDR,
        m_axi_result_az_ARID,
        m_axi_result_az_ARLEN,
        m_axi_result_az_ARSIZE,
        m_axi_result_az_ARBURST,
        m_axi_result_az_ARLOCK,
        m_axi_result_az_ARCACHE,
        m_axi_result_az_ARPROT,
        m_axi_result_az_ARQOS,
        m_axi_result_az_ARREGION,
        m_axi_result_az_ARUSER,
        m_axi_result_az_RVALID,
        m_axi_result_az_RREADY,
        m_axi_result_az_RDATA,
        m_axi_result_az_RLAST,
        m_axi_result_az_RID,
        m_axi_result_az_RUSER,
        m_axi_result_az_RRESP,
        m_axi_result_az_BVALID,
        m_axi_result_az_BREADY,
        m_axi_result_az_BRESP,
        m_axi_result_az_BID,
        m_axi_result_az_BUSER,
        m_axi_result_m_AWVALID,
        m_axi_result_m_AWREADY,
        m_axi_result_m_AWADDR,
        m_axi_result_m_AWID,
        m_axi_result_m_AWLEN,
        m_axi_result_m_AWSIZE,
        m_axi_result_m_AWBURST,
        m_axi_result_m_AWLOCK,
        m_axi_result_m_AWCACHE,
        m_axi_result_m_AWPROT,
        m_axi_result_m_AWQOS,
        m_axi_result_m_AWREGION,
        m_axi_result_m_AWUSER,
        m_axi_result_m_WVALID,
        m_axi_result_m_WREADY,
        m_axi_result_m_WDATA,
        m_axi_result_m_WSTRB,
        m_axi_result_m_WLAST,
        m_axi_result_m_WID,
        m_axi_result_m_WUSER,
        m_axi_result_m_ARVALID,
        m_axi_result_m_ARREADY,
        m_axi_result_m_ARADDR,
        m_axi_result_m_ARID,
        m_axi_result_m_ARLEN,
        m_axi_result_m_ARSIZE,
        m_axi_result_m_ARBURST,
        m_axi_result_m_ARLOCK,
        m_axi_result_m_ARCACHE,
        m_axi_result_m_ARPROT,
        m_axi_result_m_ARQOS,
        m_axi_result_m_ARREGION,
        m_axi_result_m_ARUSER,
        m_axi_result_m_RVALID,
        m_axi_result_m_RREADY,
        m_axi_result_m_RDATA,
        m_axi_result_m_RLAST,
        m_axi_result_m_RID,
        m_axi_result_m_RUSER,
        m_axi_result_m_RRESP,
        m_axi_result_m_BVALID,
        m_axi_result_m_BREADY,
        m_axi_result_m_BRESP,
        m_axi_result_m_BID,
        m_axi_result_m_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_pp0_stage0 = 28'd4194304;
parameter    ap_ST_fsm_state25 = 28'd8388608;
parameter    ap_ST_fsm_state26 = 28'd16777216;
parameter    ap_ST_fsm_state27 = 28'd33554432;
parameter    ap_ST_fsm_state28 = 28'd67108864;
parameter    ap_ST_fsm_state29 = 28'd134217728;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RESULT_X_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_X_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_X_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_X_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_X_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_X_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_X_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RESULT_Y_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_Y_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_Y_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Y_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_Y_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_Y_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_Y_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_Z_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_Z_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_Z_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_Z_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_Z_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_Z_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_Z_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_VX_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_VX_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_VX_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VX_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_VX_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_VX_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_VX_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_VY_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_VY_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_VY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VY_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_VY_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_VY_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_VY_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_VZ_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_VZ_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_VZ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_VZ_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_VZ_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_VZ_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_VZ_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_AX_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_AX_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_AX_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AX_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_AX_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_AX_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_AX_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_AY_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_AY_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_AY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AY_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_AY_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_AY_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_AY_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_AZ_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_AZ_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_AZ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_AZ_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_AZ_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_AZ_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_AZ_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_M_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_ADDR_WIDTH = 32;
parameter    C_M_AXI_RESULT_M_DATA_WIDTH = 64;
parameter    C_M_AXI_RESULT_M_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_M_TARGET_ADDR = 0;
parameter    C_M_AXI_RESULT_M_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_M_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_M_CACHE_VALUE = 3;

parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RESULT_M_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_AZ_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_AY_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_AX_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_VZ_WSTRB_WIDTH = (64 / 8);
parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RESULT_VY_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_VX_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_Z_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_Y_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_RESULT_X_WSTRB_WIDTH = (64 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_result_x_AWVALID;
input   m_axi_result_x_AWREADY;
output  [C_M_AXI_RESULT_X_ADDR_WIDTH - 1:0] m_axi_result_x_AWADDR;
output  [C_M_AXI_RESULT_X_ID_WIDTH - 1:0] m_axi_result_x_AWID;
output  [7:0] m_axi_result_x_AWLEN;
output  [2:0] m_axi_result_x_AWSIZE;
output  [1:0] m_axi_result_x_AWBURST;
output  [1:0] m_axi_result_x_AWLOCK;
output  [3:0] m_axi_result_x_AWCACHE;
output  [2:0] m_axi_result_x_AWPROT;
output  [3:0] m_axi_result_x_AWQOS;
output  [3:0] m_axi_result_x_AWREGION;
output  [C_M_AXI_RESULT_X_AWUSER_WIDTH - 1:0] m_axi_result_x_AWUSER;
output   m_axi_result_x_WVALID;
input   m_axi_result_x_WREADY;
output  [C_M_AXI_RESULT_X_DATA_WIDTH - 1:0] m_axi_result_x_WDATA;
output  [C_M_AXI_RESULT_X_WSTRB_WIDTH - 1:0] m_axi_result_x_WSTRB;
output   m_axi_result_x_WLAST;
output  [C_M_AXI_RESULT_X_ID_WIDTH - 1:0] m_axi_result_x_WID;
output  [C_M_AXI_RESULT_X_WUSER_WIDTH - 1:0] m_axi_result_x_WUSER;
output   m_axi_result_x_ARVALID;
input   m_axi_result_x_ARREADY;
output  [C_M_AXI_RESULT_X_ADDR_WIDTH - 1:0] m_axi_result_x_ARADDR;
output  [C_M_AXI_RESULT_X_ID_WIDTH - 1:0] m_axi_result_x_ARID;
output  [7:0] m_axi_result_x_ARLEN;
output  [2:0] m_axi_result_x_ARSIZE;
output  [1:0] m_axi_result_x_ARBURST;
output  [1:0] m_axi_result_x_ARLOCK;
output  [3:0] m_axi_result_x_ARCACHE;
output  [2:0] m_axi_result_x_ARPROT;
output  [3:0] m_axi_result_x_ARQOS;
output  [3:0] m_axi_result_x_ARREGION;
output  [C_M_AXI_RESULT_X_ARUSER_WIDTH - 1:0] m_axi_result_x_ARUSER;
input   m_axi_result_x_RVALID;
output   m_axi_result_x_RREADY;
input  [C_M_AXI_RESULT_X_DATA_WIDTH - 1:0] m_axi_result_x_RDATA;
input   m_axi_result_x_RLAST;
input  [C_M_AXI_RESULT_X_ID_WIDTH - 1:0] m_axi_result_x_RID;
input  [C_M_AXI_RESULT_X_RUSER_WIDTH - 1:0] m_axi_result_x_RUSER;
input  [1:0] m_axi_result_x_RRESP;
input   m_axi_result_x_BVALID;
output   m_axi_result_x_BREADY;
input  [1:0] m_axi_result_x_BRESP;
input  [C_M_AXI_RESULT_X_ID_WIDTH - 1:0] m_axi_result_x_BID;
input  [C_M_AXI_RESULT_X_BUSER_WIDTH - 1:0] m_axi_result_x_BUSER;
output   m_axi_result_y_AWVALID;
input   m_axi_result_y_AWREADY;
output  [C_M_AXI_RESULT_Y_ADDR_WIDTH - 1:0] m_axi_result_y_AWADDR;
output  [C_M_AXI_RESULT_Y_ID_WIDTH - 1:0] m_axi_result_y_AWID;
output  [7:0] m_axi_result_y_AWLEN;
output  [2:0] m_axi_result_y_AWSIZE;
output  [1:0] m_axi_result_y_AWBURST;
output  [1:0] m_axi_result_y_AWLOCK;
output  [3:0] m_axi_result_y_AWCACHE;
output  [2:0] m_axi_result_y_AWPROT;
output  [3:0] m_axi_result_y_AWQOS;
output  [3:0] m_axi_result_y_AWREGION;
output  [C_M_AXI_RESULT_Y_AWUSER_WIDTH - 1:0] m_axi_result_y_AWUSER;
output   m_axi_result_y_WVALID;
input   m_axi_result_y_WREADY;
output  [C_M_AXI_RESULT_Y_DATA_WIDTH - 1:0] m_axi_result_y_WDATA;
output  [C_M_AXI_RESULT_Y_WSTRB_WIDTH - 1:0] m_axi_result_y_WSTRB;
output   m_axi_result_y_WLAST;
output  [C_M_AXI_RESULT_Y_ID_WIDTH - 1:0] m_axi_result_y_WID;
output  [C_M_AXI_RESULT_Y_WUSER_WIDTH - 1:0] m_axi_result_y_WUSER;
output   m_axi_result_y_ARVALID;
input   m_axi_result_y_ARREADY;
output  [C_M_AXI_RESULT_Y_ADDR_WIDTH - 1:0] m_axi_result_y_ARADDR;
output  [C_M_AXI_RESULT_Y_ID_WIDTH - 1:0] m_axi_result_y_ARID;
output  [7:0] m_axi_result_y_ARLEN;
output  [2:0] m_axi_result_y_ARSIZE;
output  [1:0] m_axi_result_y_ARBURST;
output  [1:0] m_axi_result_y_ARLOCK;
output  [3:0] m_axi_result_y_ARCACHE;
output  [2:0] m_axi_result_y_ARPROT;
output  [3:0] m_axi_result_y_ARQOS;
output  [3:0] m_axi_result_y_ARREGION;
output  [C_M_AXI_RESULT_Y_ARUSER_WIDTH - 1:0] m_axi_result_y_ARUSER;
input   m_axi_result_y_RVALID;
output   m_axi_result_y_RREADY;
input  [C_M_AXI_RESULT_Y_DATA_WIDTH - 1:0] m_axi_result_y_RDATA;
input   m_axi_result_y_RLAST;
input  [C_M_AXI_RESULT_Y_ID_WIDTH - 1:0] m_axi_result_y_RID;
input  [C_M_AXI_RESULT_Y_RUSER_WIDTH - 1:0] m_axi_result_y_RUSER;
input  [1:0] m_axi_result_y_RRESP;
input   m_axi_result_y_BVALID;
output   m_axi_result_y_BREADY;
input  [1:0] m_axi_result_y_BRESP;
input  [C_M_AXI_RESULT_Y_ID_WIDTH - 1:0] m_axi_result_y_BID;
input  [C_M_AXI_RESULT_Y_BUSER_WIDTH - 1:0] m_axi_result_y_BUSER;
output   m_axi_result_z_AWVALID;
input   m_axi_result_z_AWREADY;
output  [C_M_AXI_RESULT_Z_ADDR_WIDTH - 1:0] m_axi_result_z_AWADDR;
output  [C_M_AXI_RESULT_Z_ID_WIDTH - 1:0] m_axi_result_z_AWID;
output  [7:0] m_axi_result_z_AWLEN;
output  [2:0] m_axi_result_z_AWSIZE;
output  [1:0] m_axi_result_z_AWBURST;
output  [1:0] m_axi_result_z_AWLOCK;
output  [3:0] m_axi_result_z_AWCACHE;
output  [2:0] m_axi_result_z_AWPROT;
output  [3:0] m_axi_result_z_AWQOS;
output  [3:0] m_axi_result_z_AWREGION;
output  [C_M_AXI_RESULT_Z_AWUSER_WIDTH - 1:0] m_axi_result_z_AWUSER;
output   m_axi_result_z_WVALID;
input   m_axi_result_z_WREADY;
output  [C_M_AXI_RESULT_Z_DATA_WIDTH - 1:0] m_axi_result_z_WDATA;
output  [C_M_AXI_RESULT_Z_WSTRB_WIDTH - 1:0] m_axi_result_z_WSTRB;
output   m_axi_result_z_WLAST;
output  [C_M_AXI_RESULT_Z_ID_WIDTH - 1:0] m_axi_result_z_WID;
output  [C_M_AXI_RESULT_Z_WUSER_WIDTH - 1:0] m_axi_result_z_WUSER;
output   m_axi_result_z_ARVALID;
input   m_axi_result_z_ARREADY;
output  [C_M_AXI_RESULT_Z_ADDR_WIDTH - 1:0] m_axi_result_z_ARADDR;
output  [C_M_AXI_RESULT_Z_ID_WIDTH - 1:0] m_axi_result_z_ARID;
output  [7:0] m_axi_result_z_ARLEN;
output  [2:0] m_axi_result_z_ARSIZE;
output  [1:0] m_axi_result_z_ARBURST;
output  [1:0] m_axi_result_z_ARLOCK;
output  [3:0] m_axi_result_z_ARCACHE;
output  [2:0] m_axi_result_z_ARPROT;
output  [3:0] m_axi_result_z_ARQOS;
output  [3:0] m_axi_result_z_ARREGION;
output  [C_M_AXI_RESULT_Z_ARUSER_WIDTH - 1:0] m_axi_result_z_ARUSER;
input   m_axi_result_z_RVALID;
output   m_axi_result_z_RREADY;
input  [C_M_AXI_RESULT_Z_DATA_WIDTH - 1:0] m_axi_result_z_RDATA;
input   m_axi_result_z_RLAST;
input  [C_M_AXI_RESULT_Z_ID_WIDTH - 1:0] m_axi_result_z_RID;
input  [C_M_AXI_RESULT_Z_RUSER_WIDTH - 1:0] m_axi_result_z_RUSER;
input  [1:0] m_axi_result_z_RRESP;
input   m_axi_result_z_BVALID;
output   m_axi_result_z_BREADY;
input  [1:0] m_axi_result_z_BRESP;
input  [C_M_AXI_RESULT_Z_ID_WIDTH - 1:0] m_axi_result_z_BID;
input  [C_M_AXI_RESULT_Z_BUSER_WIDTH - 1:0] m_axi_result_z_BUSER;
output   m_axi_result_vx_AWVALID;
input   m_axi_result_vx_AWREADY;
output  [C_M_AXI_RESULT_VX_ADDR_WIDTH - 1:0] m_axi_result_vx_AWADDR;
output  [C_M_AXI_RESULT_VX_ID_WIDTH - 1:0] m_axi_result_vx_AWID;
output  [7:0] m_axi_result_vx_AWLEN;
output  [2:0] m_axi_result_vx_AWSIZE;
output  [1:0] m_axi_result_vx_AWBURST;
output  [1:0] m_axi_result_vx_AWLOCK;
output  [3:0] m_axi_result_vx_AWCACHE;
output  [2:0] m_axi_result_vx_AWPROT;
output  [3:0] m_axi_result_vx_AWQOS;
output  [3:0] m_axi_result_vx_AWREGION;
output  [C_M_AXI_RESULT_VX_AWUSER_WIDTH - 1:0] m_axi_result_vx_AWUSER;
output   m_axi_result_vx_WVALID;
input   m_axi_result_vx_WREADY;
output  [C_M_AXI_RESULT_VX_DATA_WIDTH - 1:0] m_axi_result_vx_WDATA;
output  [C_M_AXI_RESULT_VX_WSTRB_WIDTH - 1:0] m_axi_result_vx_WSTRB;
output   m_axi_result_vx_WLAST;
output  [C_M_AXI_RESULT_VX_ID_WIDTH - 1:0] m_axi_result_vx_WID;
output  [C_M_AXI_RESULT_VX_WUSER_WIDTH - 1:0] m_axi_result_vx_WUSER;
output   m_axi_result_vx_ARVALID;
input   m_axi_result_vx_ARREADY;
output  [C_M_AXI_RESULT_VX_ADDR_WIDTH - 1:0] m_axi_result_vx_ARADDR;
output  [C_M_AXI_RESULT_VX_ID_WIDTH - 1:0] m_axi_result_vx_ARID;
output  [7:0] m_axi_result_vx_ARLEN;
output  [2:0] m_axi_result_vx_ARSIZE;
output  [1:0] m_axi_result_vx_ARBURST;
output  [1:0] m_axi_result_vx_ARLOCK;
output  [3:0] m_axi_result_vx_ARCACHE;
output  [2:0] m_axi_result_vx_ARPROT;
output  [3:0] m_axi_result_vx_ARQOS;
output  [3:0] m_axi_result_vx_ARREGION;
output  [C_M_AXI_RESULT_VX_ARUSER_WIDTH - 1:0] m_axi_result_vx_ARUSER;
input   m_axi_result_vx_RVALID;
output   m_axi_result_vx_RREADY;
input  [C_M_AXI_RESULT_VX_DATA_WIDTH - 1:0] m_axi_result_vx_RDATA;
input   m_axi_result_vx_RLAST;
input  [C_M_AXI_RESULT_VX_ID_WIDTH - 1:0] m_axi_result_vx_RID;
input  [C_M_AXI_RESULT_VX_RUSER_WIDTH - 1:0] m_axi_result_vx_RUSER;
input  [1:0] m_axi_result_vx_RRESP;
input   m_axi_result_vx_BVALID;
output   m_axi_result_vx_BREADY;
input  [1:0] m_axi_result_vx_BRESP;
input  [C_M_AXI_RESULT_VX_ID_WIDTH - 1:0] m_axi_result_vx_BID;
input  [C_M_AXI_RESULT_VX_BUSER_WIDTH - 1:0] m_axi_result_vx_BUSER;
output   m_axi_result_vy_AWVALID;
input   m_axi_result_vy_AWREADY;
output  [C_M_AXI_RESULT_VY_ADDR_WIDTH - 1:0] m_axi_result_vy_AWADDR;
output  [C_M_AXI_RESULT_VY_ID_WIDTH - 1:0] m_axi_result_vy_AWID;
output  [7:0] m_axi_result_vy_AWLEN;
output  [2:0] m_axi_result_vy_AWSIZE;
output  [1:0] m_axi_result_vy_AWBURST;
output  [1:0] m_axi_result_vy_AWLOCK;
output  [3:0] m_axi_result_vy_AWCACHE;
output  [2:0] m_axi_result_vy_AWPROT;
output  [3:0] m_axi_result_vy_AWQOS;
output  [3:0] m_axi_result_vy_AWREGION;
output  [C_M_AXI_RESULT_VY_AWUSER_WIDTH - 1:0] m_axi_result_vy_AWUSER;
output   m_axi_result_vy_WVALID;
input   m_axi_result_vy_WREADY;
output  [C_M_AXI_RESULT_VY_DATA_WIDTH - 1:0] m_axi_result_vy_WDATA;
output  [C_M_AXI_RESULT_VY_WSTRB_WIDTH - 1:0] m_axi_result_vy_WSTRB;
output   m_axi_result_vy_WLAST;
output  [C_M_AXI_RESULT_VY_ID_WIDTH - 1:0] m_axi_result_vy_WID;
output  [C_M_AXI_RESULT_VY_WUSER_WIDTH - 1:0] m_axi_result_vy_WUSER;
output   m_axi_result_vy_ARVALID;
input   m_axi_result_vy_ARREADY;
output  [C_M_AXI_RESULT_VY_ADDR_WIDTH - 1:0] m_axi_result_vy_ARADDR;
output  [C_M_AXI_RESULT_VY_ID_WIDTH - 1:0] m_axi_result_vy_ARID;
output  [7:0] m_axi_result_vy_ARLEN;
output  [2:0] m_axi_result_vy_ARSIZE;
output  [1:0] m_axi_result_vy_ARBURST;
output  [1:0] m_axi_result_vy_ARLOCK;
output  [3:0] m_axi_result_vy_ARCACHE;
output  [2:0] m_axi_result_vy_ARPROT;
output  [3:0] m_axi_result_vy_ARQOS;
output  [3:0] m_axi_result_vy_ARREGION;
output  [C_M_AXI_RESULT_VY_ARUSER_WIDTH - 1:0] m_axi_result_vy_ARUSER;
input   m_axi_result_vy_RVALID;
output   m_axi_result_vy_RREADY;
input  [C_M_AXI_RESULT_VY_DATA_WIDTH - 1:0] m_axi_result_vy_RDATA;
input   m_axi_result_vy_RLAST;
input  [C_M_AXI_RESULT_VY_ID_WIDTH - 1:0] m_axi_result_vy_RID;
input  [C_M_AXI_RESULT_VY_RUSER_WIDTH - 1:0] m_axi_result_vy_RUSER;
input  [1:0] m_axi_result_vy_RRESP;
input   m_axi_result_vy_BVALID;
output   m_axi_result_vy_BREADY;
input  [1:0] m_axi_result_vy_BRESP;
input  [C_M_AXI_RESULT_VY_ID_WIDTH - 1:0] m_axi_result_vy_BID;
input  [C_M_AXI_RESULT_VY_BUSER_WIDTH - 1:0] m_axi_result_vy_BUSER;
output   m_axi_result_vz_AWVALID;
input   m_axi_result_vz_AWREADY;
output  [C_M_AXI_RESULT_VZ_ADDR_WIDTH - 1:0] m_axi_result_vz_AWADDR;
output  [C_M_AXI_RESULT_VZ_ID_WIDTH - 1:0] m_axi_result_vz_AWID;
output  [7:0] m_axi_result_vz_AWLEN;
output  [2:0] m_axi_result_vz_AWSIZE;
output  [1:0] m_axi_result_vz_AWBURST;
output  [1:0] m_axi_result_vz_AWLOCK;
output  [3:0] m_axi_result_vz_AWCACHE;
output  [2:0] m_axi_result_vz_AWPROT;
output  [3:0] m_axi_result_vz_AWQOS;
output  [3:0] m_axi_result_vz_AWREGION;
output  [C_M_AXI_RESULT_VZ_AWUSER_WIDTH - 1:0] m_axi_result_vz_AWUSER;
output   m_axi_result_vz_WVALID;
input   m_axi_result_vz_WREADY;
output  [C_M_AXI_RESULT_VZ_DATA_WIDTH - 1:0] m_axi_result_vz_WDATA;
output  [C_M_AXI_RESULT_VZ_WSTRB_WIDTH - 1:0] m_axi_result_vz_WSTRB;
output   m_axi_result_vz_WLAST;
output  [C_M_AXI_RESULT_VZ_ID_WIDTH - 1:0] m_axi_result_vz_WID;
output  [C_M_AXI_RESULT_VZ_WUSER_WIDTH - 1:0] m_axi_result_vz_WUSER;
output   m_axi_result_vz_ARVALID;
input   m_axi_result_vz_ARREADY;
output  [C_M_AXI_RESULT_VZ_ADDR_WIDTH - 1:0] m_axi_result_vz_ARADDR;
output  [C_M_AXI_RESULT_VZ_ID_WIDTH - 1:0] m_axi_result_vz_ARID;
output  [7:0] m_axi_result_vz_ARLEN;
output  [2:0] m_axi_result_vz_ARSIZE;
output  [1:0] m_axi_result_vz_ARBURST;
output  [1:0] m_axi_result_vz_ARLOCK;
output  [3:0] m_axi_result_vz_ARCACHE;
output  [2:0] m_axi_result_vz_ARPROT;
output  [3:0] m_axi_result_vz_ARQOS;
output  [3:0] m_axi_result_vz_ARREGION;
output  [C_M_AXI_RESULT_VZ_ARUSER_WIDTH - 1:0] m_axi_result_vz_ARUSER;
input   m_axi_result_vz_RVALID;
output   m_axi_result_vz_RREADY;
input  [C_M_AXI_RESULT_VZ_DATA_WIDTH - 1:0] m_axi_result_vz_RDATA;
input   m_axi_result_vz_RLAST;
input  [C_M_AXI_RESULT_VZ_ID_WIDTH - 1:0] m_axi_result_vz_RID;
input  [C_M_AXI_RESULT_VZ_RUSER_WIDTH - 1:0] m_axi_result_vz_RUSER;
input  [1:0] m_axi_result_vz_RRESP;
input   m_axi_result_vz_BVALID;
output   m_axi_result_vz_BREADY;
input  [1:0] m_axi_result_vz_BRESP;
input  [C_M_AXI_RESULT_VZ_ID_WIDTH - 1:0] m_axi_result_vz_BID;
input  [C_M_AXI_RESULT_VZ_BUSER_WIDTH - 1:0] m_axi_result_vz_BUSER;
output   m_axi_result_ax_AWVALID;
input   m_axi_result_ax_AWREADY;
output  [C_M_AXI_RESULT_AX_ADDR_WIDTH - 1:0] m_axi_result_ax_AWADDR;
output  [C_M_AXI_RESULT_AX_ID_WIDTH - 1:0] m_axi_result_ax_AWID;
output  [7:0] m_axi_result_ax_AWLEN;
output  [2:0] m_axi_result_ax_AWSIZE;
output  [1:0] m_axi_result_ax_AWBURST;
output  [1:0] m_axi_result_ax_AWLOCK;
output  [3:0] m_axi_result_ax_AWCACHE;
output  [2:0] m_axi_result_ax_AWPROT;
output  [3:0] m_axi_result_ax_AWQOS;
output  [3:0] m_axi_result_ax_AWREGION;
output  [C_M_AXI_RESULT_AX_AWUSER_WIDTH - 1:0] m_axi_result_ax_AWUSER;
output   m_axi_result_ax_WVALID;
input   m_axi_result_ax_WREADY;
output  [C_M_AXI_RESULT_AX_DATA_WIDTH - 1:0] m_axi_result_ax_WDATA;
output  [C_M_AXI_RESULT_AX_WSTRB_WIDTH - 1:0] m_axi_result_ax_WSTRB;
output   m_axi_result_ax_WLAST;
output  [C_M_AXI_RESULT_AX_ID_WIDTH - 1:0] m_axi_result_ax_WID;
output  [C_M_AXI_RESULT_AX_WUSER_WIDTH - 1:0] m_axi_result_ax_WUSER;
output   m_axi_result_ax_ARVALID;
input   m_axi_result_ax_ARREADY;
output  [C_M_AXI_RESULT_AX_ADDR_WIDTH - 1:0] m_axi_result_ax_ARADDR;
output  [C_M_AXI_RESULT_AX_ID_WIDTH - 1:0] m_axi_result_ax_ARID;
output  [7:0] m_axi_result_ax_ARLEN;
output  [2:0] m_axi_result_ax_ARSIZE;
output  [1:0] m_axi_result_ax_ARBURST;
output  [1:0] m_axi_result_ax_ARLOCK;
output  [3:0] m_axi_result_ax_ARCACHE;
output  [2:0] m_axi_result_ax_ARPROT;
output  [3:0] m_axi_result_ax_ARQOS;
output  [3:0] m_axi_result_ax_ARREGION;
output  [C_M_AXI_RESULT_AX_ARUSER_WIDTH - 1:0] m_axi_result_ax_ARUSER;
input   m_axi_result_ax_RVALID;
output   m_axi_result_ax_RREADY;
input  [C_M_AXI_RESULT_AX_DATA_WIDTH - 1:0] m_axi_result_ax_RDATA;
input   m_axi_result_ax_RLAST;
input  [C_M_AXI_RESULT_AX_ID_WIDTH - 1:0] m_axi_result_ax_RID;
input  [C_M_AXI_RESULT_AX_RUSER_WIDTH - 1:0] m_axi_result_ax_RUSER;
input  [1:0] m_axi_result_ax_RRESP;
input   m_axi_result_ax_BVALID;
output   m_axi_result_ax_BREADY;
input  [1:0] m_axi_result_ax_BRESP;
input  [C_M_AXI_RESULT_AX_ID_WIDTH - 1:0] m_axi_result_ax_BID;
input  [C_M_AXI_RESULT_AX_BUSER_WIDTH - 1:0] m_axi_result_ax_BUSER;
output   m_axi_result_ay_AWVALID;
input   m_axi_result_ay_AWREADY;
output  [C_M_AXI_RESULT_AY_ADDR_WIDTH - 1:0] m_axi_result_ay_AWADDR;
output  [C_M_AXI_RESULT_AY_ID_WIDTH - 1:0] m_axi_result_ay_AWID;
output  [7:0] m_axi_result_ay_AWLEN;
output  [2:0] m_axi_result_ay_AWSIZE;
output  [1:0] m_axi_result_ay_AWBURST;
output  [1:0] m_axi_result_ay_AWLOCK;
output  [3:0] m_axi_result_ay_AWCACHE;
output  [2:0] m_axi_result_ay_AWPROT;
output  [3:0] m_axi_result_ay_AWQOS;
output  [3:0] m_axi_result_ay_AWREGION;
output  [C_M_AXI_RESULT_AY_AWUSER_WIDTH - 1:0] m_axi_result_ay_AWUSER;
output   m_axi_result_ay_WVALID;
input   m_axi_result_ay_WREADY;
output  [C_M_AXI_RESULT_AY_DATA_WIDTH - 1:0] m_axi_result_ay_WDATA;
output  [C_M_AXI_RESULT_AY_WSTRB_WIDTH - 1:0] m_axi_result_ay_WSTRB;
output   m_axi_result_ay_WLAST;
output  [C_M_AXI_RESULT_AY_ID_WIDTH - 1:0] m_axi_result_ay_WID;
output  [C_M_AXI_RESULT_AY_WUSER_WIDTH - 1:0] m_axi_result_ay_WUSER;
output   m_axi_result_ay_ARVALID;
input   m_axi_result_ay_ARREADY;
output  [C_M_AXI_RESULT_AY_ADDR_WIDTH - 1:0] m_axi_result_ay_ARADDR;
output  [C_M_AXI_RESULT_AY_ID_WIDTH - 1:0] m_axi_result_ay_ARID;
output  [7:0] m_axi_result_ay_ARLEN;
output  [2:0] m_axi_result_ay_ARSIZE;
output  [1:0] m_axi_result_ay_ARBURST;
output  [1:0] m_axi_result_ay_ARLOCK;
output  [3:0] m_axi_result_ay_ARCACHE;
output  [2:0] m_axi_result_ay_ARPROT;
output  [3:0] m_axi_result_ay_ARQOS;
output  [3:0] m_axi_result_ay_ARREGION;
output  [C_M_AXI_RESULT_AY_ARUSER_WIDTH - 1:0] m_axi_result_ay_ARUSER;
input   m_axi_result_ay_RVALID;
output   m_axi_result_ay_RREADY;
input  [C_M_AXI_RESULT_AY_DATA_WIDTH - 1:0] m_axi_result_ay_RDATA;
input   m_axi_result_ay_RLAST;
input  [C_M_AXI_RESULT_AY_ID_WIDTH - 1:0] m_axi_result_ay_RID;
input  [C_M_AXI_RESULT_AY_RUSER_WIDTH - 1:0] m_axi_result_ay_RUSER;
input  [1:0] m_axi_result_ay_RRESP;
input   m_axi_result_ay_BVALID;
output   m_axi_result_ay_BREADY;
input  [1:0] m_axi_result_ay_BRESP;
input  [C_M_AXI_RESULT_AY_ID_WIDTH - 1:0] m_axi_result_ay_BID;
input  [C_M_AXI_RESULT_AY_BUSER_WIDTH - 1:0] m_axi_result_ay_BUSER;
output   m_axi_result_az_AWVALID;
input   m_axi_result_az_AWREADY;
output  [C_M_AXI_RESULT_AZ_ADDR_WIDTH - 1:0] m_axi_result_az_AWADDR;
output  [C_M_AXI_RESULT_AZ_ID_WIDTH - 1:0] m_axi_result_az_AWID;
output  [7:0] m_axi_result_az_AWLEN;
output  [2:0] m_axi_result_az_AWSIZE;
output  [1:0] m_axi_result_az_AWBURST;
output  [1:0] m_axi_result_az_AWLOCK;
output  [3:0] m_axi_result_az_AWCACHE;
output  [2:0] m_axi_result_az_AWPROT;
output  [3:0] m_axi_result_az_AWQOS;
output  [3:0] m_axi_result_az_AWREGION;
output  [C_M_AXI_RESULT_AZ_AWUSER_WIDTH - 1:0] m_axi_result_az_AWUSER;
output   m_axi_result_az_WVALID;
input   m_axi_result_az_WREADY;
output  [C_M_AXI_RESULT_AZ_DATA_WIDTH - 1:0] m_axi_result_az_WDATA;
output  [C_M_AXI_RESULT_AZ_WSTRB_WIDTH - 1:0] m_axi_result_az_WSTRB;
output   m_axi_result_az_WLAST;
output  [C_M_AXI_RESULT_AZ_ID_WIDTH - 1:0] m_axi_result_az_WID;
output  [C_M_AXI_RESULT_AZ_WUSER_WIDTH - 1:0] m_axi_result_az_WUSER;
output   m_axi_result_az_ARVALID;
input   m_axi_result_az_ARREADY;
output  [C_M_AXI_RESULT_AZ_ADDR_WIDTH - 1:0] m_axi_result_az_ARADDR;
output  [C_M_AXI_RESULT_AZ_ID_WIDTH - 1:0] m_axi_result_az_ARID;
output  [7:0] m_axi_result_az_ARLEN;
output  [2:0] m_axi_result_az_ARSIZE;
output  [1:0] m_axi_result_az_ARBURST;
output  [1:0] m_axi_result_az_ARLOCK;
output  [3:0] m_axi_result_az_ARCACHE;
output  [2:0] m_axi_result_az_ARPROT;
output  [3:0] m_axi_result_az_ARQOS;
output  [3:0] m_axi_result_az_ARREGION;
output  [C_M_AXI_RESULT_AZ_ARUSER_WIDTH - 1:0] m_axi_result_az_ARUSER;
input   m_axi_result_az_RVALID;
output   m_axi_result_az_RREADY;
input  [C_M_AXI_RESULT_AZ_DATA_WIDTH - 1:0] m_axi_result_az_RDATA;
input   m_axi_result_az_RLAST;
input  [C_M_AXI_RESULT_AZ_ID_WIDTH - 1:0] m_axi_result_az_RID;
input  [C_M_AXI_RESULT_AZ_RUSER_WIDTH - 1:0] m_axi_result_az_RUSER;
input  [1:0] m_axi_result_az_RRESP;
input   m_axi_result_az_BVALID;
output   m_axi_result_az_BREADY;
input  [1:0] m_axi_result_az_BRESP;
input  [C_M_AXI_RESULT_AZ_ID_WIDTH - 1:0] m_axi_result_az_BID;
input  [C_M_AXI_RESULT_AZ_BUSER_WIDTH - 1:0] m_axi_result_az_BUSER;
output   m_axi_result_m_AWVALID;
input   m_axi_result_m_AWREADY;
output  [C_M_AXI_RESULT_M_ADDR_WIDTH - 1:0] m_axi_result_m_AWADDR;
output  [C_M_AXI_RESULT_M_ID_WIDTH - 1:0] m_axi_result_m_AWID;
output  [7:0] m_axi_result_m_AWLEN;
output  [2:0] m_axi_result_m_AWSIZE;
output  [1:0] m_axi_result_m_AWBURST;
output  [1:0] m_axi_result_m_AWLOCK;
output  [3:0] m_axi_result_m_AWCACHE;
output  [2:0] m_axi_result_m_AWPROT;
output  [3:0] m_axi_result_m_AWQOS;
output  [3:0] m_axi_result_m_AWREGION;
output  [C_M_AXI_RESULT_M_AWUSER_WIDTH - 1:0] m_axi_result_m_AWUSER;
output   m_axi_result_m_WVALID;
input   m_axi_result_m_WREADY;
output  [C_M_AXI_RESULT_M_DATA_WIDTH - 1:0] m_axi_result_m_WDATA;
output  [C_M_AXI_RESULT_M_WSTRB_WIDTH - 1:0] m_axi_result_m_WSTRB;
output   m_axi_result_m_WLAST;
output  [C_M_AXI_RESULT_M_ID_WIDTH - 1:0] m_axi_result_m_WID;
output  [C_M_AXI_RESULT_M_WUSER_WIDTH - 1:0] m_axi_result_m_WUSER;
output   m_axi_result_m_ARVALID;
input   m_axi_result_m_ARREADY;
output  [C_M_AXI_RESULT_M_ADDR_WIDTH - 1:0] m_axi_result_m_ARADDR;
output  [C_M_AXI_RESULT_M_ID_WIDTH - 1:0] m_axi_result_m_ARID;
output  [7:0] m_axi_result_m_ARLEN;
output  [2:0] m_axi_result_m_ARSIZE;
output  [1:0] m_axi_result_m_ARBURST;
output  [1:0] m_axi_result_m_ARLOCK;
output  [3:0] m_axi_result_m_ARCACHE;
output  [2:0] m_axi_result_m_ARPROT;
output  [3:0] m_axi_result_m_ARQOS;
output  [3:0] m_axi_result_m_ARREGION;
output  [C_M_AXI_RESULT_M_ARUSER_WIDTH - 1:0] m_axi_result_m_ARUSER;
input   m_axi_result_m_RVALID;
output   m_axi_result_m_RREADY;
input  [C_M_AXI_RESULT_M_DATA_WIDTH - 1:0] m_axi_result_m_RDATA;
input   m_axi_result_m_RLAST;
input  [C_M_AXI_RESULT_M_ID_WIDTH - 1:0] m_axi_result_m_RID;
input  [C_M_AXI_RESULT_M_RUSER_WIDTH - 1:0] m_axi_result_m_RUSER;
input  [1:0] m_axi_result_m_RRESP;
input   m_axi_result_m_BVALID;
output   m_axi_result_m_BREADY;
input  [1:0] m_axi_result_m_BRESP;
input  [C_M_AXI_RESULT_M_ID_WIDTH - 1:0] m_axi_result_m_BID;
input  [C_M_AXI_RESULT_M_BUSER_WIDTH - 1:0] m_axi_result_m_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] p_x_6;
reg   [63:0] p_x_0;
reg   [63:0] p_x_3;
reg   [63:0] p_y_6;
reg   [63:0] p_y_0;
reg   [63:0] p_y_3;
reg   [63:0] p_z_6;
reg   [63:0] p_z_0;
reg   [63:0] p_z_3;
reg   [63:0] p_vx_6;
reg   [63:0] p_vx_0;
reg   [63:0] p_vx_3;
reg   [63:0] p_vy_6;
reg   [63:0] p_vy_0;
reg   [63:0] p_vy_3;
reg   [63:0] p_vz_6;
reg   [63:0] p_vz_0;
reg   [63:0] p_vz_3;
reg   [63:0] p_x_7;
reg   [63:0] p_x_1;
reg   [63:0] p_x_4;
reg   [63:0] p_y_7;
reg   [63:0] p_y_1;
reg   [63:0] p_y_4;
reg   [63:0] p_z_7;
reg   [63:0] p_z_1;
reg   [63:0] p_z_4;
reg   [63:0] p_vx_7;
reg   [63:0] p_vx_1;
reg   [63:0] p_vx_4;
reg   [63:0] p_vy_7;
reg   [63:0] p_vy_1;
reg   [63:0] p_vy_4;
reg   [63:0] p_vz_7;
reg   [63:0] p_vz_1;
reg   [63:0] p_vz_4;
reg   [63:0] p_x_8;
reg   [63:0] p_x_2;
reg   [63:0] p_x_5;
reg   [63:0] p_y_8;
reg   [63:0] p_y_2;
reg   [63:0] p_y_5;
reg   [63:0] p_z_8;
reg   [63:0] p_z_2;
reg   [63:0] p_z_5;
reg   [63:0] p_vx_8;
reg   [63:0] p_vx_2;
reg   [63:0] p_vx_5;
reg   [63:0] p_vy_8;
reg   [63:0] p_vy_2;
reg   [63:0] p_vy_5;
reg   [63:0] p_vz_8;
reg   [63:0] p_vz_2;
reg   [63:0] p_vz_5;
reg   [63:0] p_m_1;
reg   [63:0] p_m_2;
reg   [63:0] p_m_3;
reg   [63:0] p_m_4;
reg   [63:0] p_m_5;
reg   [63:0] p_ax_0;
reg   [63:0] p_ay_0;
reg   [63:0] p_az_0;
reg   [63:0] p_m_0;
reg   [63:0] p_ax_1;
reg   [63:0] p_ay_1;
reg   [63:0] p_az_1;
reg   [63:0] p_ax_2;
reg   [63:0] p_ay_2;
reg   [63:0] p_az_2;
reg   [63:0] p_ax_3;
reg   [63:0] p_ay_3;
reg   [63:0] p_az_3;
reg   [63:0] p_ax_4;
reg   [63:0] p_ay_4;
reg   [63:0] p_az_4;
reg   [63:0] p_ax_5;
reg   [63:0] p_ay_5;
reg   [63:0] p_az_5;
reg    result_x_blk_n_AW;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_4_fu_2066_p2;
reg    result_x_blk_n_W;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond1_reg_3309;
reg    result_x_blk_n_B;
wire    ap_CS_fsm_state29;
reg    result_y_blk_n_AW;
reg    result_y_blk_n_W;
reg    result_y_blk_n_B;
reg    result_z_blk_n_AW;
reg    result_z_blk_n_W;
reg    result_z_blk_n_B;
reg    result_vx_blk_n_AW;
reg    result_vx_blk_n_W;
reg    result_vx_blk_n_B;
reg    result_vy_blk_n_AW;
reg    result_vy_blk_n_W;
reg    result_vy_blk_n_B;
reg    result_vz_blk_n_AW;
reg    result_vz_blk_n_W;
reg    result_vz_blk_n_B;
reg    result_ax_blk_n_AW;
reg    result_ax_blk_n_W;
reg    result_ax_blk_n_B;
reg    result_ay_blk_n_AW;
reg    result_ay_blk_n_W;
reg    result_ay_blk_n_B;
reg    result_az_blk_n_AW;
reg    result_az_blk_n_W;
reg    result_az_blk_n_B;
reg    result_m_blk_n_AW;
reg    result_m_blk_n_W;
reg    result_m_blk_n_B;
reg    result_x_AWVALID;
wire    result_x_AWREADY;
reg    result_x_WVALID;
wire    result_x_WREADY;
wire    result_x_ARREADY;
wire    result_x_RVALID;
wire   [63:0] result_x_RDATA;
wire    result_x_RLAST;
wire   [0:0] result_x_RID;
wire   [0:0] result_x_RUSER;
wire   [1:0] result_x_RRESP;
wire    result_x_BVALID;
reg    result_x_BREADY;
wire   [1:0] result_x_BRESP;
wire   [0:0] result_x_BID;
wire   [0:0] result_x_BUSER;
reg    result_y_AWVALID;
wire    result_y_AWREADY;
reg    result_y_WVALID;
wire    result_y_WREADY;
wire    result_y_ARREADY;
wire    result_y_RVALID;
wire   [63:0] result_y_RDATA;
wire    result_y_RLAST;
wire   [0:0] result_y_RID;
wire   [0:0] result_y_RUSER;
wire   [1:0] result_y_RRESP;
wire    result_y_BVALID;
reg    result_y_BREADY;
wire   [1:0] result_y_BRESP;
wire   [0:0] result_y_BID;
wire   [0:0] result_y_BUSER;
reg    result_z_AWVALID;
wire    result_z_AWREADY;
reg    result_z_WVALID;
wire    result_z_WREADY;
wire    result_z_ARREADY;
wire    result_z_RVALID;
wire   [63:0] result_z_RDATA;
wire    result_z_RLAST;
wire   [0:0] result_z_RID;
wire   [0:0] result_z_RUSER;
wire   [1:0] result_z_RRESP;
wire    result_z_BVALID;
reg    result_z_BREADY;
wire   [1:0] result_z_BRESP;
wire   [0:0] result_z_BID;
wire   [0:0] result_z_BUSER;
reg    result_vx_AWVALID;
wire    result_vx_AWREADY;
reg    result_vx_WVALID;
wire    result_vx_WREADY;
wire    result_vx_ARREADY;
wire    result_vx_RVALID;
wire   [63:0] result_vx_RDATA;
wire    result_vx_RLAST;
wire   [0:0] result_vx_RID;
wire   [0:0] result_vx_RUSER;
wire   [1:0] result_vx_RRESP;
wire    result_vx_BVALID;
reg    result_vx_BREADY;
wire   [1:0] result_vx_BRESP;
wire   [0:0] result_vx_BID;
wire   [0:0] result_vx_BUSER;
reg    result_vy_AWVALID;
wire    result_vy_AWREADY;
reg    result_vy_WVALID;
wire    result_vy_WREADY;
wire    result_vy_ARREADY;
wire    result_vy_RVALID;
wire   [63:0] result_vy_RDATA;
wire    result_vy_RLAST;
wire   [0:0] result_vy_RID;
wire   [0:0] result_vy_RUSER;
wire   [1:0] result_vy_RRESP;
wire    result_vy_BVALID;
reg    result_vy_BREADY;
wire   [1:0] result_vy_BRESP;
wire   [0:0] result_vy_BID;
wire   [0:0] result_vy_BUSER;
reg    result_vz_AWVALID;
wire    result_vz_AWREADY;
reg    result_vz_WVALID;
wire    result_vz_WREADY;
wire    result_vz_ARREADY;
wire    result_vz_RVALID;
wire   [63:0] result_vz_RDATA;
wire    result_vz_RLAST;
wire   [0:0] result_vz_RID;
wire   [0:0] result_vz_RUSER;
wire   [1:0] result_vz_RRESP;
wire    result_vz_BVALID;
reg    result_vz_BREADY;
wire   [1:0] result_vz_BRESP;
wire   [0:0] result_vz_BID;
wire   [0:0] result_vz_BUSER;
reg    result_ax_AWVALID;
wire    result_ax_AWREADY;
reg    result_ax_WVALID;
wire    result_ax_WREADY;
wire    result_ax_ARREADY;
wire    result_ax_RVALID;
wire   [63:0] result_ax_RDATA;
wire    result_ax_RLAST;
wire   [0:0] result_ax_RID;
wire   [0:0] result_ax_RUSER;
wire   [1:0] result_ax_RRESP;
wire    result_ax_BVALID;
reg    result_ax_BREADY;
wire   [1:0] result_ax_BRESP;
wire   [0:0] result_ax_BID;
wire   [0:0] result_ax_BUSER;
reg    result_ay_AWVALID;
wire    result_ay_AWREADY;
reg    result_ay_WVALID;
wire    result_ay_WREADY;
wire    result_ay_ARREADY;
wire    result_ay_RVALID;
wire   [63:0] result_ay_RDATA;
wire    result_ay_RLAST;
wire   [0:0] result_ay_RID;
wire   [0:0] result_ay_RUSER;
wire   [1:0] result_ay_RRESP;
wire    result_ay_BVALID;
reg    result_ay_BREADY;
wire   [1:0] result_ay_BRESP;
wire   [0:0] result_ay_BID;
wire   [0:0] result_ay_BUSER;
reg    result_az_AWVALID;
wire    result_az_AWREADY;
reg    result_az_WVALID;
wire    result_az_WREADY;
wire    result_az_ARREADY;
wire    result_az_RVALID;
wire   [63:0] result_az_RDATA;
wire    result_az_RLAST;
wire   [0:0] result_az_RID;
wire   [0:0] result_az_RUSER;
wire   [1:0] result_az_RRESP;
wire    result_az_BVALID;
reg    result_az_BREADY;
wire   [1:0] result_az_BRESP;
wire   [0:0] result_az_BID;
wire   [0:0] result_az_BUSER;
reg    result_m_AWVALID;
wire    result_m_AWREADY;
reg    result_m_WVALID;
wire    result_m_WREADY;
wire    result_m_ARREADY;
wire    result_m_RVALID;
wire   [63:0] result_m_RDATA;
wire    result_m_RLAST;
wire   [0:0] result_m_RID;
wire   [0:0] result_m_RUSER;
wire   [1:0] result_m_RRESP;
wire    result_m_BVALID;
reg    result_m_BREADY;
wire   [1:0] result_m_BRESP;
wire   [0:0] result_m_BID;
wire   [0:0] result_m_BUSER;
reg   [2:0] indvar_reg_949;
reg   [63:0] reg_1580;
wire    ap_CS_fsm_state4;
wire    grp_janus_step_fu_960_ap_done;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg    ap_sig_ioackin_result_x_AWREADY;
reg    ap_sig_ioackin_result_y_AWREADY;
reg    ap_sig_ioackin_result_z_AWREADY;
reg    ap_sig_ioackin_result_vx_AWREADY;
reg    ap_sig_ioackin_result_vy_AWREADY;
reg    ap_sig_ioackin_result_vz_AWREADY;
reg    ap_sig_ioackin_result_ax_AWREADY;
reg    ap_sig_ioackin_result_ay_AWREADY;
reg    ap_sig_ioackin_result_az_AWREADY;
reg    ap_sig_ioackin_result_m_AWREADY;
reg    ap_block_state10_io;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
reg   [63:0] reg_1585;
reg   [63:0] reg_1590;
reg   [63:0] reg_1595;
reg   [63:0] reg_1600;
reg   [63:0] reg_1605;
reg   [63:0] reg_1610;
reg   [63:0] reg_1615;
reg   [63:0] reg_1620;
reg   [63:0] reg_1625;
reg   [63:0] reg_1630;
reg   [63:0] reg_1635;
reg   [63:0] reg_1640;
reg   [63:0] reg_1645;
reg   [63:0] reg_1650;
reg   [63:0] reg_1655;
reg   [63:0] reg_1660;
reg   [63:0] reg_1665;
reg   [63:0] reg_1670;
reg   [63:0] reg_1675;
reg   [63:0] reg_1680;
reg   [63:0] reg_1685;
reg   [63:0] reg_1690;
reg   [63:0] reg_1695;
reg   [63:0] reg_1700;
reg   [63:0] reg_1705;
reg   [63:0] reg_1710;
reg   [63:0] reg_1715;
reg   [63:0] reg_1720;
reg   [63:0] reg_1725;
reg   [63:0] reg_1730;
reg   [63:0] reg_1735;
reg   [63:0] reg_1740;
reg   [63:0] reg_1745;
reg   [63:0] reg_1750;
reg   [63:0] reg_1755;
reg   [63:0] reg_1760;
reg   [63:0] reg_1765;
reg   [63:0] reg_1770;
reg   [63:0] reg_1775;
reg   [63:0] reg_1780;
reg   [63:0] reg_1785;
reg   [63:0] reg_1790;
reg   [63:0] reg_1795;
reg   [63:0] reg_1800;
reg   [63:0] reg_1805;
reg   [63:0] reg_1810;
reg   [63:0] reg_1815;
reg   [63:0] reg_1820;
reg   [63:0] reg_1825;
reg   [63:0] reg_1830;
reg   [63:0] reg_1835;
reg   [63:0] reg_1840;
reg   [63:0] reg_1845;
wire    ap_CS_fsm_state2;
wire    grp_to_int_fu_1252_ap_done;
wire   [12:0] t_1_9_fu_2072_p2;
reg   [12:0] t_1_9_reg_3034;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond1_fu_2078_p2;
wire    ap_block_state23_pp0_stage0_iter0;
wire    ap_block_state24_pp0_stage0_iter1;
reg    ap_sig_ioackin_result_x_WREADY;
reg    ap_sig_ioackin_result_y_WREADY;
reg    ap_sig_ioackin_result_z_WREADY;
reg    ap_sig_ioackin_result_vx_WREADY;
reg    ap_sig_ioackin_result_vy_WREADY;
reg    ap_sig_ioackin_result_vz_WREADY;
reg    ap_sig_ioackin_result_ax_WREADY;
reg    ap_sig_ioackin_result_ay_WREADY;
reg    ap_sig_ioackin_result_az_WREADY;
reg    ap_sig_ioackin_result_m_WREADY;
reg    ap_block_state24_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [2:0] indvar_next_fu_2084_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] p_x_gep3_phi_fu_2176_p3;
reg   [63:0] p_x_gep3_phi_reg_3318;
wire   [63:0] p_y_gep6_phi_fu_2240_p3;
reg   [63:0] p_y_gep6_phi_reg_3323;
wire   [63:0] p_z_gep9_phi_fu_2304_p3;
reg   [63:0] p_z_gep9_phi_reg_3328;
wire   [63:0] p_vx_gep12_phi_fu_2368_p3;
reg   [63:0] p_vx_gep12_phi_reg_3333;
wire   [63:0] p_vy_gep15_phi_fu_2432_p3;
reg   [63:0] p_vy_gep15_phi_reg_3338;
wire   [63:0] p_vz_gep18_phi_fu_2496_p3;
reg   [63:0] p_vz_gep18_phi_reg_3343;
wire   [63:0] p_ax_gep21_phi_fu_2560_p3;
reg   [63:0] p_ax_gep21_phi_reg_3348;
wire   [63:0] p_ay_gep24_phi_fu_2624_p3;
reg   [63:0] p_ay_gep24_phi_reg_3353;
wire   [63:0] p_az_gep27_phi_fu_2688_p3;
reg   [63:0] p_az_gep27_phi_reg_3358;
wire   [63:0] p_m_gep30_phi_fu_2752_p3;
reg   [63:0] p_m_gep30_phi_reg_3363;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state23;
wire    grp_janus_step_fu_960_ap_start;
wire    grp_janus_step_fu_960_ap_idle;
wire    grp_janus_step_fu_960_ap_ready;
reg   [63:0] grp_janus_step_fu_960_p_int_0_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_x_read;
reg   [63:0] grp_janus_step_fu_960_p_int_0_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_y_read;
reg   [63:0] grp_janus_step_fu_960_p_int_0_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_z_read;
reg   [63:0] grp_janus_step_fu_960_p_int_0_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_vx_read;
reg   [63:0] grp_janus_step_fu_960_p_int_0_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_vy_read;
reg   [63:0] grp_janus_step_fu_960_p_int_0_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_1_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_2_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_3_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_4_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_5_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_6_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_7_vz_read;
reg   [63:0] grp_janus_step_fu_960_p_int_8_vz_read;
wire   [63:0] grp_janus_step_fu_960_p_x_0_o;
wire    grp_janus_step_fu_960_p_x_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_0_o;
wire    grp_janus_step_fu_960_p_y_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_0_o;
wire    grp_janus_step_fu_960_p_z_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_0;
wire    grp_janus_step_fu_960_p_vx_0_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_0;
wire    grp_janus_step_fu_960_p_vy_0_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_0;
wire    grp_janus_step_fu_960_p_vz_0_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_1_o;
wire    grp_janus_step_fu_960_p_x_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_1_o;
wire    grp_janus_step_fu_960_p_y_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_1_o;
wire    grp_janus_step_fu_960_p_z_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_1;
wire    grp_janus_step_fu_960_p_vx_1_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_1;
wire    grp_janus_step_fu_960_p_vy_1_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_1;
wire    grp_janus_step_fu_960_p_vz_1_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_2_o;
wire    grp_janus_step_fu_960_p_x_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_2_o;
wire    grp_janus_step_fu_960_p_y_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_2_o;
wire    grp_janus_step_fu_960_p_z_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_2;
wire    grp_janus_step_fu_960_p_vx_2_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_2;
wire    grp_janus_step_fu_960_p_vy_2_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_2;
wire    grp_janus_step_fu_960_p_vz_2_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_3_o;
wire    grp_janus_step_fu_960_p_x_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_3_o;
wire    grp_janus_step_fu_960_p_y_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_3_o;
wire    grp_janus_step_fu_960_p_z_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_3;
wire    grp_janus_step_fu_960_p_vx_3_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_3;
wire    grp_janus_step_fu_960_p_vy_3_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_3;
wire    grp_janus_step_fu_960_p_vz_3_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_4_o;
wire    grp_janus_step_fu_960_p_x_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_4_o;
wire    grp_janus_step_fu_960_p_y_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_4_o;
wire    grp_janus_step_fu_960_p_z_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_4;
wire    grp_janus_step_fu_960_p_vx_4_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_4;
wire    grp_janus_step_fu_960_p_vy_4_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_4;
wire    grp_janus_step_fu_960_p_vz_4_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_5_o;
wire    grp_janus_step_fu_960_p_x_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_5_o;
wire    grp_janus_step_fu_960_p_y_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_5_o;
wire    grp_janus_step_fu_960_p_z_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_5;
wire    grp_janus_step_fu_960_p_vx_5_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_5;
wire    grp_janus_step_fu_960_p_vy_5_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_5;
wire    grp_janus_step_fu_960_p_vz_5_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_6_o;
wire    grp_janus_step_fu_960_p_x_6_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_6_o;
wire    grp_janus_step_fu_960_p_y_6_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_6_o;
wire    grp_janus_step_fu_960_p_z_6_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_6;
wire    grp_janus_step_fu_960_p_vx_6_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_6;
wire    grp_janus_step_fu_960_p_vy_6_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_6;
wire    grp_janus_step_fu_960_p_vz_6_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_7_o;
wire    grp_janus_step_fu_960_p_x_7_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_7_o;
wire    grp_janus_step_fu_960_p_y_7_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_7_o;
wire    grp_janus_step_fu_960_p_z_7_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_7;
wire    grp_janus_step_fu_960_p_vx_7_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_7;
wire    grp_janus_step_fu_960_p_vy_7_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_7;
wire    grp_janus_step_fu_960_p_vz_7_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_x_8_o;
wire    grp_janus_step_fu_960_p_x_8_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_y_8_o;
wire    grp_janus_step_fu_960_p_y_8_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_z_8_o;
wire    grp_janus_step_fu_960_p_z_8_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vx_8;
wire    grp_janus_step_fu_960_p_vx_8_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vy_8;
wire    grp_janus_step_fu_960_p_vy_8_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_vz_8;
wire    grp_janus_step_fu_960_p_vz_8_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_0_o;
wire    grp_janus_step_fu_960_p_ax_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_0_o;
wire    grp_janus_step_fu_960_p_ay_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_0_o;
wire    grp_janus_step_fu_960_p_az_0_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_1_o;
wire    grp_janus_step_fu_960_p_ax_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_1_o;
wire    grp_janus_step_fu_960_p_ay_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_1_o;
wire    grp_janus_step_fu_960_p_az_1_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_2_o;
wire    grp_janus_step_fu_960_p_ax_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_2_o;
wire    grp_janus_step_fu_960_p_ay_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_2_o;
wire    grp_janus_step_fu_960_p_az_2_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_3_o;
wire    grp_janus_step_fu_960_p_ax_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_3_o;
wire    grp_janus_step_fu_960_p_ay_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_3_o;
wire    grp_janus_step_fu_960_p_az_3_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_4_o;
wire    grp_janus_step_fu_960_p_ax_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_4_o;
wire    grp_janus_step_fu_960_p_ay_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_4_o;
wire    grp_janus_step_fu_960_p_az_4_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ax_5_o;
wire    grp_janus_step_fu_960_p_ax_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_ay_5_o;
wire    grp_janus_step_fu_960_p_ay_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_p_az_5_o;
wire    grp_janus_step_fu_960_p_az_5_o_ap_vld;
wire   [63:0] grp_janus_step_fu_960_ap_return_0;
wire   [63:0] grp_janus_step_fu_960_ap_return_1;
wire   [63:0] grp_janus_step_fu_960_ap_return_2;
wire   [63:0] grp_janus_step_fu_960_ap_return_3;
wire   [63:0] grp_janus_step_fu_960_ap_return_4;
wire   [63:0] grp_janus_step_fu_960_ap_return_5;
wire   [63:0] grp_janus_step_fu_960_ap_return_6;
wire   [63:0] grp_janus_step_fu_960_ap_return_7;
wire   [63:0] grp_janus_step_fu_960_ap_return_8;
wire   [63:0] grp_janus_step_fu_960_ap_return_9;
wire   [63:0] grp_janus_step_fu_960_ap_return_10;
wire   [63:0] grp_janus_step_fu_960_ap_return_11;
wire   [63:0] grp_janus_step_fu_960_ap_return_12;
wire   [63:0] grp_janus_step_fu_960_ap_return_13;
wire   [63:0] grp_janus_step_fu_960_ap_return_14;
wire   [63:0] grp_janus_step_fu_960_ap_return_15;
wire   [63:0] grp_janus_step_fu_960_ap_return_16;
wire   [63:0] grp_janus_step_fu_960_ap_return_17;
wire   [63:0] grp_janus_step_fu_960_ap_return_18;
wire   [63:0] grp_janus_step_fu_960_ap_return_19;
wire   [63:0] grp_janus_step_fu_960_ap_return_20;
wire   [63:0] grp_janus_step_fu_960_ap_return_21;
wire   [63:0] grp_janus_step_fu_960_ap_return_22;
wire   [63:0] grp_janus_step_fu_960_ap_return_23;
wire   [63:0] grp_janus_step_fu_960_ap_return_24;
wire   [63:0] grp_janus_step_fu_960_ap_return_25;
wire   [63:0] grp_janus_step_fu_960_ap_return_26;
wire   [63:0] grp_janus_step_fu_960_ap_return_27;
wire   [63:0] grp_janus_step_fu_960_ap_return_28;
wire   [63:0] grp_janus_step_fu_960_ap_return_29;
wire   [63:0] grp_janus_step_fu_960_ap_return_30;
wire   [63:0] grp_janus_step_fu_960_ap_return_31;
wire   [63:0] grp_janus_step_fu_960_ap_return_32;
wire   [63:0] grp_janus_step_fu_960_ap_return_33;
wire   [63:0] grp_janus_step_fu_960_ap_return_34;
wire   [63:0] grp_janus_step_fu_960_ap_return_35;
wire   [63:0] grp_janus_step_fu_960_ap_return_36;
wire   [63:0] grp_janus_step_fu_960_ap_return_37;
wire   [63:0] grp_janus_step_fu_960_ap_return_38;
wire   [63:0] grp_janus_step_fu_960_ap_return_39;
wire   [63:0] grp_janus_step_fu_960_ap_return_40;
wire   [63:0] grp_janus_step_fu_960_ap_return_41;
wire   [63:0] grp_janus_step_fu_960_ap_return_42;
wire   [63:0] grp_janus_step_fu_960_ap_return_43;
wire   [63:0] grp_janus_step_fu_960_ap_return_44;
wire   [63:0] grp_janus_step_fu_960_ap_return_45;
wire   [63:0] grp_janus_step_fu_960_ap_return_46;
wire   [63:0] grp_janus_step_fu_960_ap_return_47;
wire   [63:0] grp_janus_step_fu_960_ap_return_48;
wire   [63:0] grp_janus_step_fu_960_ap_return_49;
wire   [63:0] grp_janus_step_fu_960_ap_return_50;
wire   [63:0] grp_janus_step_fu_960_ap_return_51;
wire   [63:0] grp_janus_step_fu_960_ap_return_52;
wire   [63:0] grp_janus_step_fu_960_ap_return_53;
wire    grp_to_int_fu_1252_ap_start;
wire    grp_to_int_fu_1252_ap_idle;
wire    grp_to_int_fu_1252_ap_ready;
wire   [63:0] grp_to_int_fu_1252_ap_return_0;
wire   [63:0] grp_to_int_fu_1252_ap_return_1;
wire   [63:0] grp_to_int_fu_1252_ap_return_2;
wire   [63:0] grp_to_int_fu_1252_ap_return_3;
wire   [63:0] grp_to_int_fu_1252_ap_return_4;
wire   [63:0] grp_to_int_fu_1252_ap_return_5;
wire   [63:0] grp_to_int_fu_1252_ap_return_6;
wire   [63:0] grp_to_int_fu_1252_ap_return_7;
wire   [63:0] grp_to_int_fu_1252_ap_return_8;
wire   [63:0] grp_to_int_fu_1252_ap_return_9;
wire   [63:0] grp_to_int_fu_1252_ap_return_10;
wire   [63:0] grp_to_int_fu_1252_ap_return_11;
wire   [63:0] grp_to_int_fu_1252_ap_return_12;
wire   [63:0] grp_to_int_fu_1252_ap_return_13;
wire   [63:0] grp_to_int_fu_1252_ap_return_14;
wire   [63:0] grp_to_int_fu_1252_ap_return_15;
wire   [63:0] grp_to_int_fu_1252_ap_return_16;
wire   [63:0] grp_to_int_fu_1252_ap_return_17;
wire   [63:0] grp_to_int_fu_1252_ap_return_18;
wire   [63:0] grp_to_int_fu_1252_ap_return_19;
wire   [63:0] grp_to_int_fu_1252_ap_return_20;
wire   [63:0] grp_to_int_fu_1252_ap_return_21;
wire   [63:0] grp_to_int_fu_1252_ap_return_22;
wire   [63:0] grp_to_int_fu_1252_ap_return_23;
wire   [63:0] grp_to_int_fu_1252_ap_return_24;
wire   [63:0] grp_to_int_fu_1252_ap_return_25;
wire   [63:0] grp_to_int_fu_1252_ap_return_26;
wire   [63:0] grp_to_int_fu_1252_ap_return_27;
wire   [63:0] grp_to_int_fu_1252_ap_return_28;
wire   [63:0] grp_to_int_fu_1252_ap_return_29;
wire   [63:0] grp_to_int_fu_1252_ap_return_30;
wire   [63:0] grp_to_int_fu_1252_ap_return_31;
wire   [63:0] grp_to_int_fu_1252_ap_return_32;
wire   [63:0] grp_to_int_fu_1252_ap_return_33;
wire   [63:0] grp_to_int_fu_1252_ap_return_34;
wire   [63:0] grp_to_int_fu_1252_ap_return_35;
wire   [63:0] grp_to_int_fu_1252_ap_return_36;
wire   [63:0] grp_to_int_fu_1252_ap_return_37;
wire   [63:0] grp_to_int_fu_1252_ap_return_38;
wire   [63:0] grp_to_int_fu_1252_ap_return_39;
wire   [63:0] grp_to_int_fu_1252_ap_return_40;
wire   [63:0] grp_to_int_fu_1252_ap_return_41;
wire   [63:0] grp_to_int_fu_1252_ap_return_42;
wire   [63:0] grp_to_int_fu_1252_ap_return_43;
wire   [63:0] grp_to_int_fu_1252_ap_return_44;
wire   [63:0] grp_to_int_fu_1252_ap_return_45;
wire   [63:0] grp_to_int_fu_1252_ap_return_46;
wire   [63:0] grp_to_int_fu_1252_ap_return_47;
wire   [63:0] grp_to_int_fu_1252_ap_return_48;
wire   [63:0] grp_to_int_fu_1252_ap_return_49;
wire   [63:0] grp_to_int_fu_1252_ap_return_50;
wire   [63:0] grp_to_int_fu_1252_ap_return_51;
wire   [63:0] grp_to_int_fu_1252_ap_return_52;
wire   [63:0] grp_to_int_fu_1252_ap_return_53;
reg   [63:0] p_int_vz_8_reg_398;
reg   [63:0] p_int_vz_7_reg_408;
reg   [63:0] p_int_vz_6_reg_418;
reg   [63:0] p_int_vz_5_reg_428;
reg   [63:0] p_int_vz_4_reg_438;
reg   [63:0] p_int_vz_3_reg_448;
reg   [63:0] p_int_vz_2_reg_458;
reg   [63:0] p_int_vz_1_reg_468;
reg   [63:0] p_int_vz_reg_478;
reg   [63:0] p_int_vy_8_reg_488;
reg   [63:0] p_int_vy_7_reg_498;
reg   [63:0] p_int_vy_6_reg_508;
reg   [63:0] p_int_vy_5_reg_518;
reg   [63:0] p_int_vy_4_reg_528;
reg   [63:0] p_int_vy_3_reg_538;
reg   [63:0] p_int_vy_2_reg_548;
reg   [63:0] p_int_vy_1_reg_558;
reg   [63:0] p_int_vy_reg_568;
reg   [63:0] p_int_vx_8_reg_578;
reg   [63:0] p_int_vx_7_reg_588;
reg   [63:0] p_int_vx_6_reg_598;
reg   [63:0] p_int_vx_5_reg_608;
reg   [63:0] p_int_vx_4_reg_618;
reg   [63:0] p_int_vx_3_reg_628;
reg   [63:0] p_int_vx_2_reg_638;
reg   [63:0] p_int_vx_1_reg_648;
reg   [63:0] p_int_vx_reg_658;
reg   [63:0] p_int_z_8_reg_668;
reg   [63:0] p_int_z_7_reg_678;
reg   [63:0] p_int_z_6_reg_688;
reg   [63:0] p_int_z_5_reg_698;
reg   [63:0] p_int_z_4_reg_708;
reg   [63:0] p_int_z_3_reg_718;
reg   [63:0] p_int_z_2_reg_728;
reg   [63:0] p_int_z_1_reg_738;
reg   [63:0] p_int_z_reg_748;
reg   [63:0] p_int_y_8_reg_758;
reg   [63:0] p_int_y_7_reg_768;
reg   [63:0] p_int_y_6_reg_778;
reg   [63:0] p_int_y_5_reg_788;
reg   [63:0] p_int_y_4_reg_798;
reg   [63:0] p_int_y_3_reg_808;
reg   [63:0] p_int_y_2_reg_818;
reg   [63:0] p_int_y_1_reg_828;
reg   [63:0] p_int_y_reg_838;
reg   [63:0] p_int_x_8_reg_848;
reg   [63:0] p_int_x_7_reg_858;
reg   [63:0] p_int_x_6_reg_868;
reg   [63:0] p_int_x_5_reg_878;
reg   [63:0] p_int_x_4_reg_888;
reg   [63:0] p_int_x_3_reg_898;
reg   [63:0] p_int_x_2_reg_908;
reg   [63:0] p_int_x_1_reg_918;
reg   [63:0] p_int_x_reg_928;
reg   [12:0] t_reg_938;
reg    ap_reg_grp_janus_step_fu_960_ap_start;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
reg    ap_reg_grp_to_int_fu_1252_ap_start;
reg    ap_reg_ioackin_result_x_AWREADY;
reg    ap_reg_ioackin_result_x_WREADY;
wire    ap_block_pp0_stage0_flag00001001;
reg    ap_block_state29;
reg    ap_reg_ioackin_result_y_AWREADY;
reg    ap_reg_ioackin_result_y_WREADY;
reg    ap_reg_ioackin_result_z_AWREADY;
reg    ap_reg_ioackin_result_z_WREADY;
reg    ap_reg_ioackin_result_vx_AWREADY;
reg    ap_reg_ioackin_result_vx_WREADY;
reg    ap_reg_ioackin_result_vy_AWREADY;
reg    ap_reg_ioackin_result_vy_WREADY;
reg    ap_reg_ioackin_result_vz_AWREADY;
reg    ap_reg_ioackin_result_vz_WREADY;
reg    ap_reg_ioackin_result_ax_AWREADY;
reg    ap_reg_ioackin_result_ax_WREADY;
reg    ap_reg_ioackin_result_ay_AWREADY;
reg    ap_reg_ioackin_result_ay_WREADY;
reg    ap_reg_ioackin_result_az_AWREADY;
reg    ap_reg_ioackin_result_az_WREADY;
reg    ap_reg_ioackin_result_m_AWREADY;
reg    ap_reg_ioackin_result_m_WREADY;
wire   [0:0] sel_tmp_fu_2114_p2;
wire   [0:0] sel_tmp2_fu_2128_p2;
wire   [63:0] sel_tmp1_fu_2120_p3;
wire   [0:0] sel_tmp4_fu_2142_p2;
wire   [63:0] sel_tmp3_fu_2134_p3;
wire   [0:0] sel_tmp6_fu_2156_p2;
wire   [63:0] sel_tmp5_fu_2148_p3;
wire   [0:0] sel_tmp8_fu_2170_p2;
wire   [63:0] sel_tmp7_fu_2162_p3;
wire   [63:0] sel_tmp11_fu_2208_p3;
wire   [63:0] sel_tmp13_fu_2216_p3;
wire   [63:0] sel_tmp15_fu_2224_p3;
wire   [63:0] sel_tmp17_fu_2232_p3;
wire   [63:0] sel_tmp21_fu_2272_p3;
wire   [63:0] sel_tmp23_fu_2280_p3;
wire   [63:0] sel_tmp24_fu_2288_p3;
wire   [63:0] sel_tmp25_fu_2296_p3;
wire   [63:0] sel_tmp26_fu_2336_p3;
wire   [63:0] sel_tmp27_fu_2344_p3;
wire   [63:0] sel_tmp28_fu_2352_p3;
wire   [63:0] sel_tmp29_fu_2360_p3;
wire   [63:0] sel_tmp30_fu_2400_p3;
wire   [63:0] sel_tmp31_fu_2408_p3;
wire   [63:0] sel_tmp32_fu_2416_p3;
wire   [63:0] sel_tmp33_fu_2424_p3;
wire   [63:0] sel_tmp34_fu_2464_p3;
wire   [63:0] sel_tmp35_fu_2472_p3;
wire   [63:0] sel_tmp36_fu_2480_p3;
wire   [63:0] sel_tmp37_fu_2488_p3;
wire   [63:0] sel_tmp38_fu_2528_p3;
wire   [63:0] sel_tmp39_fu_2536_p3;
wire   [63:0] sel_tmp40_fu_2544_p3;
wire   [63:0] sel_tmp41_fu_2552_p3;
wire   [63:0] sel_tmp42_fu_2592_p3;
wire   [63:0] sel_tmp43_fu_2600_p3;
wire   [63:0] sel_tmp44_fu_2608_p3;
wire   [63:0] sel_tmp45_fu_2616_p3;
wire   [63:0] sel_tmp46_fu_2656_p3;
wire   [63:0] sel_tmp47_fu_2664_p3;
wire   [63:0] sel_tmp48_fu_2672_p3;
wire   [63:0] sel_tmp49_fu_2680_p3;
wire   [63:0] sel_tmp50_fu_2720_p3;
wire   [63:0] sel_tmp51_fu_2728_p3;
wire   [63:0] sel_tmp52_fu_2736_p3;
wire   [63:0] sel_tmp53_fu_2744_p3;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_10620;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 p_x_6 = 64'd13822444943774919686;
#0 p_x_0 = 64'd4567152389771507729;
#0 p_x_3 = 64'd4605654676140553379;
#0 p_y_6 = 64'd13845219990357050868;
#0 p_y_0 = 64'd4573319103647662377;
#0 p_y_3 = 64'd4603175790369598773;
#0 p_z_6 = 64'd4595894388435705682;
#0 p_z_0 = 64'd13772264526068269587;
#0 p_z_3 = 64'd13773245522084252224;
#0 p_vx_6 = 64'd4599190510876962639;
#0 p_vx_0 = 64'd13777698304574014802;
#0 p_vx_3 = 64'd13826676318910647642;
#0 p_vy_6 = 64'd13800701579418655523;
#0 p_vy_0 = 64'd4554473764278357111;
#0 p_vy_3 = 64'd4605651518681738386;
#0 p_vz_6 = 64'd13801447347472314697;
#0 p_vz_0 = 64'd4530215892943494396;
#0 p_vz_3 = 64'd13761386310201165995;
#0 p_x_7 = 64'd4625715252869430711;
#0 p_x_1 = 64'd13818049127822582602;
#0 p_x_4 = 64'd13833260053020553078;
#0 p_y_7 = 64'd4621167998206139555;
#0 p_y_1 = 64'd13824843260482434774;
#0 p_y_4 = 64'd4601792229500559291;
#0 p_z_7 = 64'd13819684549452725266;
#0 p_z_1 = 64'd13805299330089732875;
#0 p_z_4 = 64'd4587155456162114257;
#0 p_vx_7 = 64'd13815473749756759347;
#0 p_vx_1 = 64'd4608142087263691413;
#0 p_vx_4 = 64'd13819294238292053517;
#0 p_vy_7 = 64'd4596164786788770832;
#0 p_vy_1 = 64'd13825396329648843799;
#0 p_vy_4 = 64'd13827978604904534708;
#0 p_vz_7 = 64'd4566892981286489212;
#0 p_vz_1 = 64'd13817916383283860957;
#0 p_vz_4 = 64'd13800502897296120619;
#0 p_x_8 = 64'd4628749847590923893;
#0 p_x_2 = 64'd13827898580085365632;
#0 p_x_5 = 64'd13840174676355989969;
#0 p_y_8 = 64'd13844510566799652858;
#0 p_y_2 = 64'd4593870003095532717;
#0 p_y_5 = 64'd13837267343222945795;
#0 p_z_8 = 64'd13825665510323575578;
#0 p_z_2 = 64'd4586271022654213637;
#0 p_z_5 = 64'd4592879820418293668;
#0 p_vx_8 = 64'd4587707182185644013;
#0 p_vx_2 = 64'd13820131753072974477;
#0 p_vx_5 = 64'd4597651607655931011;
#0 p_vy_8 = 64'd4595492077144930393;
#0 p_vy_2 = 64'd13831287975490327993;
#0 p_vy_5 = 64'd13823275817204302629;
#0 p_vz_8 = 64'd13795580769667404675;
#0 p_vz_2 = 64'd13794296278352261494;
#0 p_vz_5 = 64'd13794351085613769305;
#0 p_m_1 = 64'd4505367761690217288;
#0 p_m_2 = 64'd4522890220995503358;
#0 p_m_3 = 64'd4524289444867776389;
#0 p_m_4 = 64'd4509695552774032640;
#0 p_m_5 = 64'd4561945624323345454;
#0 p_ax_0 = 64'd0;
#0 p_ay_0 = 64'd0;
#0 p_az_0 = 64'd0;
#0 p_m_0 = 64'd4607182418800017408;
#0 p_ax_1 = 64'd0;
#0 p_ay_1 = 64'd0;
#0 p_az_1 = 64'd0;
#0 p_ax_2 = 64'd0;
#0 p_ay_2 = 64'd0;
#0 p_az_2 = 64'd0;
#0 p_ax_3 = 64'd0;
#0 p_ay_3 = 64'd0;
#0 p_az_3 = 64'd0;
#0 p_ax_4 = 64'd0;
#0 p_ay_4 = 64'd0;
#0 p_az_4 = 64'd0;
#0 p_ax_5 = 64'd0;
#0 p_ay_5 = 64'd0;
#0 p_az_5 = 64'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_grp_janus_step_fu_960_ap_start = 1'b0;
#0 ap_reg_grp_to_int_fu_1252_ap_start = 1'b0;
#0 ap_reg_ioackin_result_x_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_x_WREADY = 1'b0;
#0 ap_reg_ioackin_result_y_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_y_WREADY = 1'b0;
#0 ap_reg_ioackin_result_z_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_z_WREADY = 1'b0;
#0 ap_reg_ioackin_result_vx_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_vx_WREADY = 1'b0;
#0 ap_reg_ioackin_result_vy_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_vy_WREADY = 1'b0;
#0 ap_reg_ioackin_result_vz_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_vz_WREADY = 1'b0;
#0 ap_reg_ioackin_result_ax_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_ax_WREADY = 1'b0;
#0 ap_reg_ioackin_result_ay_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_ay_WREADY = 1'b0;
#0 ap_reg_ioackin_result_az_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_az_WREADY = 1'b0;
#0 ap_reg_ioackin_result_m_AWREADY = 1'b0;
#0 ap_reg_ioackin_result_m_WREADY = 1'b0;
end

astroSim_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
astroSim_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

astroSim_result_x_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_X_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_X_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_X_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_X_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_X_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_X_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_X_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_X_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_X_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_X_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_X_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_X_CACHE_VALUE ))
astroSim_result_x_m_axi_U(
    .AWVALID(m_axi_result_x_AWVALID),
    .AWREADY(m_axi_result_x_AWREADY),
    .AWADDR(m_axi_result_x_AWADDR),
    .AWID(m_axi_result_x_AWID),
    .AWLEN(m_axi_result_x_AWLEN),
    .AWSIZE(m_axi_result_x_AWSIZE),
    .AWBURST(m_axi_result_x_AWBURST),
    .AWLOCK(m_axi_result_x_AWLOCK),
    .AWCACHE(m_axi_result_x_AWCACHE),
    .AWPROT(m_axi_result_x_AWPROT),
    .AWQOS(m_axi_result_x_AWQOS),
    .AWREGION(m_axi_result_x_AWREGION),
    .AWUSER(m_axi_result_x_AWUSER),
    .WVALID(m_axi_result_x_WVALID),
    .WREADY(m_axi_result_x_WREADY),
    .WDATA(m_axi_result_x_WDATA),
    .WSTRB(m_axi_result_x_WSTRB),
    .WLAST(m_axi_result_x_WLAST),
    .WID(m_axi_result_x_WID),
    .WUSER(m_axi_result_x_WUSER),
    .ARVALID(m_axi_result_x_ARVALID),
    .ARREADY(m_axi_result_x_ARREADY),
    .ARADDR(m_axi_result_x_ARADDR),
    .ARID(m_axi_result_x_ARID),
    .ARLEN(m_axi_result_x_ARLEN),
    .ARSIZE(m_axi_result_x_ARSIZE),
    .ARBURST(m_axi_result_x_ARBURST),
    .ARLOCK(m_axi_result_x_ARLOCK),
    .ARCACHE(m_axi_result_x_ARCACHE),
    .ARPROT(m_axi_result_x_ARPROT),
    .ARQOS(m_axi_result_x_ARQOS),
    .ARREGION(m_axi_result_x_ARREGION),
    .ARUSER(m_axi_result_x_ARUSER),
    .RVALID(m_axi_result_x_RVALID),
    .RREADY(m_axi_result_x_RREADY),
    .RDATA(m_axi_result_x_RDATA),
    .RLAST(m_axi_result_x_RLAST),
    .RID(m_axi_result_x_RID),
    .RUSER(m_axi_result_x_RUSER),
    .RRESP(m_axi_result_x_RRESP),
    .BVALID(m_axi_result_x_BVALID),
    .BREADY(m_axi_result_x_BREADY),
    .BRESP(m_axi_result_x_BRESP),
    .BID(m_axi_result_x_BID),
    .BUSER(m_axi_result_x_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_x_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_x_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_x_RDATA),
    .I_RID(result_x_RID),
    .I_RUSER(result_x_RUSER),
    .I_RRESP(result_x_RRESP),
    .I_RLAST(result_x_RLAST),
    .I_AWVALID(result_x_AWVALID),
    .I_AWREADY(result_x_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_x_WVALID),
    .I_WREADY(result_x_WREADY),
    .I_WDATA(p_x_gep3_phi_reg_3318),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_x_BVALID),
    .I_BREADY(result_x_BREADY),
    .I_BRESP(result_x_BRESP),
    .I_BID(result_x_BID),
    .I_BUSER(result_x_BUSER)
);

astroSim_result_y_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_Y_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_Y_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_Y_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_Y_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_Y_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_Y_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_Y_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_Y_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_Y_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_Y_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_Y_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_Y_CACHE_VALUE ))
astroSim_result_y_m_axi_U(
    .AWVALID(m_axi_result_y_AWVALID),
    .AWREADY(m_axi_result_y_AWREADY),
    .AWADDR(m_axi_result_y_AWADDR),
    .AWID(m_axi_result_y_AWID),
    .AWLEN(m_axi_result_y_AWLEN),
    .AWSIZE(m_axi_result_y_AWSIZE),
    .AWBURST(m_axi_result_y_AWBURST),
    .AWLOCK(m_axi_result_y_AWLOCK),
    .AWCACHE(m_axi_result_y_AWCACHE),
    .AWPROT(m_axi_result_y_AWPROT),
    .AWQOS(m_axi_result_y_AWQOS),
    .AWREGION(m_axi_result_y_AWREGION),
    .AWUSER(m_axi_result_y_AWUSER),
    .WVALID(m_axi_result_y_WVALID),
    .WREADY(m_axi_result_y_WREADY),
    .WDATA(m_axi_result_y_WDATA),
    .WSTRB(m_axi_result_y_WSTRB),
    .WLAST(m_axi_result_y_WLAST),
    .WID(m_axi_result_y_WID),
    .WUSER(m_axi_result_y_WUSER),
    .ARVALID(m_axi_result_y_ARVALID),
    .ARREADY(m_axi_result_y_ARREADY),
    .ARADDR(m_axi_result_y_ARADDR),
    .ARID(m_axi_result_y_ARID),
    .ARLEN(m_axi_result_y_ARLEN),
    .ARSIZE(m_axi_result_y_ARSIZE),
    .ARBURST(m_axi_result_y_ARBURST),
    .ARLOCK(m_axi_result_y_ARLOCK),
    .ARCACHE(m_axi_result_y_ARCACHE),
    .ARPROT(m_axi_result_y_ARPROT),
    .ARQOS(m_axi_result_y_ARQOS),
    .ARREGION(m_axi_result_y_ARREGION),
    .ARUSER(m_axi_result_y_ARUSER),
    .RVALID(m_axi_result_y_RVALID),
    .RREADY(m_axi_result_y_RREADY),
    .RDATA(m_axi_result_y_RDATA),
    .RLAST(m_axi_result_y_RLAST),
    .RID(m_axi_result_y_RID),
    .RUSER(m_axi_result_y_RUSER),
    .RRESP(m_axi_result_y_RRESP),
    .BVALID(m_axi_result_y_BVALID),
    .BREADY(m_axi_result_y_BREADY),
    .BRESP(m_axi_result_y_BRESP),
    .BID(m_axi_result_y_BID),
    .BUSER(m_axi_result_y_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_y_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_y_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_y_RDATA),
    .I_RID(result_y_RID),
    .I_RUSER(result_y_RUSER),
    .I_RRESP(result_y_RRESP),
    .I_RLAST(result_y_RLAST),
    .I_AWVALID(result_y_AWVALID),
    .I_AWREADY(result_y_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_y_WVALID),
    .I_WREADY(result_y_WREADY),
    .I_WDATA(p_y_gep6_phi_reg_3323),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_y_BVALID),
    .I_BREADY(result_y_BREADY),
    .I_BRESP(result_y_BRESP),
    .I_BID(result_y_BID),
    .I_BUSER(result_y_BUSER)
);

astroSim_result_z_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_Z_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_Z_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_Z_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_Z_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_Z_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_Z_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_Z_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_Z_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_Z_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_Z_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_Z_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_Z_CACHE_VALUE ))
astroSim_result_z_m_axi_U(
    .AWVALID(m_axi_result_z_AWVALID),
    .AWREADY(m_axi_result_z_AWREADY),
    .AWADDR(m_axi_result_z_AWADDR),
    .AWID(m_axi_result_z_AWID),
    .AWLEN(m_axi_result_z_AWLEN),
    .AWSIZE(m_axi_result_z_AWSIZE),
    .AWBURST(m_axi_result_z_AWBURST),
    .AWLOCK(m_axi_result_z_AWLOCK),
    .AWCACHE(m_axi_result_z_AWCACHE),
    .AWPROT(m_axi_result_z_AWPROT),
    .AWQOS(m_axi_result_z_AWQOS),
    .AWREGION(m_axi_result_z_AWREGION),
    .AWUSER(m_axi_result_z_AWUSER),
    .WVALID(m_axi_result_z_WVALID),
    .WREADY(m_axi_result_z_WREADY),
    .WDATA(m_axi_result_z_WDATA),
    .WSTRB(m_axi_result_z_WSTRB),
    .WLAST(m_axi_result_z_WLAST),
    .WID(m_axi_result_z_WID),
    .WUSER(m_axi_result_z_WUSER),
    .ARVALID(m_axi_result_z_ARVALID),
    .ARREADY(m_axi_result_z_ARREADY),
    .ARADDR(m_axi_result_z_ARADDR),
    .ARID(m_axi_result_z_ARID),
    .ARLEN(m_axi_result_z_ARLEN),
    .ARSIZE(m_axi_result_z_ARSIZE),
    .ARBURST(m_axi_result_z_ARBURST),
    .ARLOCK(m_axi_result_z_ARLOCK),
    .ARCACHE(m_axi_result_z_ARCACHE),
    .ARPROT(m_axi_result_z_ARPROT),
    .ARQOS(m_axi_result_z_ARQOS),
    .ARREGION(m_axi_result_z_ARREGION),
    .ARUSER(m_axi_result_z_ARUSER),
    .RVALID(m_axi_result_z_RVALID),
    .RREADY(m_axi_result_z_RREADY),
    .RDATA(m_axi_result_z_RDATA),
    .RLAST(m_axi_result_z_RLAST),
    .RID(m_axi_result_z_RID),
    .RUSER(m_axi_result_z_RUSER),
    .RRESP(m_axi_result_z_RRESP),
    .BVALID(m_axi_result_z_BVALID),
    .BREADY(m_axi_result_z_BREADY),
    .BRESP(m_axi_result_z_BRESP),
    .BID(m_axi_result_z_BID),
    .BUSER(m_axi_result_z_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_z_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_z_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_z_RDATA),
    .I_RID(result_z_RID),
    .I_RUSER(result_z_RUSER),
    .I_RRESP(result_z_RRESP),
    .I_RLAST(result_z_RLAST),
    .I_AWVALID(result_z_AWVALID),
    .I_AWREADY(result_z_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_z_WVALID),
    .I_WREADY(result_z_WREADY),
    .I_WDATA(p_z_gep9_phi_reg_3328),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_z_BVALID),
    .I_BREADY(result_z_BREADY),
    .I_BRESP(result_z_BRESP),
    .I_BID(result_z_BID),
    .I_BUSER(result_z_BUSER)
);

astroSim_result_vx_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_VX_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_VX_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_VX_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_VX_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_VX_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_VX_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_VX_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_VX_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_VX_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_VX_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_VX_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_VX_CACHE_VALUE ))
astroSim_result_vx_m_axi_U(
    .AWVALID(m_axi_result_vx_AWVALID),
    .AWREADY(m_axi_result_vx_AWREADY),
    .AWADDR(m_axi_result_vx_AWADDR),
    .AWID(m_axi_result_vx_AWID),
    .AWLEN(m_axi_result_vx_AWLEN),
    .AWSIZE(m_axi_result_vx_AWSIZE),
    .AWBURST(m_axi_result_vx_AWBURST),
    .AWLOCK(m_axi_result_vx_AWLOCK),
    .AWCACHE(m_axi_result_vx_AWCACHE),
    .AWPROT(m_axi_result_vx_AWPROT),
    .AWQOS(m_axi_result_vx_AWQOS),
    .AWREGION(m_axi_result_vx_AWREGION),
    .AWUSER(m_axi_result_vx_AWUSER),
    .WVALID(m_axi_result_vx_WVALID),
    .WREADY(m_axi_result_vx_WREADY),
    .WDATA(m_axi_result_vx_WDATA),
    .WSTRB(m_axi_result_vx_WSTRB),
    .WLAST(m_axi_result_vx_WLAST),
    .WID(m_axi_result_vx_WID),
    .WUSER(m_axi_result_vx_WUSER),
    .ARVALID(m_axi_result_vx_ARVALID),
    .ARREADY(m_axi_result_vx_ARREADY),
    .ARADDR(m_axi_result_vx_ARADDR),
    .ARID(m_axi_result_vx_ARID),
    .ARLEN(m_axi_result_vx_ARLEN),
    .ARSIZE(m_axi_result_vx_ARSIZE),
    .ARBURST(m_axi_result_vx_ARBURST),
    .ARLOCK(m_axi_result_vx_ARLOCK),
    .ARCACHE(m_axi_result_vx_ARCACHE),
    .ARPROT(m_axi_result_vx_ARPROT),
    .ARQOS(m_axi_result_vx_ARQOS),
    .ARREGION(m_axi_result_vx_ARREGION),
    .ARUSER(m_axi_result_vx_ARUSER),
    .RVALID(m_axi_result_vx_RVALID),
    .RREADY(m_axi_result_vx_RREADY),
    .RDATA(m_axi_result_vx_RDATA),
    .RLAST(m_axi_result_vx_RLAST),
    .RID(m_axi_result_vx_RID),
    .RUSER(m_axi_result_vx_RUSER),
    .RRESP(m_axi_result_vx_RRESP),
    .BVALID(m_axi_result_vx_BVALID),
    .BREADY(m_axi_result_vx_BREADY),
    .BRESP(m_axi_result_vx_BRESP),
    .BID(m_axi_result_vx_BID),
    .BUSER(m_axi_result_vx_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_vx_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_vx_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_vx_RDATA),
    .I_RID(result_vx_RID),
    .I_RUSER(result_vx_RUSER),
    .I_RRESP(result_vx_RRESP),
    .I_RLAST(result_vx_RLAST),
    .I_AWVALID(result_vx_AWVALID),
    .I_AWREADY(result_vx_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_vx_WVALID),
    .I_WREADY(result_vx_WREADY),
    .I_WDATA(p_vx_gep12_phi_reg_3333),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_vx_BVALID),
    .I_BREADY(result_vx_BREADY),
    .I_BRESP(result_vx_BRESP),
    .I_BID(result_vx_BID),
    .I_BUSER(result_vx_BUSER)
);

astroSim_result_vy_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_VY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_VY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_VY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_VY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_VY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_VY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_VY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_VY_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_VY_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_VY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_VY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_VY_CACHE_VALUE ))
astroSim_result_vy_m_axi_U(
    .AWVALID(m_axi_result_vy_AWVALID),
    .AWREADY(m_axi_result_vy_AWREADY),
    .AWADDR(m_axi_result_vy_AWADDR),
    .AWID(m_axi_result_vy_AWID),
    .AWLEN(m_axi_result_vy_AWLEN),
    .AWSIZE(m_axi_result_vy_AWSIZE),
    .AWBURST(m_axi_result_vy_AWBURST),
    .AWLOCK(m_axi_result_vy_AWLOCK),
    .AWCACHE(m_axi_result_vy_AWCACHE),
    .AWPROT(m_axi_result_vy_AWPROT),
    .AWQOS(m_axi_result_vy_AWQOS),
    .AWREGION(m_axi_result_vy_AWREGION),
    .AWUSER(m_axi_result_vy_AWUSER),
    .WVALID(m_axi_result_vy_WVALID),
    .WREADY(m_axi_result_vy_WREADY),
    .WDATA(m_axi_result_vy_WDATA),
    .WSTRB(m_axi_result_vy_WSTRB),
    .WLAST(m_axi_result_vy_WLAST),
    .WID(m_axi_result_vy_WID),
    .WUSER(m_axi_result_vy_WUSER),
    .ARVALID(m_axi_result_vy_ARVALID),
    .ARREADY(m_axi_result_vy_ARREADY),
    .ARADDR(m_axi_result_vy_ARADDR),
    .ARID(m_axi_result_vy_ARID),
    .ARLEN(m_axi_result_vy_ARLEN),
    .ARSIZE(m_axi_result_vy_ARSIZE),
    .ARBURST(m_axi_result_vy_ARBURST),
    .ARLOCK(m_axi_result_vy_ARLOCK),
    .ARCACHE(m_axi_result_vy_ARCACHE),
    .ARPROT(m_axi_result_vy_ARPROT),
    .ARQOS(m_axi_result_vy_ARQOS),
    .ARREGION(m_axi_result_vy_ARREGION),
    .ARUSER(m_axi_result_vy_ARUSER),
    .RVALID(m_axi_result_vy_RVALID),
    .RREADY(m_axi_result_vy_RREADY),
    .RDATA(m_axi_result_vy_RDATA),
    .RLAST(m_axi_result_vy_RLAST),
    .RID(m_axi_result_vy_RID),
    .RUSER(m_axi_result_vy_RUSER),
    .RRESP(m_axi_result_vy_RRESP),
    .BVALID(m_axi_result_vy_BVALID),
    .BREADY(m_axi_result_vy_BREADY),
    .BRESP(m_axi_result_vy_BRESP),
    .BID(m_axi_result_vy_BID),
    .BUSER(m_axi_result_vy_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_vy_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_vy_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_vy_RDATA),
    .I_RID(result_vy_RID),
    .I_RUSER(result_vy_RUSER),
    .I_RRESP(result_vy_RRESP),
    .I_RLAST(result_vy_RLAST),
    .I_AWVALID(result_vy_AWVALID),
    .I_AWREADY(result_vy_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_vy_WVALID),
    .I_WREADY(result_vy_WREADY),
    .I_WDATA(p_vy_gep15_phi_reg_3338),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_vy_BVALID),
    .I_BREADY(result_vy_BREADY),
    .I_BRESP(result_vy_BRESP),
    .I_BID(result_vy_BID),
    .I_BUSER(result_vy_BUSER)
);

astroSim_result_vz_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_VZ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_VZ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_VZ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_VZ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_VZ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_VZ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_VZ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_VZ_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_VZ_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_VZ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_VZ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_VZ_CACHE_VALUE ))
astroSim_result_vz_m_axi_U(
    .AWVALID(m_axi_result_vz_AWVALID),
    .AWREADY(m_axi_result_vz_AWREADY),
    .AWADDR(m_axi_result_vz_AWADDR),
    .AWID(m_axi_result_vz_AWID),
    .AWLEN(m_axi_result_vz_AWLEN),
    .AWSIZE(m_axi_result_vz_AWSIZE),
    .AWBURST(m_axi_result_vz_AWBURST),
    .AWLOCK(m_axi_result_vz_AWLOCK),
    .AWCACHE(m_axi_result_vz_AWCACHE),
    .AWPROT(m_axi_result_vz_AWPROT),
    .AWQOS(m_axi_result_vz_AWQOS),
    .AWREGION(m_axi_result_vz_AWREGION),
    .AWUSER(m_axi_result_vz_AWUSER),
    .WVALID(m_axi_result_vz_WVALID),
    .WREADY(m_axi_result_vz_WREADY),
    .WDATA(m_axi_result_vz_WDATA),
    .WSTRB(m_axi_result_vz_WSTRB),
    .WLAST(m_axi_result_vz_WLAST),
    .WID(m_axi_result_vz_WID),
    .WUSER(m_axi_result_vz_WUSER),
    .ARVALID(m_axi_result_vz_ARVALID),
    .ARREADY(m_axi_result_vz_ARREADY),
    .ARADDR(m_axi_result_vz_ARADDR),
    .ARID(m_axi_result_vz_ARID),
    .ARLEN(m_axi_result_vz_ARLEN),
    .ARSIZE(m_axi_result_vz_ARSIZE),
    .ARBURST(m_axi_result_vz_ARBURST),
    .ARLOCK(m_axi_result_vz_ARLOCK),
    .ARCACHE(m_axi_result_vz_ARCACHE),
    .ARPROT(m_axi_result_vz_ARPROT),
    .ARQOS(m_axi_result_vz_ARQOS),
    .ARREGION(m_axi_result_vz_ARREGION),
    .ARUSER(m_axi_result_vz_ARUSER),
    .RVALID(m_axi_result_vz_RVALID),
    .RREADY(m_axi_result_vz_RREADY),
    .RDATA(m_axi_result_vz_RDATA),
    .RLAST(m_axi_result_vz_RLAST),
    .RID(m_axi_result_vz_RID),
    .RUSER(m_axi_result_vz_RUSER),
    .RRESP(m_axi_result_vz_RRESP),
    .BVALID(m_axi_result_vz_BVALID),
    .BREADY(m_axi_result_vz_BREADY),
    .BRESP(m_axi_result_vz_BRESP),
    .BID(m_axi_result_vz_BID),
    .BUSER(m_axi_result_vz_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_vz_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_vz_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_vz_RDATA),
    .I_RID(result_vz_RID),
    .I_RUSER(result_vz_RUSER),
    .I_RRESP(result_vz_RRESP),
    .I_RLAST(result_vz_RLAST),
    .I_AWVALID(result_vz_AWVALID),
    .I_AWREADY(result_vz_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_vz_WVALID),
    .I_WREADY(result_vz_WREADY),
    .I_WDATA(p_vz_gep18_phi_reg_3343),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_vz_BVALID),
    .I_BREADY(result_vz_BREADY),
    .I_BRESP(result_vz_BRESP),
    .I_BID(result_vz_BID),
    .I_BUSER(result_vz_BUSER)
);

astroSim_result_ax_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_AX_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_AX_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_AX_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_AX_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_AX_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_AX_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_AX_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_AX_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_AX_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_AX_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_AX_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_AX_CACHE_VALUE ))
astroSim_result_ax_m_axi_U(
    .AWVALID(m_axi_result_ax_AWVALID),
    .AWREADY(m_axi_result_ax_AWREADY),
    .AWADDR(m_axi_result_ax_AWADDR),
    .AWID(m_axi_result_ax_AWID),
    .AWLEN(m_axi_result_ax_AWLEN),
    .AWSIZE(m_axi_result_ax_AWSIZE),
    .AWBURST(m_axi_result_ax_AWBURST),
    .AWLOCK(m_axi_result_ax_AWLOCK),
    .AWCACHE(m_axi_result_ax_AWCACHE),
    .AWPROT(m_axi_result_ax_AWPROT),
    .AWQOS(m_axi_result_ax_AWQOS),
    .AWREGION(m_axi_result_ax_AWREGION),
    .AWUSER(m_axi_result_ax_AWUSER),
    .WVALID(m_axi_result_ax_WVALID),
    .WREADY(m_axi_result_ax_WREADY),
    .WDATA(m_axi_result_ax_WDATA),
    .WSTRB(m_axi_result_ax_WSTRB),
    .WLAST(m_axi_result_ax_WLAST),
    .WID(m_axi_result_ax_WID),
    .WUSER(m_axi_result_ax_WUSER),
    .ARVALID(m_axi_result_ax_ARVALID),
    .ARREADY(m_axi_result_ax_ARREADY),
    .ARADDR(m_axi_result_ax_ARADDR),
    .ARID(m_axi_result_ax_ARID),
    .ARLEN(m_axi_result_ax_ARLEN),
    .ARSIZE(m_axi_result_ax_ARSIZE),
    .ARBURST(m_axi_result_ax_ARBURST),
    .ARLOCK(m_axi_result_ax_ARLOCK),
    .ARCACHE(m_axi_result_ax_ARCACHE),
    .ARPROT(m_axi_result_ax_ARPROT),
    .ARQOS(m_axi_result_ax_ARQOS),
    .ARREGION(m_axi_result_ax_ARREGION),
    .ARUSER(m_axi_result_ax_ARUSER),
    .RVALID(m_axi_result_ax_RVALID),
    .RREADY(m_axi_result_ax_RREADY),
    .RDATA(m_axi_result_ax_RDATA),
    .RLAST(m_axi_result_ax_RLAST),
    .RID(m_axi_result_ax_RID),
    .RUSER(m_axi_result_ax_RUSER),
    .RRESP(m_axi_result_ax_RRESP),
    .BVALID(m_axi_result_ax_BVALID),
    .BREADY(m_axi_result_ax_BREADY),
    .BRESP(m_axi_result_ax_BRESP),
    .BID(m_axi_result_ax_BID),
    .BUSER(m_axi_result_ax_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_ax_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_ax_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_ax_RDATA),
    .I_RID(result_ax_RID),
    .I_RUSER(result_ax_RUSER),
    .I_RRESP(result_ax_RRESP),
    .I_RLAST(result_ax_RLAST),
    .I_AWVALID(result_ax_AWVALID),
    .I_AWREADY(result_ax_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_ax_WVALID),
    .I_WREADY(result_ax_WREADY),
    .I_WDATA(p_ax_gep21_phi_reg_3348),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_ax_BVALID),
    .I_BREADY(result_ax_BREADY),
    .I_BRESP(result_ax_BRESP),
    .I_BID(result_ax_BID),
    .I_BUSER(result_ax_BUSER)
);

astroSim_result_ay_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_AY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_AY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_AY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_AY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_AY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_AY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_AY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_AY_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_AY_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_AY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_AY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_AY_CACHE_VALUE ))
astroSim_result_ay_m_axi_U(
    .AWVALID(m_axi_result_ay_AWVALID),
    .AWREADY(m_axi_result_ay_AWREADY),
    .AWADDR(m_axi_result_ay_AWADDR),
    .AWID(m_axi_result_ay_AWID),
    .AWLEN(m_axi_result_ay_AWLEN),
    .AWSIZE(m_axi_result_ay_AWSIZE),
    .AWBURST(m_axi_result_ay_AWBURST),
    .AWLOCK(m_axi_result_ay_AWLOCK),
    .AWCACHE(m_axi_result_ay_AWCACHE),
    .AWPROT(m_axi_result_ay_AWPROT),
    .AWQOS(m_axi_result_ay_AWQOS),
    .AWREGION(m_axi_result_ay_AWREGION),
    .AWUSER(m_axi_result_ay_AWUSER),
    .WVALID(m_axi_result_ay_WVALID),
    .WREADY(m_axi_result_ay_WREADY),
    .WDATA(m_axi_result_ay_WDATA),
    .WSTRB(m_axi_result_ay_WSTRB),
    .WLAST(m_axi_result_ay_WLAST),
    .WID(m_axi_result_ay_WID),
    .WUSER(m_axi_result_ay_WUSER),
    .ARVALID(m_axi_result_ay_ARVALID),
    .ARREADY(m_axi_result_ay_ARREADY),
    .ARADDR(m_axi_result_ay_ARADDR),
    .ARID(m_axi_result_ay_ARID),
    .ARLEN(m_axi_result_ay_ARLEN),
    .ARSIZE(m_axi_result_ay_ARSIZE),
    .ARBURST(m_axi_result_ay_ARBURST),
    .ARLOCK(m_axi_result_ay_ARLOCK),
    .ARCACHE(m_axi_result_ay_ARCACHE),
    .ARPROT(m_axi_result_ay_ARPROT),
    .ARQOS(m_axi_result_ay_ARQOS),
    .ARREGION(m_axi_result_ay_ARREGION),
    .ARUSER(m_axi_result_ay_ARUSER),
    .RVALID(m_axi_result_ay_RVALID),
    .RREADY(m_axi_result_ay_RREADY),
    .RDATA(m_axi_result_ay_RDATA),
    .RLAST(m_axi_result_ay_RLAST),
    .RID(m_axi_result_ay_RID),
    .RUSER(m_axi_result_ay_RUSER),
    .RRESP(m_axi_result_ay_RRESP),
    .BVALID(m_axi_result_ay_BVALID),
    .BREADY(m_axi_result_ay_BREADY),
    .BRESP(m_axi_result_ay_BRESP),
    .BID(m_axi_result_ay_BID),
    .BUSER(m_axi_result_ay_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_ay_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_ay_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_ay_RDATA),
    .I_RID(result_ay_RID),
    .I_RUSER(result_ay_RUSER),
    .I_RRESP(result_ay_RRESP),
    .I_RLAST(result_ay_RLAST),
    .I_AWVALID(result_ay_AWVALID),
    .I_AWREADY(result_ay_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_ay_WVALID),
    .I_WREADY(result_ay_WREADY),
    .I_WDATA(p_ay_gep24_phi_reg_3353),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_ay_BVALID),
    .I_BREADY(result_ay_BREADY),
    .I_BRESP(result_ay_BRESP),
    .I_BID(result_ay_BID),
    .I_BUSER(result_ay_BUSER)
);

astroSim_result_az_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_AZ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_AZ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_AZ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_AZ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_AZ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_AZ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_AZ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_AZ_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_AZ_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_AZ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_AZ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_AZ_CACHE_VALUE ))
astroSim_result_az_m_axi_U(
    .AWVALID(m_axi_result_az_AWVALID),
    .AWREADY(m_axi_result_az_AWREADY),
    .AWADDR(m_axi_result_az_AWADDR),
    .AWID(m_axi_result_az_AWID),
    .AWLEN(m_axi_result_az_AWLEN),
    .AWSIZE(m_axi_result_az_AWSIZE),
    .AWBURST(m_axi_result_az_AWBURST),
    .AWLOCK(m_axi_result_az_AWLOCK),
    .AWCACHE(m_axi_result_az_AWCACHE),
    .AWPROT(m_axi_result_az_AWPROT),
    .AWQOS(m_axi_result_az_AWQOS),
    .AWREGION(m_axi_result_az_AWREGION),
    .AWUSER(m_axi_result_az_AWUSER),
    .WVALID(m_axi_result_az_WVALID),
    .WREADY(m_axi_result_az_WREADY),
    .WDATA(m_axi_result_az_WDATA),
    .WSTRB(m_axi_result_az_WSTRB),
    .WLAST(m_axi_result_az_WLAST),
    .WID(m_axi_result_az_WID),
    .WUSER(m_axi_result_az_WUSER),
    .ARVALID(m_axi_result_az_ARVALID),
    .ARREADY(m_axi_result_az_ARREADY),
    .ARADDR(m_axi_result_az_ARADDR),
    .ARID(m_axi_result_az_ARID),
    .ARLEN(m_axi_result_az_ARLEN),
    .ARSIZE(m_axi_result_az_ARSIZE),
    .ARBURST(m_axi_result_az_ARBURST),
    .ARLOCK(m_axi_result_az_ARLOCK),
    .ARCACHE(m_axi_result_az_ARCACHE),
    .ARPROT(m_axi_result_az_ARPROT),
    .ARQOS(m_axi_result_az_ARQOS),
    .ARREGION(m_axi_result_az_ARREGION),
    .ARUSER(m_axi_result_az_ARUSER),
    .RVALID(m_axi_result_az_RVALID),
    .RREADY(m_axi_result_az_RREADY),
    .RDATA(m_axi_result_az_RDATA),
    .RLAST(m_axi_result_az_RLAST),
    .RID(m_axi_result_az_RID),
    .RUSER(m_axi_result_az_RUSER),
    .RRESP(m_axi_result_az_RRESP),
    .BVALID(m_axi_result_az_BVALID),
    .BREADY(m_axi_result_az_BREADY),
    .BRESP(m_axi_result_az_BRESP),
    .BID(m_axi_result_az_BID),
    .BUSER(m_axi_result_az_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_az_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_az_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_az_RDATA),
    .I_RID(result_az_RID),
    .I_RUSER(result_az_RUSER),
    .I_RRESP(result_az_RRESP),
    .I_RLAST(result_az_RLAST),
    .I_AWVALID(result_az_AWVALID),
    .I_AWREADY(result_az_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_az_WVALID),
    .I_WREADY(result_az_WREADY),
    .I_WDATA(p_az_gep27_phi_reg_3358),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_az_BVALID),
    .I_BREADY(result_az_BREADY),
    .I_BRESP(result_az_BRESP),
    .I_BID(result_az_BID),
    .I_BUSER(result_az_BUSER)
);

astroSim_result_m_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_M_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_M_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_M_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_M_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_M_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_M_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_M_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_M_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_RESULT_M_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_RESULT_M_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_M_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_M_CACHE_VALUE ))
astroSim_result_m_m_axi_U(
    .AWVALID(m_axi_result_m_AWVALID),
    .AWREADY(m_axi_result_m_AWREADY),
    .AWADDR(m_axi_result_m_AWADDR),
    .AWID(m_axi_result_m_AWID),
    .AWLEN(m_axi_result_m_AWLEN),
    .AWSIZE(m_axi_result_m_AWSIZE),
    .AWBURST(m_axi_result_m_AWBURST),
    .AWLOCK(m_axi_result_m_AWLOCK),
    .AWCACHE(m_axi_result_m_AWCACHE),
    .AWPROT(m_axi_result_m_AWPROT),
    .AWQOS(m_axi_result_m_AWQOS),
    .AWREGION(m_axi_result_m_AWREGION),
    .AWUSER(m_axi_result_m_AWUSER),
    .WVALID(m_axi_result_m_WVALID),
    .WREADY(m_axi_result_m_WREADY),
    .WDATA(m_axi_result_m_WDATA),
    .WSTRB(m_axi_result_m_WSTRB),
    .WLAST(m_axi_result_m_WLAST),
    .WID(m_axi_result_m_WID),
    .WUSER(m_axi_result_m_WUSER),
    .ARVALID(m_axi_result_m_ARVALID),
    .ARREADY(m_axi_result_m_ARREADY),
    .ARADDR(m_axi_result_m_ARADDR),
    .ARID(m_axi_result_m_ARID),
    .ARLEN(m_axi_result_m_ARLEN),
    .ARSIZE(m_axi_result_m_ARSIZE),
    .ARBURST(m_axi_result_m_ARBURST),
    .ARLOCK(m_axi_result_m_ARLOCK),
    .ARCACHE(m_axi_result_m_ARCACHE),
    .ARPROT(m_axi_result_m_ARPROT),
    .ARQOS(m_axi_result_m_ARQOS),
    .ARREGION(m_axi_result_m_ARREGION),
    .ARUSER(m_axi_result_m_ARUSER),
    .RVALID(m_axi_result_m_RVALID),
    .RREADY(m_axi_result_m_RREADY),
    .RDATA(m_axi_result_m_RDATA),
    .RLAST(m_axi_result_m_RLAST),
    .RID(m_axi_result_m_RID),
    .RUSER(m_axi_result_m_RUSER),
    .RRESP(m_axi_result_m_RRESP),
    .BVALID(m_axi_result_m_BVALID),
    .BREADY(m_axi_result_m_BREADY),
    .BRESP(m_axi_result_m_BRESP),
    .BID(m_axi_result_m_BID),
    .BUSER(m_axi_result_m_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(result_m_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_m_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(result_m_RDATA),
    .I_RID(result_m_RID),
    .I_RUSER(result_m_RUSER),
    .I_RRESP(result_m_RRESP),
    .I_RLAST(result_m_RLAST),
    .I_AWVALID(result_m_AWVALID),
    .I_AWREADY(result_m_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd6),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_m_WVALID),
    .I_WREADY(result_m_WREADY),
    .I_WDATA(p_m_gep30_phi_reg_3363),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(result_m_BVALID),
    .I_BREADY(result_m_BREADY),
    .I_BRESP(result_m_BRESP),
    .I_BID(result_m_BID),
    .I_BUSER(result_m_BUSER)
);

janus_step grp_janus_step_fu_960(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_janus_step_fu_960_ap_start),
    .ap_done(grp_janus_step_fu_960_ap_done),
    .ap_idle(grp_janus_step_fu_960_ap_idle),
    .ap_ready(grp_janus_step_fu_960_ap_ready),
    .p_int_0_x_read(grp_janus_step_fu_960_p_int_0_x_read),
    .p_int_1_x_read(grp_janus_step_fu_960_p_int_1_x_read),
    .p_int_2_x_read(grp_janus_step_fu_960_p_int_2_x_read),
    .p_int_3_x_read(grp_janus_step_fu_960_p_int_3_x_read),
    .p_int_4_x_read(grp_janus_step_fu_960_p_int_4_x_read),
    .p_int_5_x_read(grp_janus_step_fu_960_p_int_5_x_read),
    .p_int_6_x_read(grp_janus_step_fu_960_p_int_6_x_read),
    .p_int_7_x_read(grp_janus_step_fu_960_p_int_7_x_read),
    .p_int_8_x_read(grp_janus_step_fu_960_p_int_8_x_read),
    .p_int_0_y_read(grp_janus_step_fu_960_p_int_0_y_read),
    .p_int_1_y_read(grp_janus_step_fu_960_p_int_1_y_read),
    .p_int_2_y_read(grp_janus_step_fu_960_p_int_2_y_read),
    .p_int_3_y_read(grp_janus_step_fu_960_p_int_3_y_read),
    .p_int_4_y_read(grp_janus_step_fu_960_p_int_4_y_read),
    .p_int_5_y_read(grp_janus_step_fu_960_p_int_5_y_read),
    .p_int_6_y_read(grp_janus_step_fu_960_p_int_6_y_read),
    .p_int_7_y_read(grp_janus_step_fu_960_p_int_7_y_read),
    .p_int_8_y_read(grp_janus_step_fu_960_p_int_8_y_read),
    .p_int_0_z_read(grp_janus_step_fu_960_p_int_0_z_read),
    .p_int_1_z_read(grp_janus_step_fu_960_p_int_1_z_read),
    .p_int_2_z_read(grp_janus_step_fu_960_p_int_2_z_read),
    .p_int_3_z_read(grp_janus_step_fu_960_p_int_3_z_read),
    .p_int_4_z_read(grp_janus_step_fu_960_p_int_4_z_read),
    .p_int_5_z_read(grp_janus_step_fu_960_p_int_5_z_read),
    .p_int_6_z_read(grp_janus_step_fu_960_p_int_6_z_read),
    .p_int_7_z_read(grp_janus_step_fu_960_p_int_7_z_read),
    .p_int_8_z_read(grp_janus_step_fu_960_p_int_8_z_read),
    .p_int_0_vx_read(grp_janus_step_fu_960_p_int_0_vx_read),
    .p_int_1_vx_read(grp_janus_step_fu_960_p_int_1_vx_read),
    .p_int_2_vx_read(grp_janus_step_fu_960_p_int_2_vx_read),
    .p_int_3_vx_read(grp_janus_step_fu_960_p_int_3_vx_read),
    .p_int_4_vx_read(grp_janus_step_fu_960_p_int_4_vx_read),
    .p_int_5_vx_read(grp_janus_step_fu_960_p_int_5_vx_read),
    .p_int_6_vx_read(grp_janus_step_fu_960_p_int_6_vx_read),
    .p_int_7_vx_read(grp_janus_step_fu_960_p_int_7_vx_read),
    .p_int_8_vx_read(grp_janus_step_fu_960_p_int_8_vx_read),
    .p_int_0_vy_read(grp_janus_step_fu_960_p_int_0_vy_read),
    .p_int_1_vy_read(grp_janus_step_fu_960_p_int_1_vy_read),
    .p_int_2_vy_read(grp_janus_step_fu_960_p_int_2_vy_read),
    .p_int_3_vy_read(grp_janus_step_fu_960_p_int_3_vy_read),
    .p_int_4_vy_read(grp_janus_step_fu_960_p_int_4_vy_read),
    .p_int_5_vy_read(grp_janus_step_fu_960_p_int_5_vy_read),
    .p_int_6_vy_read(grp_janus_step_fu_960_p_int_6_vy_read),
    .p_int_7_vy_read(grp_janus_step_fu_960_p_int_7_vy_read),
    .p_int_8_vy_read(grp_janus_step_fu_960_p_int_8_vy_read),
    .p_int_0_vz_read(grp_janus_step_fu_960_p_int_0_vz_read),
    .p_int_1_vz_read(grp_janus_step_fu_960_p_int_1_vz_read),
    .p_int_2_vz_read(grp_janus_step_fu_960_p_int_2_vz_read),
    .p_int_3_vz_read(grp_janus_step_fu_960_p_int_3_vz_read),
    .p_int_4_vz_read(grp_janus_step_fu_960_p_int_4_vz_read),
    .p_int_5_vz_read(grp_janus_step_fu_960_p_int_5_vz_read),
    .p_int_6_vz_read(grp_janus_step_fu_960_p_int_6_vz_read),
    .p_int_7_vz_read(grp_janus_step_fu_960_p_int_7_vz_read),
    .p_int_8_vz_read(grp_janus_step_fu_960_p_int_8_vz_read),
    .p_x_0_i(p_x_0),
    .p_x_0_o(grp_janus_step_fu_960_p_x_0_o),
    .p_x_0_o_ap_vld(grp_janus_step_fu_960_p_x_0_o_ap_vld),
    .p_y_0_i(p_y_0),
    .p_y_0_o(grp_janus_step_fu_960_p_y_0_o),
    .p_y_0_o_ap_vld(grp_janus_step_fu_960_p_y_0_o_ap_vld),
    .p_z_0_i(p_z_0),
    .p_z_0_o(grp_janus_step_fu_960_p_z_0_o),
    .p_z_0_o_ap_vld(grp_janus_step_fu_960_p_z_0_o_ap_vld),
    .p_vx_0(grp_janus_step_fu_960_p_vx_0),
    .p_vx_0_ap_vld(grp_janus_step_fu_960_p_vx_0_ap_vld),
    .p_vy_0(grp_janus_step_fu_960_p_vy_0),
    .p_vy_0_ap_vld(grp_janus_step_fu_960_p_vy_0_ap_vld),
    .p_vz_0(grp_janus_step_fu_960_p_vz_0),
    .p_vz_0_ap_vld(grp_janus_step_fu_960_p_vz_0_ap_vld),
    .p_x_1_i(p_x_1),
    .p_x_1_o(grp_janus_step_fu_960_p_x_1_o),
    .p_x_1_o_ap_vld(grp_janus_step_fu_960_p_x_1_o_ap_vld),
    .p_y_1_i(p_y_1),
    .p_y_1_o(grp_janus_step_fu_960_p_y_1_o),
    .p_y_1_o_ap_vld(grp_janus_step_fu_960_p_y_1_o_ap_vld),
    .p_z_1_i(p_z_1),
    .p_z_1_o(grp_janus_step_fu_960_p_z_1_o),
    .p_z_1_o_ap_vld(grp_janus_step_fu_960_p_z_1_o_ap_vld),
    .p_vx_1(grp_janus_step_fu_960_p_vx_1),
    .p_vx_1_ap_vld(grp_janus_step_fu_960_p_vx_1_ap_vld),
    .p_vy_1(grp_janus_step_fu_960_p_vy_1),
    .p_vy_1_ap_vld(grp_janus_step_fu_960_p_vy_1_ap_vld),
    .p_vz_1(grp_janus_step_fu_960_p_vz_1),
    .p_vz_1_ap_vld(grp_janus_step_fu_960_p_vz_1_ap_vld),
    .p_x_2_i(p_x_2),
    .p_x_2_o(grp_janus_step_fu_960_p_x_2_o),
    .p_x_2_o_ap_vld(grp_janus_step_fu_960_p_x_2_o_ap_vld),
    .p_y_2_i(p_y_2),
    .p_y_2_o(grp_janus_step_fu_960_p_y_2_o),
    .p_y_2_o_ap_vld(grp_janus_step_fu_960_p_y_2_o_ap_vld),
    .p_z_2_i(p_z_2),
    .p_z_2_o(grp_janus_step_fu_960_p_z_2_o),
    .p_z_2_o_ap_vld(grp_janus_step_fu_960_p_z_2_o_ap_vld),
    .p_vx_2(grp_janus_step_fu_960_p_vx_2),
    .p_vx_2_ap_vld(grp_janus_step_fu_960_p_vx_2_ap_vld),
    .p_vy_2(grp_janus_step_fu_960_p_vy_2),
    .p_vy_2_ap_vld(grp_janus_step_fu_960_p_vy_2_ap_vld),
    .p_vz_2(grp_janus_step_fu_960_p_vz_2),
    .p_vz_2_ap_vld(grp_janus_step_fu_960_p_vz_2_ap_vld),
    .p_x_3_i(p_x_3),
    .p_x_3_o(grp_janus_step_fu_960_p_x_3_o),
    .p_x_3_o_ap_vld(grp_janus_step_fu_960_p_x_3_o_ap_vld),
    .p_y_3_i(p_y_3),
    .p_y_3_o(grp_janus_step_fu_960_p_y_3_o),
    .p_y_3_o_ap_vld(grp_janus_step_fu_960_p_y_3_o_ap_vld),
    .p_z_3_i(p_z_3),
    .p_z_3_o(grp_janus_step_fu_960_p_z_3_o),
    .p_z_3_o_ap_vld(grp_janus_step_fu_960_p_z_3_o_ap_vld),
    .p_vx_3(grp_janus_step_fu_960_p_vx_3),
    .p_vx_3_ap_vld(grp_janus_step_fu_960_p_vx_3_ap_vld),
    .p_vy_3(grp_janus_step_fu_960_p_vy_3),
    .p_vy_3_ap_vld(grp_janus_step_fu_960_p_vy_3_ap_vld),
    .p_vz_3(grp_janus_step_fu_960_p_vz_3),
    .p_vz_3_ap_vld(grp_janus_step_fu_960_p_vz_3_ap_vld),
    .p_x_4_i(p_x_4),
    .p_x_4_o(grp_janus_step_fu_960_p_x_4_o),
    .p_x_4_o_ap_vld(grp_janus_step_fu_960_p_x_4_o_ap_vld),
    .p_y_4_i(p_y_4),
    .p_y_4_o(grp_janus_step_fu_960_p_y_4_o),
    .p_y_4_o_ap_vld(grp_janus_step_fu_960_p_y_4_o_ap_vld),
    .p_z_4_i(p_z_4),
    .p_z_4_o(grp_janus_step_fu_960_p_z_4_o),
    .p_z_4_o_ap_vld(grp_janus_step_fu_960_p_z_4_o_ap_vld),
    .p_vx_4(grp_janus_step_fu_960_p_vx_4),
    .p_vx_4_ap_vld(grp_janus_step_fu_960_p_vx_4_ap_vld),
    .p_vy_4(grp_janus_step_fu_960_p_vy_4),
    .p_vy_4_ap_vld(grp_janus_step_fu_960_p_vy_4_ap_vld),
    .p_vz_4(grp_janus_step_fu_960_p_vz_4),
    .p_vz_4_ap_vld(grp_janus_step_fu_960_p_vz_4_ap_vld),
    .p_x_5_i(p_x_5),
    .p_x_5_o(grp_janus_step_fu_960_p_x_5_o),
    .p_x_5_o_ap_vld(grp_janus_step_fu_960_p_x_5_o_ap_vld),
    .p_y_5_i(p_y_5),
    .p_y_5_o(grp_janus_step_fu_960_p_y_5_o),
    .p_y_5_o_ap_vld(grp_janus_step_fu_960_p_y_5_o_ap_vld),
    .p_z_5_i(p_z_5),
    .p_z_5_o(grp_janus_step_fu_960_p_z_5_o),
    .p_z_5_o_ap_vld(grp_janus_step_fu_960_p_z_5_o_ap_vld),
    .p_vx_5(grp_janus_step_fu_960_p_vx_5),
    .p_vx_5_ap_vld(grp_janus_step_fu_960_p_vx_5_ap_vld),
    .p_vy_5(grp_janus_step_fu_960_p_vy_5),
    .p_vy_5_ap_vld(grp_janus_step_fu_960_p_vy_5_ap_vld),
    .p_vz_5(grp_janus_step_fu_960_p_vz_5),
    .p_vz_5_ap_vld(grp_janus_step_fu_960_p_vz_5_ap_vld),
    .p_x_6_i(p_x_6),
    .p_x_6_o(grp_janus_step_fu_960_p_x_6_o),
    .p_x_6_o_ap_vld(grp_janus_step_fu_960_p_x_6_o_ap_vld),
    .p_y_6_i(p_y_6),
    .p_y_6_o(grp_janus_step_fu_960_p_y_6_o),
    .p_y_6_o_ap_vld(grp_janus_step_fu_960_p_y_6_o_ap_vld),
    .p_z_6_i(p_z_6),
    .p_z_6_o(grp_janus_step_fu_960_p_z_6_o),
    .p_z_6_o_ap_vld(grp_janus_step_fu_960_p_z_6_o_ap_vld),
    .p_vx_6(grp_janus_step_fu_960_p_vx_6),
    .p_vx_6_ap_vld(grp_janus_step_fu_960_p_vx_6_ap_vld),
    .p_vy_6(grp_janus_step_fu_960_p_vy_6),
    .p_vy_6_ap_vld(grp_janus_step_fu_960_p_vy_6_ap_vld),
    .p_vz_6(grp_janus_step_fu_960_p_vz_6),
    .p_vz_6_ap_vld(grp_janus_step_fu_960_p_vz_6_ap_vld),
    .p_x_7_i(p_x_7),
    .p_x_7_o(grp_janus_step_fu_960_p_x_7_o),
    .p_x_7_o_ap_vld(grp_janus_step_fu_960_p_x_7_o_ap_vld),
    .p_y_7_i(p_y_7),
    .p_y_7_o(grp_janus_step_fu_960_p_y_7_o),
    .p_y_7_o_ap_vld(grp_janus_step_fu_960_p_y_7_o_ap_vld),
    .p_z_7_i(p_z_7),
    .p_z_7_o(grp_janus_step_fu_960_p_z_7_o),
    .p_z_7_o_ap_vld(grp_janus_step_fu_960_p_z_7_o_ap_vld),
    .p_vx_7(grp_janus_step_fu_960_p_vx_7),
    .p_vx_7_ap_vld(grp_janus_step_fu_960_p_vx_7_ap_vld),
    .p_vy_7(grp_janus_step_fu_960_p_vy_7),
    .p_vy_7_ap_vld(grp_janus_step_fu_960_p_vy_7_ap_vld),
    .p_vz_7(grp_janus_step_fu_960_p_vz_7),
    .p_vz_7_ap_vld(grp_janus_step_fu_960_p_vz_7_ap_vld),
    .p_x_8_i(p_x_8),
    .p_x_8_o(grp_janus_step_fu_960_p_x_8_o),
    .p_x_8_o_ap_vld(grp_janus_step_fu_960_p_x_8_o_ap_vld),
    .p_y_8_i(p_y_8),
    .p_y_8_o(grp_janus_step_fu_960_p_y_8_o),
    .p_y_8_o_ap_vld(grp_janus_step_fu_960_p_y_8_o_ap_vld),
    .p_z_8_i(p_z_8),
    .p_z_8_o(grp_janus_step_fu_960_p_z_8_o),
    .p_z_8_o_ap_vld(grp_janus_step_fu_960_p_z_8_o_ap_vld),
    .p_vx_8(grp_janus_step_fu_960_p_vx_8),
    .p_vx_8_ap_vld(grp_janus_step_fu_960_p_vx_8_ap_vld),
    .p_vy_8(grp_janus_step_fu_960_p_vy_8),
    .p_vy_8_ap_vld(grp_janus_step_fu_960_p_vy_8_ap_vld),
    .p_vz_8(grp_janus_step_fu_960_p_vz_8),
    .p_vz_8_ap_vld(grp_janus_step_fu_960_p_vz_8_ap_vld),
    .p_m_1(p_m_1),
    .p_m_2(p_m_2),
    .p_m_3(p_m_3),
    .p_m_4(p_m_4),
    .p_m_5(p_m_5),
    .p_ax_0_i(p_ax_0),
    .p_ax_0_o(grp_janus_step_fu_960_p_ax_0_o),
    .p_ax_0_o_ap_vld(grp_janus_step_fu_960_p_ax_0_o_ap_vld),
    .p_ay_0_i(p_ay_0),
    .p_ay_0_o(grp_janus_step_fu_960_p_ay_0_o),
    .p_ay_0_o_ap_vld(grp_janus_step_fu_960_p_ay_0_o_ap_vld),
    .p_az_0_i(p_az_0),
    .p_az_0_o(grp_janus_step_fu_960_p_az_0_o),
    .p_az_0_o_ap_vld(grp_janus_step_fu_960_p_az_0_o_ap_vld),
    .p_m_0(p_m_0),
    .p_ax_1_i(p_ax_1),
    .p_ax_1_o(grp_janus_step_fu_960_p_ax_1_o),
    .p_ax_1_o_ap_vld(grp_janus_step_fu_960_p_ax_1_o_ap_vld),
    .p_ay_1_i(p_ay_1),
    .p_ay_1_o(grp_janus_step_fu_960_p_ay_1_o),
    .p_ay_1_o_ap_vld(grp_janus_step_fu_960_p_ay_1_o_ap_vld),
    .p_az_1_i(p_az_1),
    .p_az_1_o(grp_janus_step_fu_960_p_az_1_o),
    .p_az_1_o_ap_vld(grp_janus_step_fu_960_p_az_1_o_ap_vld),
    .p_ax_2_i(p_ax_2),
    .p_ax_2_o(grp_janus_step_fu_960_p_ax_2_o),
    .p_ax_2_o_ap_vld(grp_janus_step_fu_960_p_ax_2_o_ap_vld),
    .p_ay_2_i(p_ay_2),
    .p_ay_2_o(grp_janus_step_fu_960_p_ay_2_o),
    .p_ay_2_o_ap_vld(grp_janus_step_fu_960_p_ay_2_o_ap_vld),
    .p_az_2_i(p_az_2),
    .p_az_2_o(grp_janus_step_fu_960_p_az_2_o),
    .p_az_2_o_ap_vld(grp_janus_step_fu_960_p_az_2_o_ap_vld),
    .p_ax_3_i(p_ax_3),
    .p_ax_3_o(grp_janus_step_fu_960_p_ax_3_o),
    .p_ax_3_o_ap_vld(grp_janus_step_fu_960_p_ax_3_o_ap_vld),
    .p_ay_3_i(p_ay_3),
    .p_ay_3_o(grp_janus_step_fu_960_p_ay_3_o),
    .p_ay_3_o_ap_vld(grp_janus_step_fu_960_p_ay_3_o_ap_vld),
    .p_az_3_i(p_az_3),
    .p_az_3_o(grp_janus_step_fu_960_p_az_3_o),
    .p_az_3_o_ap_vld(grp_janus_step_fu_960_p_az_3_o_ap_vld),
    .p_ax_4_i(p_ax_4),
    .p_ax_4_o(grp_janus_step_fu_960_p_ax_4_o),
    .p_ax_4_o_ap_vld(grp_janus_step_fu_960_p_ax_4_o_ap_vld),
    .p_ay_4_i(p_ay_4),
    .p_ay_4_o(grp_janus_step_fu_960_p_ay_4_o),
    .p_ay_4_o_ap_vld(grp_janus_step_fu_960_p_ay_4_o_ap_vld),
    .p_az_4_i(p_az_4),
    .p_az_4_o(grp_janus_step_fu_960_p_az_4_o),
    .p_az_4_o_ap_vld(grp_janus_step_fu_960_p_az_4_o_ap_vld),
    .p_ax_5_i(p_ax_5),
    .p_ax_5_o(grp_janus_step_fu_960_p_ax_5_o),
    .p_ax_5_o_ap_vld(grp_janus_step_fu_960_p_ax_5_o_ap_vld),
    .p_ay_5_i(p_ay_5),
    .p_ay_5_o(grp_janus_step_fu_960_p_ay_5_o),
    .p_ay_5_o_ap_vld(grp_janus_step_fu_960_p_ay_5_o_ap_vld),
    .p_az_5_i(p_az_5),
    .p_az_5_o(grp_janus_step_fu_960_p_az_5_o),
    .p_az_5_o_ap_vld(grp_janus_step_fu_960_p_az_5_o_ap_vld),
    .ap_return_0(grp_janus_step_fu_960_ap_return_0),
    .ap_return_1(grp_janus_step_fu_960_ap_return_1),
    .ap_return_2(grp_janus_step_fu_960_ap_return_2),
    .ap_return_3(grp_janus_step_fu_960_ap_return_3),
    .ap_return_4(grp_janus_step_fu_960_ap_return_4),
    .ap_return_5(grp_janus_step_fu_960_ap_return_5),
    .ap_return_6(grp_janus_step_fu_960_ap_return_6),
    .ap_return_7(grp_janus_step_fu_960_ap_return_7),
    .ap_return_8(grp_janus_step_fu_960_ap_return_8),
    .ap_return_9(grp_janus_step_fu_960_ap_return_9),
    .ap_return_10(grp_janus_step_fu_960_ap_return_10),
    .ap_return_11(grp_janus_step_fu_960_ap_return_11),
    .ap_return_12(grp_janus_step_fu_960_ap_return_12),
    .ap_return_13(grp_janus_step_fu_960_ap_return_13),
    .ap_return_14(grp_janus_step_fu_960_ap_return_14),
    .ap_return_15(grp_janus_step_fu_960_ap_return_15),
    .ap_return_16(grp_janus_step_fu_960_ap_return_16),
    .ap_return_17(grp_janus_step_fu_960_ap_return_17),
    .ap_return_18(grp_janus_step_fu_960_ap_return_18),
    .ap_return_19(grp_janus_step_fu_960_ap_return_19),
    .ap_return_20(grp_janus_step_fu_960_ap_return_20),
    .ap_return_21(grp_janus_step_fu_960_ap_return_21),
    .ap_return_22(grp_janus_step_fu_960_ap_return_22),
    .ap_return_23(grp_janus_step_fu_960_ap_return_23),
    .ap_return_24(grp_janus_step_fu_960_ap_return_24),
    .ap_return_25(grp_janus_step_fu_960_ap_return_25),
    .ap_return_26(grp_janus_step_fu_960_ap_return_26),
    .ap_return_27(grp_janus_step_fu_960_ap_return_27),
    .ap_return_28(grp_janus_step_fu_960_ap_return_28),
    .ap_return_29(grp_janus_step_fu_960_ap_return_29),
    .ap_return_30(grp_janus_step_fu_960_ap_return_30),
    .ap_return_31(grp_janus_step_fu_960_ap_return_31),
    .ap_return_32(grp_janus_step_fu_960_ap_return_32),
    .ap_return_33(grp_janus_step_fu_960_ap_return_33),
    .ap_return_34(grp_janus_step_fu_960_ap_return_34),
    .ap_return_35(grp_janus_step_fu_960_ap_return_35),
    .ap_return_36(grp_janus_step_fu_960_ap_return_36),
    .ap_return_37(grp_janus_step_fu_960_ap_return_37),
    .ap_return_38(grp_janus_step_fu_960_ap_return_38),
    .ap_return_39(grp_janus_step_fu_960_ap_return_39),
    .ap_return_40(grp_janus_step_fu_960_ap_return_40),
    .ap_return_41(grp_janus_step_fu_960_ap_return_41),
    .ap_return_42(grp_janus_step_fu_960_ap_return_42),
    .ap_return_43(grp_janus_step_fu_960_ap_return_43),
    .ap_return_44(grp_janus_step_fu_960_ap_return_44),
    .ap_return_45(grp_janus_step_fu_960_ap_return_45),
    .ap_return_46(grp_janus_step_fu_960_ap_return_46),
    .ap_return_47(grp_janus_step_fu_960_ap_return_47),
    .ap_return_48(grp_janus_step_fu_960_ap_return_48),
    .ap_return_49(grp_janus_step_fu_960_ap_return_49),
    .ap_return_50(grp_janus_step_fu_960_ap_return_50),
    .ap_return_51(grp_janus_step_fu_960_ap_return_51),
    .ap_return_52(grp_janus_step_fu_960_ap_return_52),
    .ap_return_53(grp_janus_step_fu_960_ap_return_53)
);

to_int grp_to_int_fu_1252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_to_int_fu_1252_ap_start),
    .ap_done(grp_to_int_fu_1252_ap_done),
    .ap_idle(grp_to_int_fu_1252_ap_idle),
    .ap_ready(grp_to_int_fu_1252_ap_ready),
    .p_x_6(p_x_6),
    .p_x_0(p_x_0),
    .p_x_3(p_x_3),
    .p_y_6(p_y_6),
    .p_y_0(p_y_0),
    .p_y_3(p_y_3),
    .p_z_6(p_z_6),
    .p_z_0(p_z_0),
    .p_z_3(p_z_3),
    .p_vx_6(p_vx_6),
    .p_vx_0(p_vx_0),
    .p_vx_3(p_vx_3),
    .p_vy_6(p_vy_6),
    .p_vy_0(p_vy_0),
    .p_vy_3(p_vy_3),
    .p_vz_6(p_vz_6),
    .p_vz_0(p_vz_0),
    .p_vz_3(p_vz_3),
    .p_x_7(p_x_7),
    .p_x_1(p_x_1),
    .p_x_4(p_x_4),
    .p_y_7(p_y_7),
    .p_y_1(p_y_1),
    .p_y_4(p_y_4),
    .p_z_7(p_z_7),
    .p_z_1(p_z_1),
    .p_z_4(p_z_4),
    .p_vx_7(p_vx_7),
    .p_vx_1(p_vx_1),
    .p_vx_4(p_vx_4),
    .p_vy_7(p_vy_7),
    .p_vy_1(p_vy_1),
    .p_vy_4(p_vy_4),
    .p_vz_7(p_vz_7),
    .p_vz_1(p_vz_1),
    .p_vz_4(p_vz_4),
    .p_x_8(p_x_8),
    .p_x_2(p_x_2),
    .p_x_5(p_x_5),
    .p_y_8(p_y_8),
    .p_y_2(p_y_2),
    .p_y_5(p_y_5),
    .p_z_8(p_z_8),
    .p_z_2(p_z_2),
    .p_z_5(p_z_5),
    .p_vx_8(p_vx_8),
    .p_vx_2(p_vx_2),
    .p_vx_5(p_vx_5),
    .p_vy_8(p_vy_8),
    .p_vy_2(p_vy_2),
    .p_vy_5(p_vy_5),
    .p_vz_8(p_vz_8),
    .p_vz_2(p_vz_2),
    .p_vz_5(p_vz_5),
    .ap_return_0(grp_to_int_fu_1252_ap_return_0),
    .ap_return_1(grp_to_int_fu_1252_ap_return_1),
    .ap_return_2(grp_to_int_fu_1252_ap_return_2),
    .ap_return_3(grp_to_int_fu_1252_ap_return_3),
    .ap_return_4(grp_to_int_fu_1252_ap_return_4),
    .ap_return_5(grp_to_int_fu_1252_ap_return_5),
    .ap_return_6(grp_to_int_fu_1252_ap_return_6),
    .ap_return_7(grp_to_int_fu_1252_ap_return_7),
    .ap_return_8(grp_to_int_fu_1252_ap_return_8),
    .ap_return_9(grp_to_int_fu_1252_ap_return_9),
    .ap_return_10(grp_to_int_fu_1252_ap_return_10),
    .ap_return_11(grp_to_int_fu_1252_ap_return_11),
    .ap_return_12(grp_to_int_fu_1252_ap_return_12),
    .ap_return_13(grp_to_int_fu_1252_ap_return_13),
    .ap_return_14(grp_to_int_fu_1252_ap_return_14),
    .ap_return_15(grp_to_int_fu_1252_ap_return_15),
    .ap_return_16(grp_to_int_fu_1252_ap_return_16),
    .ap_return_17(grp_to_int_fu_1252_ap_return_17),
    .ap_return_18(grp_to_int_fu_1252_ap_return_18),
    .ap_return_19(grp_to_int_fu_1252_ap_return_19),
    .ap_return_20(grp_to_int_fu_1252_ap_return_20),
    .ap_return_21(grp_to_int_fu_1252_ap_return_21),
    .ap_return_22(grp_to_int_fu_1252_ap_return_22),
    .ap_return_23(grp_to_int_fu_1252_ap_return_23),
    .ap_return_24(grp_to_int_fu_1252_ap_return_24),
    .ap_return_25(grp_to_int_fu_1252_ap_return_25),
    .ap_return_26(grp_to_int_fu_1252_ap_return_26),
    .ap_return_27(grp_to_int_fu_1252_ap_return_27),
    .ap_return_28(grp_to_int_fu_1252_ap_return_28),
    .ap_return_29(grp_to_int_fu_1252_ap_return_29),
    .ap_return_30(grp_to_int_fu_1252_ap_return_30),
    .ap_return_31(grp_to_int_fu_1252_ap_return_31),
    .ap_return_32(grp_to_int_fu_1252_ap_return_32),
    .ap_return_33(grp_to_int_fu_1252_ap_return_33),
    .ap_return_34(grp_to_int_fu_1252_ap_return_34),
    .ap_return_35(grp_to_int_fu_1252_ap_return_35),
    .ap_return_36(grp_to_int_fu_1252_ap_return_36),
    .ap_return_37(grp_to_int_fu_1252_ap_return_37),
    .ap_return_38(grp_to_int_fu_1252_ap_return_38),
    .ap_return_39(grp_to_int_fu_1252_ap_return_39),
    .ap_return_40(grp_to_int_fu_1252_ap_return_40),
    .ap_return_41(grp_to_int_fu_1252_ap_return_41),
    .ap_return_42(grp_to_int_fu_1252_ap_return_42),
    .ap_return_43(grp_to_int_fu_1252_ap_return_43),
    .ap_return_44(grp_to_int_fu_1252_ap_return_44),
    .ap_return_45(grp_to_int_fu_1252_ap_return_45),
    .ap_return_46(grp_to_int_fu_1252_ap_return_46),
    .ap_return_47(grp_to_int_fu_1252_ap_return_47),
    .ap_return_48(grp_to_int_fu_1252_ap_return_48),
    .ap_return_49(grp_to_int_fu_1252_ap_return_49),
    .ap_return_50(grp_to_int_fu_1252_ap_return_50),
    .ap_return_51(grp_to_int_fu_1252_ap_return_51),
    .ap_return_52(grp_to_int_fu_1252_ap_return_52),
    .ap_return_53(grp_to_int_fu_1252_ap_return_53)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state23))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state23))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state23 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_janus_step_fu_960_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21))) begin
            ap_reg_grp_janus_step_fu_960_ap_start <= 1'b1;
        end else if ((1'b1 == grp_janus_step_fu_960_ap_ready)) begin
            ap_reg_grp_janus_step_fu_960_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_to_int_fu_1252_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_to_int_fu_1252_ap_start <= 1'b1;
        end else if ((1'b1 == grp_to_int_fu_1252_ap_ready)) begin
            ap_reg_grp_to_int_fu_1252_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_ax_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_ax_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_ax_AWREADY))) begin
                ap_reg_ioackin_result_ax_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_ax_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_ax_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_ax_WREADY))) begin
                ap_reg_ioackin_result_ax_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_ay_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_ay_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_ay_AWREADY))) begin
                ap_reg_ioackin_result_ay_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_ay_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_ay_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_ay_WREADY))) begin
                ap_reg_ioackin_result_ay_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_az_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_az_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_az_AWREADY))) begin
                ap_reg_ioackin_result_az_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_az_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_az_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_az_WREADY))) begin
                ap_reg_ioackin_result_az_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_m_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_m_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_m_AWREADY))) begin
                ap_reg_ioackin_result_m_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_m_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_m_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_m_WREADY))) begin
                ap_reg_ioackin_result_m_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vx_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_vx_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_vx_AWREADY))) begin
                ap_reg_ioackin_result_vx_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vx_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_vx_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_vx_WREADY))) begin
                ap_reg_ioackin_result_vx_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vy_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_vy_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_vy_AWREADY))) begin
                ap_reg_ioackin_result_vy_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vy_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_vy_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_vy_WREADY))) begin
                ap_reg_ioackin_result_vy_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vz_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_vz_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_vz_AWREADY))) begin
                ap_reg_ioackin_result_vz_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_vz_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_vz_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_vz_WREADY))) begin
                ap_reg_ioackin_result_vz_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_x_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_x_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_x_AWREADY))) begin
                ap_reg_ioackin_result_x_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_x_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_x_WREADY <= 1'b0;
            end else if (((1'b1 == result_x_WREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_result_x_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_y_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_y_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_y_AWREADY))) begin
                ap_reg_ioackin_result_y_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_y_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_y_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_y_WREADY))) begin
                ap_reg_ioackin_result_y_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_z_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
            if (~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) begin
                ap_reg_ioackin_result_z_AWREADY <= 1'b0;
            end else if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == result_z_AWREADY))) begin
                ap_reg_ioackin_result_z_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_result_z_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_10620 == 1'b1)) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_result_z_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b1 == result_z_WREADY))) begin
                ap_reg_ioackin_result_z_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)))) begin
        indvar_reg_949 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond1_fu_2078_p2))) begin
        indvar_reg_949 <= indvar_next_fu_2084_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_1_reg_648 <= grp_janus_step_fu_960_ap_return_28;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_1_reg_648 <= grp_to_int_fu_1252_ap_return_28;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_2_reg_638 <= grp_janus_step_fu_960_ap_return_29;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_2_reg_638 <= grp_to_int_fu_1252_ap_return_29;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_3_reg_628 <= grp_janus_step_fu_960_ap_return_30;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_3_reg_628 <= grp_to_int_fu_1252_ap_return_30;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_4_reg_618 <= grp_janus_step_fu_960_ap_return_31;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_4_reg_618 <= grp_to_int_fu_1252_ap_return_31;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_5_reg_608 <= grp_janus_step_fu_960_ap_return_32;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_5_reg_608 <= grp_to_int_fu_1252_ap_return_32;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_6_reg_598 <= grp_janus_step_fu_960_ap_return_33;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_6_reg_598 <= grp_to_int_fu_1252_ap_return_33;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_7_reg_588 <= grp_janus_step_fu_960_ap_return_34;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_7_reg_588 <= grp_to_int_fu_1252_ap_return_34;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_8_reg_578 <= grp_janus_step_fu_960_ap_return_35;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_8_reg_578 <= grp_to_int_fu_1252_ap_return_35;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vx_reg_658 <= grp_janus_step_fu_960_ap_return_27;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vx_reg_658 <= grp_to_int_fu_1252_ap_return_27;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_1_reg_558 <= grp_janus_step_fu_960_ap_return_37;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_1_reg_558 <= grp_to_int_fu_1252_ap_return_37;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_2_reg_548 <= grp_janus_step_fu_960_ap_return_38;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_2_reg_548 <= grp_to_int_fu_1252_ap_return_38;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_3_reg_538 <= grp_janus_step_fu_960_ap_return_39;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_3_reg_538 <= grp_to_int_fu_1252_ap_return_39;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_4_reg_528 <= grp_janus_step_fu_960_ap_return_40;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_4_reg_528 <= grp_to_int_fu_1252_ap_return_40;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_5_reg_518 <= grp_janus_step_fu_960_ap_return_41;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_5_reg_518 <= grp_to_int_fu_1252_ap_return_41;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_6_reg_508 <= grp_janus_step_fu_960_ap_return_42;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_6_reg_508 <= grp_to_int_fu_1252_ap_return_42;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_7_reg_498 <= grp_janus_step_fu_960_ap_return_43;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_7_reg_498 <= grp_to_int_fu_1252_ap_return_43;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_8_reg_488 <= grp_janus_step_fu_960_ap_return_44;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_8_reg_488 <= grp_to_int_fu_1252_ap_return_44;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vy_reg_568 <= grp_janus_step_fu_960_ap_return_36;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vy_reg_568 <= grp_to_int_fu_1252_ap_return_36;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_1_reg_468 <= grp_janus_step_fu_960_ap_return_46;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_1_reg_468 <= grp_to_int_fu_1252_ap_return_46;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_2_reg_458 <= grp_janus_step_fu_960_ap_return_47;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_2_reg_458 <= grp_to_int_fu_1252_ap_return_47;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_3_reg_448 <= grp_janus_step_fu_960_ap_return_48;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_3_reg_448 <= grp_to_int_fu_1252_ap_return_48;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_4_reg_438 <= grp_janus_step_fu_960_ap_return_49;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_4_reg_438 <= grp_to_int_fu_1252_ap_return_49;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_5_reg_428 <= grp_janus_step_fu_960_ap_return_50;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_5_reg_428 <= grp_to_int_fu_1252_ap_return_50;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_6_reg_418 <= grp_janus_step_fu_960_ap_return_51;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_6_reg_418 <= grp_to_int_fu_1252_ap_return_51;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_7_reg_408 <= grp_janus_step_fu_960_ap_return_52;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_7_reg_408 <= grp_to_int_fu_1252_ap_return_52;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_8_reg_398 <= grp_janus_step_fu_960_ap_return_53;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_8_reg_398 <= grp_to_int_fu_1252_ap_return_53;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_vz_reg_478 <= grp_janus_step_fu_960_ap_return_45;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_vz_reg_478 <= grp_to_int_fu_1252_ap_return_45;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_1_reg_918 <= grp_janus_step_fu_960_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_1_reg_918 <= grp_to_int_fu_1252_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_2_reg_908 <= grp_janus_step_fu_960_ap_return_2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_2_reg_908 <= grp_to_int_fu_1252_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_3_reg_898 <= grp_janus_step_fu_960_ap_return_3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_3_reg_898 <= grp_to_int_fu_1252_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_4_reg_888 <= grp_janus_step_fu_960_ap_return_4;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_4_reg_888 <= grp_to_int_fu_1252_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_5_reg_878 <= grp_janus_step_fu_960_ap_return_5;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_5_reg_878 <= grp_to_int_fu_1252_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_6_reg_868 <= grp_janus_step_fu_960_ap_return_6;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_6_reg_868 <= grp_to_int_fu_1252_ap_return_6;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_7_reg_858 <= grp_janus_step_fu_960_ap_return_7;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_7_reg_858 <= grp_to_int_fu_1252_ap_return_7;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_8_reg_848 <= grp_janus_step_fu_960_ap_return_8;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_8_reg_848 <= grp_to_int_fu_1252_ap_return_8;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_x_reg_928 <= grp_janus_step_fu_960_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_x_reg_928 <= grp_to_int_fu_1252_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_1_reg_828 <= grp_janus_step_fu_960_ap_return_10;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_1_reg_828 <= grp_to_int_fu_1252_ap_return_10;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_2_reg_818 <= grp_janus_step_fu_960_ap_return_11;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_2_reg_818 <= grp_to_int_fu_1252_ap_return_11;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_3_reg_808 <= grp_janus_step_fu_960_ap_return_12;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_3_reg_808 <= grp_to_int_fu_1252_ap_return_12;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_4_reg_798 <= grp_janus_step_fu_960_ap_return_13;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_4_reg_798 <= grp_to_int_fu_1252_ap_return_13;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_5_reg_788 <= grp_janus_step_fu_960_ap_return_14;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_5_reg_788 <= grp_to_int_fu_1252_ap_return_14;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_6_reg_778 <= grp_janus_step_fu_960_ap_return_15;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_6_reg_778 <= grp_to_int_fu_1252_ap_return_15;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_7_reg_768 <= grp_janus_step_fu_960_ap_return_16;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_7_reg_768 <= grp_to_int_fu_1252_ap_return_16;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_8_reg_758 <= grp_janus_step_fu_960_ap_return_17;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_8_reg_758 <= grp_to_int_fu_1252_ap_return_17;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_y_reg_838 <= grp_janus_step_fu_960_ap_return_9;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_y_reg_838 <= grp_to_int_fu_1252_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_1_reg_738 <= grp_janus_step_fu_960_ap_return_19;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_1_reg_738 <= grp_to_int_fu_1252_ap_return_19;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_2_reg_728 <= grp_janus_step_fu_960_ap_return_20;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_2_reg_728 <= grp_to_int_fu_1252_ap_return_20;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_3_reg_718 <= grp_janus_step_fu_960_ap_return_21;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_3_reg_718 <= grp_to_int_fu_1252_ap_return_21;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_4_reg_708 <= grp_janus_step_fu_960_ap_return_22;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_4_reg_708 <= grp_to_int_fu_1252_ap_return_22;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_5_reg_698 <= grp_janus_step_fu_960_ap_return_23;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_5_reg_698 <= grp_to_int_fu_1252_ap_return_23;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_6_reg_688 <= grp_janus_step_fu_960_ap_return_24;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_6_reg_688 <= grp_to_int_fu_1252_ap_return_24;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_7_reg_678 <= grp_janus_step_fu_960_ap_return_25;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_7_reg_678 <= grp_to_int_fu_1252_ap_return_25;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_8_reg_668 <= grp_janus_step_fu_960_ap_return_26;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_8_reg_668 <= grp_to_int_fu_1252_ap_return_26;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        p_int_z_reg_748 <= grp_janus_step_fu_960_ap_return_18;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        p_int_z_reg_748 <= grp_to_int_fu_1252_ap_return_18;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        t_reg_938 <= t_1_9_reg_3034;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
        t_reg_938 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond1_reg_3309 <= exitcond1_fu_2078_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_0_o_ap_vld)))) begin
        p_ax_0 <= grp_janus_step_fu_960_p_ax_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_1_o_ap_vld)))) begin
        p_ax_1 <= grp_janus_step_fu_960_p_ax_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_2_o_ap_vld)))) begin
        p_ax_2 <= grp_janus_step_fu_960_p_ax_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_3_o_ap_vld)))) begin
        p_ax_3 <= grp_janus_step_fu_960_p_ax_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_4_o_ap_vld)))) begin
        p_ax_4 <= grp_janus_step_fu_960_p_ax_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ax_5_o_ap_vld)))) begin
        p_ax_5 <= grp_janus_step_fu_960_p_ax_5_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond1_fu_2078_p2))) begin
        p_ax_gep21_phi_reg_3348 <= p_ax_gep21_phi_fu_2560_p3;
        p_ay_gep24_phi_reg_3353 <= p_ay_gep24_phi_fu_2624_p3;
        p_az_gep27_phi_reg_3358 <= p_az_gep27_phi_fu_2688_p3;
        p_m_gep30_phi_reg_3363[23 : 0] <= p_m_gep30_phi_fu_2752_p3[23 : 0];
p_m_gep30_phi_reg_3363[40 : 25] <= p_m_gep30_phi_fu_2752_p3[40 : 25];
p_m_gep30_phi_reg_3363[43] <= p_m_gep30_phi_fu_2752_p3[43];
p_m_gep30_phi_reg_3363[56 : 45] <= p_m_gep30_phi_fu_2752_p3[56 : 45];
        p_vx_gep12_phi_reg_3333 <= p_vx_gep12_phi_fu_2368_p3;
        p_vy_gep15_phi_reg_3338 <= p_vy_gep15_phi_fu_2432_p3;
        p_vz_gep18_phi_reg_3343 <= p_vz_gep18_phi_fu_2496_p3;
        p_x_gep3_phi_reg_3318 <= p_x_gep3_phi_fu_2176_p3;
        p_y_gep6_phi_reg_3323 <= p_y_gep6_phi_fu_2240_p3;
        p_z_gep9_phi_reg_3328 <= p_z_gep9_phi_fu_2304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_0_o_ap_vld)))) begin
        p_ay_0 <= grp_janus_step_fu_960_p_ay_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_1_o_ap_vld)))) begin
        p_ay_1 <= grp_janus_step_fu_960_p_ay_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_2_o_ap_vld)))) begin
        p_ay_2 <= grp_janus_step_fu_960_p_ay_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_3_o_ap_vld)))) begin
        p_ay_3 <= grp_janus_step_fu_960_p_ay_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_4_o_ap_vld)))) begin
        p_ay_4 <= grp_janus_step_fu_960_p_ay_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_ay_5_o_ap_vld)))) begin
        p_ay_5 <= grp_janus_step_fu_960_p_ay_5_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_0_o_ap_vld)))) begin
        p_az_0 <= grp_janus_step_fu_960_p_az_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_1_o_ap_vld)))) begin
        p_az_1 <= grp_janus_step_fu_960_p_az_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_2_o_ap_vld)))) begin
        p_az_2 <= grp_janus_step_fu_960_p_az_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_3_o_ap_vld)))) begin
        p_az_3 <= grp_janus_step_fu_960_p_az_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_4_o_ap_vld)))) begin
        p_az_4 <= grp_janus_step_fu_960_p_az_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_az_5_o_ap_vld)))) begin
        p_az_5 <= grp_janus_step_fu_960_p_az_5_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_0_ap_vld)))) begin
        p_vx_0 <= grp_janus_step_fu_960_p_vx_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_1_ap_vld)))) begin
        p_vx_1 <= grp_janus_step_fu_960_p_vx_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_2_ap_vld)))) begin
        p_vx_2 <= grp_janus_step_fu_960_p_vx_2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_3_ap_vld)))) begin
        p_vx_3 <= grp_janus_step_fu_960_p_vx_3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_4_ap_vld)))) begin
        p_vx_4 <= grp_janus_step_fu_960_p_vx_4;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_5_ap_vld)))) begin
        p_vx_5 <= grp_janus_step_fu_960_p_vx_5;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_6_ap_vld)))) begin
        p_vx_6 <= grp_janus_step_fu_960_p_vx_6;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_7_ap_vld)))) begin
        p_vx_7 <= grp_janus_step_fu_960_p_vx_7;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vx_8_ap_vld)))) begin
        p_vx_8 <= grp_janus_step_fu_960_p_vx_8;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_0_ap_vld)))) begin
        p_vy_0 <= grp_janus_step_fu_960_p_vy_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_1_ap_vld)))) begin
        p_vy_1 <= grp_janus_step_fu_960_p_vy_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_2_ap_vld)))) begin
        p_vy_2 <= grp_janus_step_fu_960_p_vy_2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_3_ap_vld)))) begin
        p_vy_3 <= grp_janus_step_fu_960_p_vy_3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_4_ap_vld)))) begin
        p_vy_4 <= grp_janus_step_fu_960_p_vy_4;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_5_ap_vld)))) begin
        p_vy_5 <= grp_janus_step_fu_960_p_vy_5;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_6_ap_vld)))) begin
        p_vy_6 <= grp_janus_step_fu_960_p_vy_6;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_7_ap_vld)))) begin
        p_vy_7 <= grp_janus_step_fu_960_p_vy_7;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vy_8_ap_vld)))) begin
        p_vy_8 <= grp_janus_step_fu_960_p_vy_8;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_0_ap_vld)))) begin
        p_vz_0 <= grp_janus_step_fu_960_p_vz_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_1_ap_vld)))) begin
        p_vz_1 <= grp_janus_step_fu_960_p_vz_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_2_ap_vld)))) begin
        p_vz_2 <= grp_janus_step_fu_960_p_vz_2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_3_ap_vld)))) begin
        p_vz_3 <= grp_janus_step_fu_960_p_vz_3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_4_ap_vld)))) begin
        p_vz_4 <= grp_janus_step_fu_960_p_vz_4;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_5_ap_vld)))) begin
        p_vz_5 <= grp_janus_step_fu_960_p_vz_5;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_6_ap_vld)))) begin
        p_vz_6 <= grp_janus_step_fu_960_p_vz_6;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_7_ap_vld)))) begin
        p_vz_7 <= grp_janus_step_fu_960_p_vz_7;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_vz_8_ap_vld)))) begin
        p_vz_8 <= grp_janus_step_fu_960_p_vz_8;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_0_o_ap_vld)))) begin
        p_x_0 <= grp_janus_step_fu_960_p_x_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_1_o_ap_vld)))) begin
        p_x_1 <= grp_janus_step_fu_960_p_x_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_2_o_ap_vld)))) begin
        p_x_2 <= grp_janus_step_fu_960_p_x_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_3_o_ap_vld)))) begin
        p_x_3 <= grp_janus_step_fu_960_p_x_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_4_o_ap_vld)))) begin
        p_x_4 <= grp_janus_step_fu_960_p_x_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_5_o_ap_vld)))) begin
        p_x_5 <= grp_janus_step_fu_960_p_x_5_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_6_o_ap_vld)))) begin
        p_x_6 <= grp_janus_step_fu_960_p_x_6_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_7_o_ap_vld)))) begin
        p_x_7 <= grp_janus_step_fu_960_p_x_7_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_x_8_o_ap_vld)))) begin
        p_x_8 <= grp_janus_step_fu_960_p_x_8_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_0_o_ap_vld)))) begin
        p_y_0 <= grp_janus_step_fu_960_p_y_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_1_o_ap_vld)))) begin
        p_y_1 <= grp_janus_step_fu_960_p_y_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_2_o_ap_vld)))) begin
        p_y_2 <= grp_janus_step_fu_960_p_y_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_3_o_ap_vld)))) begin
        p_y_3 <= grp_janus_step_fu_960_p_y_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_4_o_ap_vld)))) begin
        p_y_4 <= grp_janus_step_fu_960_p_y_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_5_o_ap_vld)))) begin
        p_y_5 <= grp_janus_step_fu_960_p_y_5_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_6_o_ap_vld)))) begin
        p_y_6 <= grp_janus_step_fu_960_p_y_6_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_7_o_ap_vld)))) begin
        p_y_7 <= grp_janus_step_fu_960_p_y_7_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_y_8_o_ap_vld)))) begin
        p_y_8 <= grp_janus_step_fu_960_p_y_8_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_0_o_ap_vld)))) begin
        p_z_0 <= grp_janus_step_fu_960_p_z_0_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_1_o_ap_vld)))) begin
        p_z_1 <= grp_janus_step_fu_960_p_z_1_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_2_o_ap_vld)))) begin
        p_z_2 <= grp_janus_step_fu_960_p_z_2_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_3_o_ap_vld)))) begin
        p_z_3 <= grp_janus_step_fu_960_p_z_3_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_4_o_ap_vld)))) begin
        p_z_4 <= grp_janus_step_fu_960_p_z_4_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_5_o_ap_vld)))) begin
        p_z_5 <= grp_janus_step_fu_960_p_z_5_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_6_o_ap_vld)))) begin
        p_z_6 <= grp_janus_step_fu_960_p_z_6_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_7_o_ap_vld)))) begin
        p_z_7 <= grp_janus_step_fu_960_p_z_7_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state20) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state22) & (1'b1 == grp_janus_step_fu_960_p_z_8_o_ap_vld)))) begin
        p_z_8 <= grp_janus_step_fu_960_p_z_8_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (grp_janus_step_fu_960_ap_done == 1'b1)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io))) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_1580 <= grp_janus_step_fu_960_ap_return_0;
        reg_1585 <= grp_janus_step_fu_960_ap_return_1;
        reg_1590 <= grp_janus_step_fu_960_ap_return_2;
        reg_1595 <= grp_janus_step_fu_960_ap_return_3;
        reg_1600 <= grp_janus_step_fu_960_ap_return_4;
        reg_1605 <= grp_janus_step_fu_960_ap_return_5;
        reg_1610 <= grp_janus_step_fu_960_ap_return_6;
        reg_1615 <= grp_janus_step_fu_960_ap_return_7;
        reg_1620 <= grp_janus_step_fu_960_ap_return_8;
        reg_1625 <= grp_janus_step_fu_960_ap_return_9;
        reg_1630 <= grp_janus_step_fu_960_ap_return_10;
        reg_1635 <= grp_janus_step_fu_960_ap_return_11;
        reg_1640 <= grp_janus_step_fu_960_ap_return_12;
        reg_1645 <= grp_janus_step_fu_960_ap_return_13;
        reg_1650 <= grp_janus_step_fu_960_ap_return_14;
        reg_1655 <= grp_janus_step_fu_960_ap_return_15;
        reg_1660 <= grp_janus_step_fu_960_ap_return_16;
        reg_1665 <= grp_janus_step_fu_960_ap_return_17;
        reg_1670 <= grp_janus_step_fu_960_ap_return_18;
        reg_1675 <= grp_janus_step_fu_960_ap_return_19;
        reg_1680 <= grp_janus_step_fu_960_ap_return_20;
        reg_1685 <= grp_janus_step_fu_960_ap_return_21;
        reg_1690 <= grp_janus_step_fu_960_ap_return_22;
        reg_1695 <= grp_janus_step_fu_960_ap_return_23;
        reg_1700 <= grp_janus_step_fu_960_ap_return_24;
        reg_1705 <= grp_janus_step_fu_960_ap_return_25;
        reg_1710 <= grp_janus_step_fu_960_ap_return_26;
        reg_1715 <= grp_janus_step_fu_960_ap_return_27;
        reg_1720 <= grp_janus_step_fu_960_ap_return_28;
        reg_1725 <= grp_janus_step_fu_960_ap_return_29;
        reg_1730 <= grp_janus_step_fu_960_ap_return_30;
        reg_1735 <= grp_janus_step_fu_960_ap_return_31;
        reg_1740 <= grp_janus_step_fu_960_ap_return_32;
        reg_1745 <= grp_janus_step_fu_960_ap_return_33;
        reg_1750 <= grp_janus_step_fu_960_ap_return_34;
        reg_1755 <= grp_janus_step_fu_960_ap_return_35;
        reg_1760 <= grp_janus_step_fu_960_ap_return_36;
        reg_1765 <= grp_janus_step_fu_960_ap_return_37;
        reg_1770 <= grp_janus_step_fu_960_ap_return_38;
        reg_1775 <= grp_janus_step_fu_960_ap_return_39;
        reg_1780 <= grp_janus_step_fu_960_ap_return_40;
        reg_1785 <= grp_janus_step_fu_960_ap_return_41;
        reg_1790 <= grp_janus_step_fu_960_ap_return_42;
        reg_1795 <= grp_janus_step_fu_960_ap_return_43;
        reg_1800 <= grp_janus_step_fu_960_ap_return_44;
        reg_1805 <= grp_janus_step_fu_960_ap_return_45;
        reg_1810 <= grp_janus_step_fu_960_ap_return_46;
        reg_1815 <= grp_janus_step_fu_960_ap_return_47;
        reg_1820 <= grp_janus_step_fu_960_ap_return_48;
        reg_1825 <= grp_janus_step_fu_960_ap_return_49;
        reg_1830 <= grp_janus_step_fu_960_ap_return_50;
        reg_1835 <= grp_janus_step_fu_960_ap_return_51;
        reg_1840 <= grp_janus_step_fu_960_ap_return_52;
        reg_1845 <= grp_janus_step_fu_960_ap_return_53;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)) & (exitcond_4_fu_2066_p2 == 1'd0))) begin
        t_1_9_reg_3034 <= t_1_9_fu_2072_p2;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond1_fu_2078_p2)) begin
        ap_condition_pp0_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_ax_AWREADY)) begin
        ap_sig_ioackin_result_ax_AWREADY = result_ax_AWREADY;
    end else begin
        ap_sig_ioackin_result_ax_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_ax_WREADY)) begin
        ap_sig_ioackin_result_ax_WREADY = result_ax_WREADY;
    end else begin
        ap_sig_ioackin_result_ax_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_ay_AWREADY)) begin
        ap_sig_ioackin_result_ay_AWREADY = result_ay_AWREADY;
    end else begin
        ap_sig_ioackin_result_ay_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_ay_WREADY)) begin
        ap_sig_ioackin_result_ay_WREADY = result_ay_WREADY;
    end else begin
        ap_sig_ioackin_result_ay_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_az_AWREADY)) begin
        ap_sig_ioackin_result_az_AWREADY = result_az_AWREADY;
    end else begin
        ap_sig_ioackin_result_az_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_az_WREADY)) begin
        ap_sig_ioackin_result_az_WREADY = result_az_WREADY;
    end else begin
        ap_sig_ioackin_result_az_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_m_AWREADY)) begin
        ap_sig_ioackin_result_m_AWREADY = result_m_AWREADY;
    end else begin
        ap_sig_ioackin_result_m_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_m_WREADY)) begin
        ap_sig_ioackin_result_m_WREADY = result_m_WREADY;
    end else begin
        ap_sig_ioackin_result_m_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vx_AWREADY)) begin
        ap_sig_ioackin_result_vx_AWREADY = result_vx_AWREADY;
    end else begin
        ap_sig_ioackin_result_vx_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vx_WREADY)) begin
        ap_sig_ioackin_result_vx_WREADY = result_vx_WREADY;
    end else begin
        ap_sig_ioackin_result_vx_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vy_AWREADY)) begin
        ap_sig_ioackin_result_vy_AWREADY = result_vy_AWREADY;
    end else begin
        ap_sig_ioackin_result_vy_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vy_WREADY)) begin
        ap_sig_ioackin_result_vy_WREADY = result_vy_WREADY;
    end else begin
        ap_sig_ioackin_result_vy_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vz_AWREADY)) begin
        ap_sig_ioackin_result_vz_AWREADY = result_vz_AWREADY;
    end else begin
        ap_sig_ioackin_result_vz_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_vz_WREADY)) begin
        ap_sig_ioackin_result_vz_WREADY = result_vz_WREADY;
    end else begin
        ap_sig_ioackin_result_vz_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_x_AWREADY)) begin
        ap_sig_ioackin_result_x_AWREADY = result_x_AWREADY;
    end else begin
        ap_sig_ioackin_result_x_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_x_WREADY)) begin
        ap_sig_ioackin_result_x_WREADY = result_x_WREADY;
    end else begin
        ap_sig_ioackin_result_x_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_y_AWREADY)) begin
        ap_sig_ioackin_result_y_AWREADY = result_y_AWREADY;
    end else begin
        ap_sig_ioackin_result_y_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_y_WREADY)) begin
        ap_sig_ioackin_result_y_WREADY = result_y_WREADY;
    end else begin
        ap_sig_ioackin_result_y_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_z_AWREADY)) begin
        ap_sig_ioackin_result_z_AWREADY = result_z_AWREADY;
    end else begin
        ap_sig_ioackin_result_z_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_result_z_WREADY)) begin
        ap_sig_ioackin_result_z_WREADY = result_z_WREADY;
    end else begin
        ap_sig_ioackin_result_z_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_vx_read = reg_1715;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_vx_read = p_int_vx_reg_658;
    end else begin
        grp_janus_step_fu_960_p_int_0_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_vy_read = reg_1760;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_vy_read = p_int_vy_reg_568;
    end else begin
        grp_janus_step_fu_960_p_int_0_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_vz_read = reg_1805;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_vz_read = p_int_vz_reg_478;
    end else begin
        grp_janus_step_fu_960_p_int_0_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_x_read = reg_1580;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_x_read = p_int_x_reg_928;
    end else begin
        grp_janus_step_fu_960_p_int_0_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_y_read = reg_1625;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_y_read = p_int_y_reg_838;
    end else begin
        grp_janus_step_fu_960_p_int_0_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_0_z_read = reg_1670;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_0_z_read = p_int_z_reg_748;
    end else begin
        grp_janus_step_fu_960_p_int_0_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_vx_read = reg_1720;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_vx_read = p_int_vx_1_reg_648;
    end else begin
        grp_janus_step_fu_960_p_int_1_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_vy_read = reg_1765;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_vy_read = p_int_vy_1_reg_558;
    end else begin
        grp_janus_step_fu_960_p_int_1_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_vz_read = reg_1810;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_vz_read = p_int_vz_1_reg_468;
    end else begin
        grp_janus_step_fu_960_p_int_1_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_x_read = reg_1585;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_x_read = p_int_x_1_reg_918;
    end else begin
        grp_janus_step_fu_960_p_int_1_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_y_read = reg_1630;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_y_read = p_int_y_1_reg_828;
    end else begin
        grp_janus_step_fu_960_p_int_1_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_1_z_read = reg_1675;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_1_z_read = p_int_z_1_reg_738;
    end else begin
        grp_janus_step_fu_960_p_int_1_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_vx_read = reg_1725;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_vx_read = p_int_vx_2_reg_638;
    end else begin
        grp_janus_step_fu_960_p_int_2_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_vy_read = reg_1770;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_vy_read = p_int_vy_2_reg_548;
    end else begin
        grp_janus_step_fu_960_p_int_2_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_vz_read = reg_1815;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_vz_read = p_int_vz_2_reg_458;
    end else begin
        grp_janus_step_fu_960_p_int_2_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_x_read = reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_x_read = p_int_x_2_reg_908;
    end else begin
        grp_janus_step_fu_960_p_int_2_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_y_read = reg_1635;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_y_read = p_int_y_2_reg_818;
    end else begin
        grp_janus_step_fu_960_p_int_2_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_2_z_read = reg_1680;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_2_z_read = p_int_z_2_reg_728;
    end else begin
        grp_janus_step_fu_960_p_int_2_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_vx_read = reg_1730;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_vx_read = p_int_vx_3_reg_628;
    end else begin
        grp_janus_step_fu_960_p_int_3_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_vy_read = reg_1775;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_vy_read = p_int_vy_3_reg_538;
    end else begin
        grp_janus_step_fu_960_p_int_3_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_vz_read = reg_1820;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_vz_read = p_int_vz_3_reg_448;
    end else begin
        grp_janus_step_fu_960_p_int_3_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_x_read = reg_1595;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_x_read = p_int_x_3_reg_898;
    end else begin
        grp_janus_step_fu_960_p_int_3_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_y_read = reg_1640;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_y_read = p_int_y_3_reg_808;
    end else begin
        grp_janus_step_fu_960_p_int_3_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_3_z_read = reg_1685;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_3_z_read = p_int_z_3_reg_718;
    end else begin
        grp_janus_step_fu_960_p_int_3_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_vx_read = reg_1735;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_vx_read = p_int_vx_4_reg_618;
    end else begin
        grp_janus_step_fu_960_p_int_4_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_vy_read = reg_1780;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_vy_read = p_int_vy_4_reg_528;
    end else begin
        grp_janus_step_fu_960_p_int_4_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_vz_read = reg_1825;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_vz_read = p_int_vz_4_reg_438;
    end else begin
        grp_janus_step_fu_960_p_int_4_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_x_read = reg_1600;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_x_read = p_int_x_4_reg_888;
    end else begin
        grp_janus_step_fu_960_p_int_4_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_y_read = reg_1645;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_y_read = p_int_y_4_reg_798;
    end else begin
        grp_janus_step_fu_960_p_int_4_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_4_z_read = reg_1690;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_4_z_read = p_int_z_4_reg_708;
    end else begin
        grp_janus_step_fu_960_p_int_4_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_vx_read = reg_1740;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_vx_read = p_int_vx_5_reg_608;
    end else begin
        grp_janus_step_fu_960_p_int_5_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_vy_read = reg_1785;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_vy_read = p_int_vy_5_reg_518;
    end else begin
        grp_janus_step_fu_960_p_int_5_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_vz_read = reg_1830;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_vz_read = p_int_vz_5_reg_428;
    end else begin
        grp_janus_step_fu_960_p_int_5_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_x_read = reg_1605;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_x_read = p_int_x_5_reg_878;
    end else begin
        grp_janus_step_fu_960_p_int_5_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_y_read = reg_1650;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_y_read = p_int_y_5_reg_788;
    end else begin
        grp_janus_step_fu_960_p_int_5_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_5_z_read = reg_1695;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_5_z_read = p_int_z_5_reg_698;
    end else begin
        grp_janus_step_fu_960_p_int_5_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_vx_read = reg_1745;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_vx_read = p_int_vx_6_reg_598;
    end else begin
        grp_janus_step_fu_960_p_int_6_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_vy_read = reg_1790;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_vy_read = p_int_vy_6_reg_508;
    end else begin
        grp_janus_step_fu_960_p_int_6_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_vz_read = reg_1835;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_vz_read = p_int_vz_6_reg_418;
    end else begin
        grp_janus_step_fu_960_p_int_6_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_x_read = reg_1610;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_x_read = p_int_x_6_reg_868;
    end else begin
        grp_janus_step_fu_960_p_int_6_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_y_read = reg_1655;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_y_read = p_int_y_6_reg_778;
    end else begin
        grp_janus_step_fu_960_p_int_6_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_6_z_read = reg_1700;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_6_z_read = p_int_z_6_reg_688;
    end else begin
        grp_janus_step_fu_960_p_int_6_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_vx_read = reg_1750;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_vx_read = p_int_vx_7_reg_588;
    end else begin
        grp_janus_step_fu_960_p_int_7_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_vy_read = reg_1795;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_vy_read = p_int_vy_7_reg_498;
    end else begin
        grp_janus_step_fu_960_p_int_7_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_vz_read = reg_1840;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_vz_read = p_int_vz_7_reg_408;
    end else begin
        grp_janus_step_fu_960_p_int_7_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_x_read = reg_1615;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_x_read = p_int_x_7_reg_858;
    end else begin
        grp_janus_step_fu_960_p_int_7_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_y_read = reg_1660;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_y_read = p_int_y_7_reg_768;
    end else begin
        grp_janus_step_fu_960_p_int_7_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_7_z_read = reg_1705;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_7_z_read = p_int_z_7_reg_678;
    end else begin
        grp_janus_step_fu_960_p_int_7_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_vx_read = reg_1755;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_vx_read = p_int_vx_8_reg_578;
    end else begin
        grp_janus_step_fu_960_p_int_8_vx_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_vy_read = reg_1800;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_vy_read = p_int_vy_8_reg_488;
    end else begin
        grp_janus_step_fu_960_p_int_8_vy_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_vz_read = reg_1845;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_vz_read = p_int_vz_8_reg_398;
    end else begin
        grp_janus_step_fu_960_p_int_8_vz_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_x_read = reg_1620;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_x_read = p_int_x_8_reg_848;
    end else begin
        grp_janus_step_fu_960_p_int_8_x_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_y_read = reg_1665;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_y_read = p_int_y_8_reg_758;
    end else begin
        grp_janus_step_fu_960_p_int_8_y_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_janus_step_fu_960_p_int_8_z_read = reg_1710;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_janus_step_fu_960_p_int_8_z_read = p_int_z_8_reg_668;
    end else begin
        grp_janus_step_fu_960_p_int_8_z_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_ax_AWREADY))) begin
        result_ax_AWVALID = 1'b1;
    end else begin
        result_ax_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_ax_BREADY = 1'b1;
    end else begin
        result_ax_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_ax_WREADY))) begin
        result_ax_WVALID = 1'b1;
    end else begin
        result_ax_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_ax_blk_n_AW = m_axi_result_ax_AWREADY;
    end else begin
        result_ax_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_ax_blk_n_B = m_axi_result_ax_BVALID;
    end else begin
        result_ax_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_ax_blk_n_W = m_axi_result_ax_WREADY;
    end else begin
        result_ax_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_ay_AWREADY))) begin
        result_ay_AWVALID = 1'b1;
    end else begin
        result_ay_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_ay_BREADY = 1'b1;
    end else begin
        result_ay_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_ay_WREADY))) begin
        result_ay_WVALID = 1'b1;
    end else begin
        result_ay_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_ay_blk_n_AW = m_axi_result_ay_AWREADY;
    end else begin
        result_ay_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_ay_blk_n_B = m_axi_result_ay_BVALID;
    end else begin
        result_ay_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_ay_blk_n_W = m_axi_result_ay_WREADY;
    end else begin
        result_ay_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_az_AWREADY))) begin
        result_az_AWVALID = 1'b1;
    end else begin
        result_az_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_az_BREADY = 1'b1;
    end else begin
        result_az_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_az_WREADY))) begin
        result_az_WVALID = 1'b1;
    end else begin
        result_az_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_az_blk_n_AW = m_axi_result_az_AWREADY;
    end else begin
        result_az_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_az_blk_n_B = m_axi_result_az_BVALID;
    end else begin
        result_az_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_az_blk_n_W = m_axi_result_az_WREADY;
    end else begin
        result_az_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_m_AWREADY))) begin
        result_m_AWVALID = 1'b1;
    end else begin
        result_m_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_m_BREADY = 1'b1;
    end else begin
        result_m_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_m_WREADY))) begin
        result_m_WVALID = 1'b1;
    end else begin
        result_m_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_m_blk_n_AW = m_axi_result_m_AWREADY;
    end else begin
        result_m_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_m_blk_n_B = m_axi_result_m_BVALID;
    end else begin
        result_m_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_m_blk_n_W = m_axi_result_m_WREADY;
    end else begin
        result_m_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_vx_AWREADY))) begin
        result_vx_AWVALID = 1'b1;
    end else begin
        result_vx_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_vx_BREADY = 1'b1;
    end else begin
        result_vx_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_vx_WREADY))) begin
        result_vx_WVALID = 1'b1;
    end else begin
        result_vx_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_vx_blk_n_AW = m_axi_result_vx_AWREADY;
    end else begin
        result_vx_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_vx_blk_n_B = m_axi_result_vx_BVALID;
    end else begin
        result_vx_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_vx_blk_n_W = m_axi_result_vx_WREADY;
    end else begin
        result_vx_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_vy_AWREADY))) begin
        result_vy_AWVALID = 1'b1;
    end else begin
        result_vy_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_vy_BREADY = 1'b1;
    end else begin
        result_vy_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_vy_WREADY))) begin
        result_vy_WVALID = 1'b1;
    end else begin
        result_vy_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_vy_blk_n_AW = m_axi_result_vy_AWREADY;
    end else begin
        result_vy_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_vy_blk_n_B = m_axi_result_vy_BVALID;
    end else begin
        result_vy_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_vy_blk_n_W = m_axi_result_vy_WREADY;
    end else begin
        result_vy_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_vz_AWREADY))) begin
        result_vz_AWVALID = 1'b1;
    end else begin
        result_vz_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_vz_BREADY = 1'b1;
    end else begin
        result_vz_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_vz_WREADY))) begin
        result_vz_WVALID = 1'b1;
    end else begin
        result_vz_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_vz_blk_n_AW = m_axi_result_vz_AWREADY;
    end else begin
        result_vz_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_vz_blk_n_B = m_axi_result_vz_BVALID;
    end else begin
        result_vz_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_vz_blk_n_W = m_axi_result_vz_WREADY;
    end else begin
        result_vz_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_x_AWREADY))) begin
        result_x_AWVALID = 1'b1;
    end else begin
        result_x_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_x_BREADY = 1'b1;
    end else begin
        result_x_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_x_WREADY))) begin
        result_x_WVALID = 1'b1;
    end else begin
        result_x_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_x_blk_n_AW = m_axi_result_x_AWREADY;
    end else begin
        result_x_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_x_blk_n_B = m_axi_result_x_BVALID;
    end else begin
        result_x_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_x_blk_n_W = m_axi_result_x_WREADY;
    end else begin
        result_x_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_y_AWREADY))) begin
        result_y_AWVALID = 1'b1;
    end else begin
        result_y_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_y_BREADY = 1'b1;
    end else begin
        result_y_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_y_WREADY))) begin
        result_y_WVALID = 1'b1;
    end else begin
        result_y_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_y_blk_n_AW = m_axi_result_y_AWREADY;
    end else begin
        result_y_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_y_blk_n_B = m_axi_result_y_BVALID;
    end else begin
        result_y_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_y_blk_n_W = m_axi_result_y_WREADY;
    end else begin
        result_y_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & (grp_janus_step_fu_960_ap_done == 1'b1) & (1'b0 == ap_reg_ioackin_result_z_AWREADY))) begin
        result_z_AWVALID = 1'b1;
    end else begin
        result_z_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
        result_z_BREADY = 1'b1;
    end else begin
        result_z_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_result_z_WREADY))) begin
        result_z_WVALID = 1'b1;
    end else begin
        result_z_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1))) begin
        result_z_blk_n_AW = m_axi_result_z_AWREADY;
    end else begin
        result_z_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        result_z_blk_n_B = m_axi_result_z_BVALID;
    end else begin
        result_z_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond1_reg_3309 == 1'd0))) begin
        result_z_blk_n_W = m_axi_result_z_WREADY;
    end else begin
        result_z_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_to_int_fu_1252_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_janus_step_fu_960_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_4_fu_2066_p2 == 1'd1) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == grp_janus_step_fu_960_ap_done) | (1'b1 == ap_block_state10_io)) & (exitcond_4_fu_2066_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_janus_step_fu_960_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond1_fu_2078_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond1_fu_2078_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & ~((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state24_io));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state24_io));
end

always @ (*) begin
    ap_block_state10_io = (((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_x_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_y_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_z_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_vx_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_vy_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_vz_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_ax_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_ay_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_az_AWREADY)) | ((exitcond_4_fu_2066_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_result_m_AWREADY)));
end

assign ap_block_state23_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = (((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_x_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_y_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_z_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_vx_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_vy_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_vz_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_ax_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_ay_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_az_WREADY)) | ((exitcond1_reg_3309 == 1'd0) & (1'b0 == ap_sig_ioackin_result_m_WREADY)));
end

assign ap_block_state24_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29 = ((1'b0 == result_m_BVALID) | (1'b0 == result_az_BVALID) | (1'b0 == result_ay_BVALID) | (1'b0 == result_ax_BVALID) | (1'b0 == result_vz_BVALID) | (1'b0 == result_vy_BVALID) | (1'b0 == result_vx_BVALID) | (1'b0 == result_z_BVALID) | (1'b0 == result_y_BVALID) | (1'b0 == result_x_BVALID));
end

always @ (*) begin
    ap_condition_10620 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond1_reg_3309 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_2078_p2 = ((indvar_reg_949 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_4_fu_2066_p2 = ((t_reg_938 == 13'd6280) ? 1'b1 : 1'b0);

assign grp_janus_step_fu_960_ap_start = ap_reg_grp_janus_step_fu_960_ap_start;

assign grp_to_int_fu_1252_ap_start = ap_reg_grp_to_int_fu_1252_ap_start;

assign indvar_next_fu_2084_p2 = (indvar_reg_949 + 3'd1);

assign p_ax_gep21_phi_fu_2560_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_ax_4 : sel_tmp41_fu_2552_p3);

assign p_ay_gep24_phi_fu_2624_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_ay_4 : sel_tmp45_fu_2616_p3);

assign p_az_gep27_phi_fu_2688_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_az_4 : sel_tmp49_fu_2680_p3);

assign p_m_gep30_phi_fu_2752_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_m_4 : sel_tmp53_fu_2744_p3);

assign p_vx_gep12_phi_fu_2368_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_vx_4 : sel_tmp29_fu_2360_p3);

assign p_vy_gep15_phi_fu_2432_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_vy_4 : sel_tmp33_fu_2424_p3);

assign p_vz_gep18_phi_fu_2496_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_vz_4 : sel_tmp37_fu_2488_p3);

assign p_x_gep3_phi_fu_2176_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_x_4 : sel_tmp7_fu_2162_p3);

assign p_y_gep6_phi_fu_2240_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_y_4 : sel_tmp17_fu_2232_p3);

assign p_z_gep9_phi_fu_2304_p3 = ((sel_tmp8_fu_2170_p2[0:0] === 1'b1) ? p_z_4 : sel_tmp25_fu_2296_p3);

assign sel_tmp11_fu_2208_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_y_0 : p_y_5);

assign sel_tmp13_fu_2216_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_y_1 : sel_tmp11_fu_2208_p3);

assign sel_tmp15_fu_2224_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_y_2 : sel_tmp13_fu_2216_p3);

assign sel_tmp17_fu_2232_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_y_3 : sel_tmp15_fu_2224_p3);

assign sel_tmp1_fu_2120_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_x_0 : p_x_5);

assign sel_tmp21_fu_2272_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_z_0 : p_z_5);

assign sel_tmp23_fu_2280_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_z_1 : sel_tmp21_fu_2272_p3);

assign sel_tmp24_fu_2288_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_z_2 : sel_tmp23_fu_2280_p3);

assign sel_tmp25_fu_2296_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_z_3 : sel_tmp24_fu_2288_p3);

assign sel_tmp26_fu_2336_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_vx_0 : p_vx_5);

assign sel_tmp27_fu_2344_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_vx_1 : sel_tmp26_fu_2336_p3);

assign sel_tmp28_fu_2352_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_vx_2 : sel_tmp27_fu_2344_p3);

assign sel_tmp29_fu_2360_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_vx_3 : sel_tmp28_fu_2352_p3);

assign sel_tmp2_fu_2128_p2 = ((indvar_reg_949 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp30_fu_2400_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_vy_0 : p_vy_5);

assign sel_tmp31_fu_2408_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_vy_1 : sel_tmp30_fu_2400_p3);

assign sel_tmp32_fu_2416_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_vy_2 : sel_tmp31_fu_2408_p3);

assign sel_tmp33_fu_2424_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_vy_3 : sel_tmp32_fu_2416_p3);

assign sel_tmp34_fu_2464_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_vz_0 : p_vz_5);

assign sel_tmp35_fu_2472_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_vz_1 : sel_tmp34_fu_2464_p3);

assign sel_tmp36_fu_2480_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_vz_2 : sel_tmp35_fu_2472_p3);

assign sel_tmp37_fu_2488_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_vz_3 : sel_tmp36_fu_2480_p3);

assign sel_tmp38_fu_2528_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_ax_0 : p_ax_5);

assign sel_tmp39_fu_2536_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_ax_1 : sel_tmp38_fu_2528_p3);

assign sel_tmp3_fu_2134_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_x_1 : sel_tmp1_fu_2120_p3);

assign sel_tmp40_fu_2544_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_ax_2 : sel_tmp39_fu_2536_p3);

assign sel_tmp41_fu_2552_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_ax_3 : sel_tmp40_fu_2544_p3);

assign sel_tmp42_fu_2592_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_ay_0 : p_ay_5);

assign sel_tmp43_fu_2600_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_ay_1 : sel_tmp42_fu_2592_p3);

assign sel_tmp44_fu_2608_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_ay_2 : sel_tmp43_fu_2600_p3);

assign sel_tmp45_fu_2616_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_ay_3 : sel_tmp44_fu_2608_p3);

assign sel_tmp46_fu_2656_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_az_0 : p_az_5);

assign sel_tmp47_fu_2664_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_az_1 : sel_tmp46_fu_2656_p3);

assign sel_tmp48_fu_2672_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_az_2 : sel_tmp47_fu_2664_p3);

assign sel_tmp49_fu_2680_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_az_3 : sel_tmp48_fu_2672_p3);

assign sel_tmp4_fu_2142_p2 = ((indvar_reg_949 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp50_fu_2720_p3 = ((sel_tmp_fu_2114_p2[0:0] === 1'b1) ? p_m_0 : p_m_5);

assign sel_tmp51_fu_2728_p3 = ((sel_tmp2_fu_2128_p2[0:0] === 1'b1) ? p_m_1 : sel_tmp50_fu_2720_p3);

assign sel_tmp52_fu_2736_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_m_2 : sel_tmp51_fu_2728_p3);

assign sel_tmp53_fu_2744_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_m_3 : sel_tmp52_fu_2736_p3);

assign sel_tmp5_fu_2148_p3 = ((sel_tmp4_fu_2142_p2[0:0] === 1'b1) ? p_x_2 : sel_tmp3_fu_2134_p3);

assign sel_tmp6_fu_2156_p2 = ((indvar_reg_949 == 3'd3) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_2162_p3 = ((sel_tmp6_fu_2156_p2[0:0] === 1'b1) ? p_x_3 : sel_tmp5_fu_2148_p3);

assign sel_tmp8_fu_2170_p2 = ((indvar_reg_949 == 3'd4) ? 1'b1 : 1'b0);

assign sel_tmp_fu_2114_p2 = ((indvar_reg_949 == 3'd0) ? 1'b1 : 1'b0);

assign t_1_9_fu_2072_p2 = (t_reg_938 + 13'd10);

always @ (posedge ap_clk) begin
    p_m_gep30_phi_reg_3363[24] <= 1'b0;
    p_m_gep30_phi_reg_3363[42:41] <= 2'b00;
    p_m_gep30_phi_reg_3363[44:44] <= 1'b0;
    p_m_gep30_phi_reg_3363[63:57] <= 7'b0011111;
end

endmodule //astroSim
